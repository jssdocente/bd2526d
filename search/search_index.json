{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Inicio","text":""},{"location":"index.html#bases-de-datos","title":"Bases de Datos","text":"<p>En este repositorio vamos a agrupar los materiales y actividades realizadas en el m\u00f3dulo 0484 de Bases de Datos del CFGS de Desarrollo de Aplicaciones Web/Multiplataforma (DAM), cuyo curriculum viene fijado por el Real Decreto 405/2023.</p> <p>La competencia que se trabaja en este curso es:</p> <ul> <li>d) Gestionar bases de datos, interpretando su dise\u00f1o l\u00f3gico y verificando integridad, consistencia, seguridad y accesibilidad de los datos.</li> </ul> <p>Y el objetivo general correspondiente es:</p> <ul> <li>e) Interpretar el dise\u00f1o l\u00f3gico, verificando los par\u00e1metros establecidos para gestionar bases de datos.</li> </ul> <p>Las l\u00edneas de actuaci\u00f3n en el proceso de ense\u00f1anza-aprendizaje que permiten alcanzar los objetivos del m\u00f3dulo versar\u00e1n sobre:</p> <ul> <li>La interpretaci\u00f3n de dise\u00f1os l\u00f3gicos de bases de datos.</li> <li>La realizaci\u00f3n del dise\u00f1o f\u00edsico de una base de datos a partir de un dise\u00f1o l\u00f3gico.</li> <li>La implementaci\u00f3n y normalizaci\u00f3n de bases de datos.</li> <li>La realizaci\u00f3n de operaciones de consulta y modificaci\u00f3n sobre los datos almacenados.</li> <li>La programaci\u00f3n de procedimientos almacenados.</li> <li>La utilizaci\u00f3n de bases de datos no relacionales.</li> </ul>"},{"location":"index.html#resultados-de-aprendizaje","title":"Resultados de Aprendizaje","text":"<p>Los diferentes resultados de aprendizaje (RA) trabajados junto con su peso aproximado, tal cual se indica en la programaci\u00f3n did\u00e1ctica, son:</p> C\u00f3digo Descripci\u00f3n Peso (%) RA1 Reconoce los elementos de las bases de datos analizando sus funciones y valorando la utilidad de los sistemas gestores. RA2 Crea bases de datos definiendo su estructura y las caracter\u00edsticas de sus elementos seg\u00fan el modelo relacional. RA3 Consulta la informaci\u00f3n almacenada en una base de datos empleando asistentes, herramientas gr\u00e1ficas y el lenguaje de manipulaci\u00f3n de datos. RA4 Modifica la informaci\u00f3n almacenada en la base de datos utilizando asistentes, herramientas gr\u00e1ficas y el lenguaje de manipulaci\u00f3n de datos. RA5 Desarrolla procedimientos almacenados evaluando y utilizando las sentencias del lenguaje incorporado en el sistema gestor de bases de datos. RA6 Dise\u00f1a modelos relacionales normalizados interpretando diagramas entidad/relaci\u00f3n. RA7 Gestiona la informaci\u00f3n almacenada en bases de datos no relacionales, evaluando y utilizando las posibilidades que proporciona el sistema gestor."},{"location":"index.html#unidades-de-trabajo","title":"Unidades de Trabajo","text":"<p>A partir de los RA, hemos definido 13 unidades de trabajo (UT).</p> <p>El m\u00f3dulo de Base de Datos viene fijado con una carga lectiva de 190h, repartidas en 6 sesiones semanales, a lo largo de 28 semanas. </p>"},{"location":"index.html#evaluacion","title":"Evaluaci\u00f3n","text":"<p>Para la evaluaci\u00f3n del m\u00f3dulo de Bases de Datos se ponderar\u00e1n los resultados de aprendizaje respecto a los porcentajes indicados en el apartado anterior.</p> <p>Para la evaluaci\u00f3n de cada RA, emplearemos diferentes Instrumentos de Evaluaci\u00f3n (IE), como pueden ser:</p> <ul> <li>Actividades de ense\u00f1anza/aprendizaje, normalmente realizadas en el aula, acompa\u00f1adas de una r\u00fabrica. Distinguiremos las actividades de clase ( AC), las cuales se calificar\u00e1n normalmente sobre una escala de 3 puntos, de las actividades de refuerzo (AR), tambi\u00e9n sobre 3 puntos para consolidar uno o varios CE no conseguidos, as\u00ed como actividades de profundizaci\u00f3n (AP) que aportar\u00e1n puntos extra al RA.</li> <li>Pr\u00e1cticas ( PR), con una carga temporal variable, entre una semana o toda una unidad did\u00e1ctica. Normalmente calificados sobre 10 puntos.</li> <li>Proyectos ( PY), bien de desarrollo individual o en parejas, sobre un determinado RA.</li> <li>Pruebas objetivas ( PO). En algunos RA, y no de forma generalizada, se realizar\u00e1 una prueba objetiva (ya sea escrita o en ordenador). Normalmente calificados sobre 30 puntos.</li> </ul> <p>Todas las calificaciones, tanto de los instrumentos de evaluaci\u00f3n como de los propios RA, se podr\u00e1 consultar en todo momento en la plataforma Moodle del curso.</p>"},{"location":"index.html#materiales","title":"Materiales","text":"<p>A lo largo del curso, iremos trabajando diferentes materiales disponibles en este espacio web.</p> <p>Cada una de las UT comenzar\u00e1 con un resumen de la Propuesta Did\u00e1ctica que se plantea, los elementos que va a cubrir, tanto el RA a trabajar como sus criterios de evaluaci\u00f3n (CE) asociados, as\u00ed como un cuestionario inicial para reflexionar nuestro conocimiento previo.</p> <p>En la parte final de cada sesi\u00f3n, adem\u00e1s de diferentes recursos de Referencia para ampliar conocimientos, se plantean una serie de Actividades que iremos trabajando en su mayor medida en el aula. Cada una de las actividades indica el RA que cubre, los CE que trabaja as\u00ed como su calificaci\u00f3n. Adem\u00e1s, las actividades est\u00e1n codificadas con el prefijo del tipo de instrumento de evaluaci\u00f3n, as\u00ed como la unidad que cubren (por ejemplo, la actividad AC207, ser\u00e1 la 7\u00aa actividad de clase de la unidad 2).</p> <p>Respecto a los recursos tecnol\u00f3gicos, aunque inicialmente trabajaremos mucho con papel y l\u00e1piz (para modelar es m\u00e1s r\u00e1pido crear esbozos en papel), luego pasaremos a utilizar los SGBD de MariaDB y PostgreSQL indistintamente, tanto mediante contenedores Docker o instalaci\u00f3n local. En las \u00faltimas unidades, trabajaremos bases de datos NoSQL.</p>"},{"location":"temas/01/index.html","title":"01 - Sistemas de Almacenamiento","text":""},{"location":"temas/01/index.html#introduccion-a-las-bases-de-datos","title":"Introducci\u00f3n a las bases de datos","text":""},{"location":"temas/01/index.html#propuesta-didactica","title":"Propuesta did\u00e1ctica","text":"<p>En esta unidad vamos a trabajar el RA1: Reconoce los elementos de las bases de datos analizando sus funciones y valorando la utilidad de los sistemas gestores.</p> Criterios de evaluaci\u00f3n <ul> <li>CE1a: Se han analizado los sistemas l\u00f3gicos de almacenamiento y sus caracter\u00edsticas.</li> <li>CE1b: Se han identificado los distintos tipos de bases de datos seg\u00fan el modelo de datos utilizado.</li> <li>CE1c: Se han identificado los distintos tipos de bases de datos en funci\u00f3n de la ubicaci\u00f3n de la informaci\u00f3n.</li> <li>CE1d: Se ha evaluado la utilidad de un sistema gestor de bases de datos.</li> <li>CE1e: Se ha reconocido la funci\u00f3n de cada uno de los elementos de un sistema gestor de bases de datos.</li> <li>CE1f: Se han clasificado los sistemas gestores de bases de datos.</li> <li>CE1i: Se ha identificado la legislaci\u00f3n vigente sobre protecci\u00f3n de datos.</li> </ul>"},{"location":"temas/01/index.html#contenidos-de-referencia","title":"Contenidos de referencia","text":"<p>Almacenamiento de la informaci\u00f3n:</p> <ul> <li>Ficheros (planos, indexados, acceso directo, entre otros).</li> <li>Bases de datos. Conceptos, usos y tipos seg\u00fan el modelo de datos, la ubicaci\u00f3n de la informaci\u00f3n.</li> <li>Sistemas gestores de base de datos: Funciones, componentes y tipos.</li> <li>Legislaci\u00f3n sobre protecci\u00f3n de datos.</li> </ul>"},{"location":"temas/01/index.html#introduccion","title":"Introducci\u00f3n","text":"<p>Seguro que has escuchado la frase \"Los datos son el petr\u00f3leo del siglo XXI\". A d\u00eda de hoy se generan datos de manera desorbitada, y estos son muy importantes para las empresas porque se puede extraer mucha informaci\u00f3n.</p> <p>Pero, \u00bfsabemos qu\u00e9 diferencia hay entre un dato e informaci\u00f3n? \u00bfCu\u00e1l es m\u00e1s importante?</p> <p>Un dato es un hecho, un evento, una transacci\u00f3n, que ha sido registrado. En cambio, consideramos informaci\u00f3n a los datos que han sido procesados y comunicados de tal manera que pueden ser entendidos e interpretados.</p> <p>Por ejemplo, si decimos que hace 22\u00baC \u00bfEs un dato o es informaci\u00f3n? Y si decimos que hace 22\u00aaC en Sevilla el 15 de Julio, \u00bftenemos informaci\u00f3n?</p> <p>Los datos necesitan de un contexto para poder obtener informaci\u00f3n. Muchas veces, dicho contexto, son m\u00e1s datos que nos permiten relacionar unos con otros. Una vez que se asimila la informaci\u00f3n, se transforma en conocimiento</p> Evoluci\u00f3n de los datos - https://cursos.clavijero.edu.mx <p>As\u00ed pues, lo importante es la informaci\u00f3n, pero necesitamos de datos para obtenerla.</p> <p>Estamos rodeados de datos</p> <p>En la sociedad actual existe una demanda cada vez mayor de datos. Esta demanda ha aumentado en los \u00faltimos a\u00f1os debido al acceso multitudinario a Internet y a la aparici\u00f3n de peque\u00f1os dispositivos (m\u00f3viles y tabletas). Constantemente hacemos uso de estos datos cuando accedemos al cajero autom\u00e1tico, al m\u00e9dico, a la agenda del m\u00f3vil\u2026.</p> <p>Inicialmente para almacenar estos datos se utilizaba archivadores, cajones, carpetas y fichas en las que se registraban los datos. Sin embargo, en la actualidad las empresas gestionan enormes sistemas de informaci\u00f3n, necesitando a veces varios ordenadores.</p> <p>Cuando la cantidad de datos es peque\u00f1a su tratamiento es sencillo, sin embargo, a medida que aumenta la cantidad de informaci\u00f3n, resulta m\u00e1s complejo su tratamiento y aqu\u00ed es donde intervienen los sistemas inform\u00e1ticos y concretamente las aplicaciones software que van a ayudar a realizar esta tarea.</p> <p>Antes de la aparici\u00f3n del ordenador, el tiempo requerido para manipular estos datos era enorme. Sin embargo, el proceso de aprendizaje era relativamente sencillo ya que se usaban elementos que el usuario reconoc\u00eda perfectamente.</p> <p>Por esa raz\u00f3n, la inform\u00e1tica adapt\u00f3 sus herramientas para que los elementos que el usuario maneja en el ordenador se parezcan a los que utilizaba manualmente. As\u00ed en inform\u00e1tica se sigue hablado de ficheros, formularios, carpetas, directorios...</p>"},{"location":"temas/01/index.html#sistemas-de-informacion","title":"Sistemas de informaci\u00f3n","text":"<p>Si nos centramos en el mundo empresarial, todas las empresas tienen un sistema de informaci\u00f3n, entendido como un conjunto de elementos destinados al tratamiento y administraci\u00f3n de datos e informaci\u00f3n, organizados y listos para su posterior uso, y generados para cubrir una necesidad (objetivo). Estos sistemas de informaci\u00f3n pueden (o no) estar informatizados.</p> <p>\ud83e\udd14 Podemos definir un Sistema de Informaci\u00f3n (SI) como un conjunto de elementos relacionados entre s\u00ed, cuyo objetivo es el tratamiento y administraci\u00f3n de los datos.</p>"},{"location":"temas/01/index.html#21-elementos","title":"2.1 Elementos","text":"<p>Un Sistema de Informaci\u00f3n est\u00e1 formado por los siguientes elementos:</p> <ul> <li>Recursos F\u00edsicos: Maquinaria y elementos que se utilizan para almacenar y manejar la informaci\u00f3n. Carpetas, documentos, equipamiento, archivadores, ...</li> <li>Recursos Humanos: Personal que maneja la informaci\u00f3n.</li> <li>Protocolo: Normas que se siguen para manejar la informaci\u00f3n (formato de la informaci\u00f3n, modelo para los documentos, \u2026)</li> <li>Datos: Informaci\u00f3n que se maneja.</li> </ul> <p>Un Sistema de Informaci\u00f3n se dise\u00f1a a fin de satisfacer las necesidades de informaci\u00f3n de una organizaci\u00f3n. Actualmente, en la mayor\u00eda de los casos, los Sistemas de Informaci\u00f3n son sistemas inform\u00e1ticos que hacen uso de ordenadores.</p> <p>La informaci\u00f3n en un Sistema Inform\u00e1tico se guarda en archivos y/o en bases de datos, almacenados estos en soportes de almacenamiento.</p> <p>A los sistemas inform\u00e1ticos en donde se almacena y recupera la informaci\u00f3n en archivos se les conoce como Sistemas de Gesti\u00f3n de Archivos, de igual forma, los sistemas basados en bases datos se les conoce como Sistemas de Gesti\u00f3n de Bases de Datos.</p>"},{"location":"temas/01/index.html#22-objetivos","title":"2.2 Objetivos","text":"<p>El objetivo de cualquier Sistema de Informaci\u00f3n es representar mediante una abstracci\u00f3n del mundo real, toda la informaci\u00f3n necesaria para el cumplimiento de sus fines (obtener facturas, stocks del almac\u00e9n, \u2026).</p> <p>Se entiende por abstracci\u00f3n a una representaci\u00f3n simplificada o generalizada de alg\u00fan aspecto de la realidad, teniendo en cuenta las caracter\u00edsticas m\u00e1s importantes y obviando los detalles innecesarios. Esta abstracci\u00f3n se realiza mediante un modelo de datos que es un conjunto de m\u00e9todos y reglas que indican como se ha de almacenar la informaci\u00f3n y como se han de manipular los datos.</p> Del mundo real al mundo f\u00edsico <p>Existen tres fases de modelo:</p> <ul> <li>Modelo Conceptual: es la representaci\u00f3n de la realidad no comprometida con ning\u00fan entorno inform\u00e1tico, ni con ning\u00fan usuario. Modelo Entidad-Relaci\u00f3n de Chen.</li> <li>Modelo L\u00f3gico: determinan unos criterios de almacenamiento y de operaciones de manipulaci\u00f3n de datos dentro de un tipo de entorno inform\u00e1tico.</li> <li>Modelo F\u00edsico: es la implementaci\u00f3n f\u00edsica del modelo anterior.</li> </ul> <p>Los SGBD se basan en un modelo l\u00f3gico concreto (Jer\u00e1rquico, Red, Orientado a Objetos, Relacional, \u2026).</p> <p>Existen tres fases de modelo:</p> <ul> <li>Modelo Conceptual: es la representaci\u00f3n de la realidad no comprometida con ning\u00fan entorno inform\u00e1tico, ni con ning\u00fan usuario. Modelo Entidad-Relaci\u00f3n de Chen.</li> <li>Modelo L\u00f3gico: determinan unos criterios de almacenamiento y de operaciones de manipulaci\u00f3n de datos dentro de un tipo de entorno inform\u00e1tico.</li> <li>Modelo F\u00edsico: es la implementaci\u00f3n f\u00edsica del modelo anterior.</li> </ul> <p>Los SGBD se basan en un modelo l\u00f3gico concreto (Jer\u00e1rquico, Red, Orientado a Objetos, Relacional, ...).</p> <p>Ejemplo Real de fases de modelado de una Base de Datos Relacional:</p> <p>Suponemos una cl\u00ednica veterinaria, los propietarios y sus mascotas.</p> <ol> <li>Del propietario interesa: DNI, apellidos, nombre, direcci\u00f3n, tel\u00e9fono.</li> <li>De la mascota interesa: Identificador, nombre, fecha nacimiento, tipo.</li> <li>Un propietario puede llevar una o varias mascotas.</li> <li>Una mascota la lleva un solo propietario.</li> </ol> <p>Ejemplo Real de fases de modelado de una Base de Datos Relacional:</p>"},{"location":"temas/01/index.html#23-componentes","title":"2.3. Componentes","text":"<p>Los componentes de un Sistema Inform\u00e1tico son:</p> <ul> <li>Hardware. Equipamiento f\u00edsico que se utiliza para gestionar los datos, es decir, cada uno de los dispositivos electr\u00f3nicos que permiten el funcionamiento del Sistema de Informaci\u00f3n.</li> <li>Software. Aplicaciones inform\u00e1ticas que se encargan de la gesti\u00f3n de los datos.</li> <li>Recursos humanos. Personal que maneja el Sistema de Informaci\u00f3n.</li> <li> <p>Protocolo o Modelo de datos. Conjunto de m\u00e9todos y reglas que indican como se ha de almacenar la informaci\u00f3n y c\u00f3mo se ha de manipular.</p> </li> <li> <p>Datos. Se trata de la informaci\u00f3n relevante que almacena y gestiona el Sistema de Informaci\u00f3n. Ejemplos de datos son: S\u00e1nchez, 12764569F, Calle Mayo 5, Azul...</p> </li> </ul>"},{"location":"temas/01/index.html#3-almacenamiento-de-la-informacion","title":"3. Almacenamiento de la Informaci\u00f3n","text":"<p>Al informatizar los sistemas la informaci\u00f3n deb\u00eda ser trasladada desde el papel al formato digital y por lo general, era necesario almacenarla para su posterior recuperaci\u00f3n, consulta y procesamiento.</p> Fichas manuales Ficheros de texto <p>De este modo, para llevar a cabo un tratamiento eficiente de la informaci\u00f3n era necesario establecer m\u00e9todos adecuados para su almacenamiento. El elemento que permiti\u00f3 llevar a cabo el almacenamiento de datos de forma permanente en dispositivos de memoria masiva fue el fichero o archivo.</p> <p>Fichero o Archivo: conjunto de informaci\u00f3n relacionada, tratada como un todo y organizada de forma estructurada para ser almacenada de forma persistente. Es una secuencia de d\u00edgitos binarios que organiza informaci\u00f3n relacionada con un mismo aspecto. Tienen un nombre y una extensi\u00f3n que indican el tipo de informaci\u00f3n que contienen.</p> <p>Los ficheros est\u00e1n formados por Registros L\u00f3gicos que contienen datos relativos a un mismo elemento u objeto (por ejemplo, los datos de usuarios de una plataforma educativa). A su vez, los registros est\u00e1n divididos en campos que contienen cada una de las informaciones elementales que forman un registro (por ejemplo, el nombre del usuario o su direcci\u00f3n de correo electr\u00f3nico).</p> <p>Los datos est\u00e1n almacenados de tal forma que se puedan a\u00f1adir, suprimir, actualizar o consultar individualmente en cualquier momento.</p>"},{"location":"temas/01/index.html#31-tipos-de-archivos","title":"3.1. Tipos de Archivos","text":"<p>Podemos hacer distintas clasificaciones dependiendo del criterio que tomemos</p>"},{"location":"temas/01/index.html#segun-su-contenido-de-forma-general","title":"Seg\u00fan su Contenido de Forma General","text":"<ul> <li> <p>Fichero de Texto: Suelen llamarse tambi\u00e9n ficheros planos o ficheros ASCII. Est\u00e1n formados por caracteres que son directamente legibles por el ser humano, no llevan ning\u00fan tipo de formato. Dentro de estos tenemos: .c, java, .rtf, .txt, ...</p> </li> <li> <p>Fichero Binario: Son todos los que no son de texto:</p> <ul> <li>De imagen:.jpg..gif,.</li> <li>De v\u00eddeo:.mpg,.mov,.avi.</li> <li>Comprimidos o empaquetados: .zip,.tar,</li> <li>Ejecutables o compilados:.exe,.com.</li> <li>Procesadores de textos:.doc,.odt</li> </ul> </li> </ul>"},{"location":"temas/01/index.html#segun-su-funcion","title":"Seg\u00fan su Funci\u00f3n","text":"<ul> <li> <p>Ficheros Permanentes: Contienen informaci\u00f3n relevante para una aplicaci\u00f3n. Es decir, los datos necesarios para el funcionamiento de \u00e9sta. Tienen un periodo de permanencia en el sistema amplio. Estos se pueden subdividir en:</p> <ul> <li> <p>Ficheros Maestros: Contiene el estado actual de los datos que pueden modificarse desde la aplicaci\u00f3n. Es la parte central de la aplicaci\u00f3n, su n\u00facleo. Podr\u00eda ser un archivo con los datos de los usuarios de una plataforma educativa.</p> </li> <li> <p>Ficheros Constantes: Son aquellos que incluyen datos fijos para la aplicaci\u00f3n. No suelen ser modificados y se accede a ellos para realizaci\u00f3n de consultas. Podr\u00eda ser un archivo con c\u00f3digos postales.</p> </li> </ul> </li> <li> <p>Ficheros Temporales: Se utilizan para almacenar informaci\u00f3n \u00fatil para una parte de la aplicaci\u00f3n, no para toda ella. Son generados a partir de datos de ficheros permanentes. Tienen un corto periodo de existencia.</p> </li> </ul>"},{"location":"temas/01/index.html#segun-el-soporte-de-almacenamiento","title":"Seg\u00fan el Soporte de Almacenamiento","text":"<p>Inicialmente se utilizaban tambores de cinta magn\u00e9tica pasando con el tiempo al uso de cintas magn\u00e9ticas y de discos (magn\u00e9ticos, \u00f3pticos, magneto-\u00f3pticos, ssd). Dentro de estos dos tipos de soporte existen en el mercado una gran variedad de modelos.</p> Soportes de Almacenamiento <p>El acceso a la informaci\u00f3n en las cintas era Secuencial, como en un casette, siendo necesario pasar por todos los datos desde el inicio hasta la zona donde se encuentra la informaci\u00f3n que nos interesa.</p> <p>El avance del hardware y la aparici\u00f3n del disquete y del disco duro permiti\u00f3 el Acceso Directo a la informaci\u00f3n, no siendo necesario en ellos pasar por todos los datos desde el inicio hasta la zona donde se encuentra la informaci\u00f3n que nos interesa.</p> <p>Por tanto, se distinguen dos Tipos de Soportes para el almacenamiento de datos:</p> <ul> <li> <p>Soportes de Acceso Directo (Por ejemplo: discos). Son los m\u00e1s empleados y el acceso a los datos puede hacerse de forma directa, pudiendo colocarnos en la posici\u00f3n que nos interesa y leer a partir de ella.</p> </li> <li> <p>Soportes de Acceso Secuencial (Por ejemplo: cintas magn\u00e9ticas). Se suelen usar en copias de seguridad y si deseamos leer un dato que est\u00e1 en la mitad de la cinta, tendremos que leer todo lo que hay hasta llegar a esa posici\u00f3n.</p> </li> </ul> <p>En el fichero \"Evolucion Soportes Almacenamiento.pdf\" en Recursos tienes informaci\u00f3n sobre la evoluci\u00f3n de los soportes de almacenamiento.</p>"},{"location":"temas/01/index.html#segun-el-metodo-de-acceso","title":"Seg\u00fan el M\u00e9todo de Acceso","text":"<p>Determina la forma de organizar un fichero en un soporte y la forma en la que se accede a la informaci\u00f3n. Pueden ser Secuenciales, Acceso Directo e Indexado.</p> <ul> <li> <p>Secuencial: En este tipo de ficheros los registros est\u00e1n almacenados de forma contigua, de manera, que la \u00fanica forma de acceder a \u00e9l, es leyendo un registro tras otro desde el principio hasta el final. En los ficheros secuenciales suele haber una marca indicativa del fin del fichero, que suele denominarse EOF (End of File).</p> </li> <li> <p>Acceso Directo: Se accede a un registro indicando la posici\u00f3n relativa del mismo dentro del archivo o, m\u00e1s com\u00fanmente, a trav\u00e9s de una clave que forma parte del registro como un campo m\u00e1s. Deben almacenarse en dispositivos de memoria masiva de acceso directo, como son los discos magn\u00e9ticos. A trav\u00e9s de una transformaci\u00f3n espec\u00edfica aplicada a la clave, se obtendr\u00e1 la direcci\u00f3n f\u00edsica en la que se encuentra el registro.</p> </li> <li> <p>Ficheros Indexados: Se basan en la utilizaci\u00f3n de \u00edndices, que permiten el acceso a un registro del fichero de forma directa, sin tener que leer los anteriores (similares a los de los libros para acceder a un cap\u00edtulo a trav\u00e9s de la p\u00e1gina). Tienen una zona de registros en la que se encuentran los datos del archivo y una zona de \u00edndices (en memoria principal), que contiene una tabla con las claves de los registros y las posiciones de memoria donde se encuentran los mismos. La tabla de \u00edndices estar\u00e1 ordenada por el campo clave.</p> </li> <li> <p>Secuenciales Indexados o Parcialmente Indexados: La zona de registros de datos se encuentra dividida en segmentos (bloques de registros) ordenados, de forma que se accede directamente al primer registro y a partir de ah\u00ed el acceso es secuencial ya que est\u00e1 ordenado.</p> </li> </ul>"},{"location":"temas/01/index.html#32-bases-de-datos","title":"3.2. Bases de Datos","text":"<p>A finales de los 70 los sistemas basados en ficheros separados dieron paso a la utilizaci\u00f3n de Sistemas Gestores de Bases de Datos, que son sistemas software centralizados o distribuidos que ofrecen facilidades para la definici\u00f3n de bases de datos, selecci\u00f3n de estructuras de datos y b\u00fasqueda de forma interactiva y mediante lenguajes de programaci\u00f3n.</p> <p>Una Base de Datos es una colecci\u00f3n de datos que est\u00e1n l\u00f3gicamente relacionados entre s\u00ed almacenados de forma estructurada en su conjunto sin redundancias perjudiciales. Ej. Profesor, m\u00f3dulo, alumnos. Ej. Clientes y facturas.</p> <p>Los datos est\u00e1n estructurados seg\u00fan un Modelo de Datos que refleja las relaciones y restricciones que tienen estos datos en el mundo real. Ej. M\u00f3dulo es impartido por 1 profe, 1 alumno varios m\u00f3dulos, ...Ej. Una factura un solo cliente.</p> <p>Las operaciones que se realizan con los datos han de conservar la integridad y la seguridad de la Base de Datos:</p> <ul> <li> <p>Integridad: Son las reglas y restricciones que se han definido para los datos que se almacenaran en la BD. Ej. Cada factura debe tener un cliente y solo uno. Todos los clientes deben tener nombres y apellidos no nulos.</p> </li> <li> <p>Seguridad: Podemos distinguir dos niveles:</p> <ul> <li> <p>Nivel F\u00edsico, donde podemos tener errores de Hardware (como p\u00e9rdida del disco duro, se recupera con copias de respaldo) y errores de Software (como fallos l\u00f3gicos del programa, se recupera a partir de ficheros Log).</p> </li> <li> <p>Nivel L\u00f3gico, se refiere a la confidencialidad de los datos, se controla: \u00bfqui\u00e9n? (usuario), accede \u00bfa qu\u00e9? informaci\u00f3n (tabla, columna), y \u00bfde qu\u00e9? manera (leer, escribir, borrar).</p> </li> </ul> </li> </ul> <p>Una Base de Datos est\u00e1 formada por:</p> <ul> <li> <p>Entidades: objeto real o abstracto con caracter\u00edsticas diferenciadoras de otros, del que se almacena informaci\u00f3n en la Base de Datos. Dicho de otra forma, es algo acerca de lo cual se desea almacenar informaci\u00f3n. En una Base de Datos de una centro escolar posibles entidades podr\u00edan ser: alumnos, asignaturas, profesores.</p> </li> <li> <p>Atributos: son los datos que se almacenan de la entidad. Cualquier propiedad o caracter\u00edstica de una entidad puede ser atributo. De la entidad alumnos, nombre, apellidos, dni, fecha nacimiento, etc...</p> </li> <li> <p>Registros: conjunto de atributos de la entidad que define un item del objeto. Ej.: Juan Lopez Garrido 123456789Z 01/01/2001</p> </li> </ul>"},{"location":"temas/01/index.html#33-sistemas-de-gestion-de-archivos-vs-sgbd","title":"3.3. Sistemas de Gesti\u00f3n de Archivos vs SGBD","text":""},{"location":"temas/01/index.html#sistemas-de-gestion-de-archivos-sistemas-orientados-a-procesos","title":"Sistemas de Gesti\u00f3n de Archivos (Sistemas Orientados a Procesos)","text":"<p>Hasta la aparici\u00f3n de las Bases de Datos las aplicaciones utilizaban datos estructurados en forma de ficheros. En funci\u00f3n de su organizaci\u00f3n y forma de acceso los ficheros se clasifican, como hemos visto, en secuenciales, directos, indexados y secuenciales indexados.</p> <p>Este tipo de sistema de Gesti\u00f3n de Archivos se les llama Sistemas Orientados al Proceso.</p> <p>Cada una de las aplicaciones dispon\u00eda de su propio conjunto de ficheros en donde se almacenaban los datos necesarios para dicha aplicaci\u00f3n, al mismo tiempo esos ficheros estaban estructurados de acuerdo a la forma que ten\u00eda la aplicaci\u00f3n de tratarlos.</p> <p>Inconvenientes de los Sistemas de Gesti\u00f3n de Archivos</p> <ul> <li> <p>Redundancia de datos. Suele ocurrir que muchos datos est\u00e9n en dos o m\u00e1s ficheros, por ejemplo, la direcci\u00f3n o el tel\u00e9fono de un cliente se puede encontrar repetidos en varios ficheros de la empresa, por ejemplo, en la aplicaci\u00f3n que trabaja con n\u00f3mina y en la que trabaja con el dpto. comercial.</p> </li> <li> <p>Inconsistencia de datos. Como existen datos repetidos, ocurre con demasiada frecuencia que la actualizaci\u00f3n de un dato no se lleva a cabo en todos los ficheros en que este dato existe. Surge de esta manera la discrepancia de valores de un mismo dato (inconsistencia) no pudi\u00e9ndose incluso determinar, en algunas ocasiones, cu\u00e1l de los valores es el correcto. Nos podemos encontrar, por ejemplo, que dos aplicaciones de la misma empresa nos proporcionen distintas direcciones de un mismo cliente \u00bfa d\u00f3nde le mandamos la factura?</p> </li> <li> <p>Datos son dependientes de los tratamientos que se realicen sobre ellos. Las estructuras de los ficheros est\u00e1n pensadas para determinadas aplicaciones. En cualquier aplicaci\u00f3n basada en los sistemas de gesti\u00f3n de archivos, los programadores deben definir su organizaci\u00f3n, el modo de acceso a los registros, su estructura, etc., lo que implica que los programas sean dependientes de los archivos y viceversa.</p> </li> <li> <p>Sistemas poco escalables. Modificaci\u00f3n de tratamiento o cambio de requerimientos implica: reestructuraci\u00f3n de ficheros, modificaci\u00f3n y recompilaci\u00f3n de programas que lo usan. Esto provoca que crea poca flexibilidad ante cambios de requerimiento y alto coste en mantenimiento de software, por ejemplo, al a\u00f1adir un campo a clientes. Si se reestructura los datos hay que cambiar los programas que los usan.</p> </li> <li> <p>Falta de Integridad. Es dif\u00edcil mantener ciertas condiciones en los datos ya que depender\u00e1 del programa que acceda a esos datos.</p> </li> <li> <p>Dificultad para administrar seguridad. No se puede controlar que ciertos usuarios no accedan a ciertos datos debido a la dispersi\u00f3n que presentan.</p> </li> </ul>"},{"location":"temas/01/index.html#sistemas-de-gestion-de-bases-de-datos-sistemas-orientados-a-datos","title":"Sistemas de Gesti\u00f3n de Bases de Datos (Sistemas Orientados a Datos)","text":"<p>Los Sistemas de Bases de Datos pretenden dar soluci\u00f3n a los problemas de los Sistemas de Gesti\u00f3n de Archivos mediante la integraci\u00f3n de toda la informaci\u00f3n en una \u00fanica colecci\u00f3n de datos no redundantes, generalmente de gran tama\u00f1o y accesible por todas las aplicaciones y usuarios autorizados, incluso, simult\u00e1neamente.</p> <p>Ahora bien, para que sea posible la superaci\u00f3n de estos inconvenientes es necesario un correcto dise\u00f1o de la Base de Datos adem\u00e1s de establecer los mecanismos de administraci\u00f3n, seguridad y control que eviten los posibles accidentes o da\u00f1os deliberados de la Base de Datos. Un fallo en la Base de Datos de una organizaci\u00f3n puede acarrear catastr\u00f3ficas consecuencias para \u00e9sta.</p> <p>Caracter\u00edsticas de los Sistemas de Gesti\u00f3n de Bases de Datos</p> <ul> <li> <p>Los datos se estructuran seg\u00fan un modelo (forma de representar los datos) que refleja las caracter\u00edsticas que tienen en el mundo real, y ese modelo permite que cualquier proceso pueda tratar los datos.</p> </li> <li> <p>Los datos son independientes de los tratamientos que se realicen sobre ellos. (Sistemas de Informaci\u00f3n Integrados).</p> </li> <li> <p>Descripci\u00f3n centralizada de los datos. La definici\u00f3n de los datos se almacena en la misma Base de Datos, de manera que los tratamientos no tienen que especificar de nuevo la definici\u00f3n de los datos. Adem\u00e1s, esto ofrece una mejor y m\u00e1s normalizada documentaci\u00f3n de la informaci\u00f3n.</p> </li> <li> <p>Eficiencia en la restructuraci\u00f3n de los datos. Al estar los datos estructurados seg\u00fan un modelo no se producen redundancias de datos. Es decir que un mismo dato no aparece en dos o m\u00e1s ficheros. Esto evita tres problemas:</p> <ul> <li>No se desperdicia espacio en memoria almacenando la misma informaci\u00f3n varias veces.</li> <li>Se ahorra tiempo de proceso al no tener que modificar el dato en varios ficheros.</li> <li>Se evita la corrupci\u00f3n de la Base de Datos ya que al modificar un dato habr\u00eda que hacerlo en todos los ficheros en que aparece, y si no se modifica en algunos de los ficheros, la informaci\u00f3n de la Base de Datos ser\u00eda inconsistente.</li> </ul> </li> <li> <p>Reducci\u00f3n de espacio de almacenamiento en disco. Los sistemas de Base de Datos optimizan el espacio requerido para almacenar los datos en discos, hasta un 50% m\u00e1s que los sistemas de ficheros tradicionales.</p> </li> <li> <p>Seguridad de los datos y control de autorizaciones. El DBA (administrador de Base de Datos) decide los accesos (\u00bfqui\u00e9n? \u00bfa qu\u00e9? \u00bfc\u00f3mo?) concediendo y denegando permisos seg\u00fan las necesidades reales.</p> </li> <li> <p>Auditor\u00eda de actividad. El uso de ficheros auditores permite sobre quien accedi\u00f3, a qu\u00e9 y de qu\u00e9 manera.</p> </li> <li>Control de accesos simult\u00e1neos. Ej. Reserva de billetes o entradas.</li> <li>Recuperaci\u00f3n de datos da\u00f1ados ante procesos de actualizaci\u00f3n incompletos o err\u00f3neos. En los sistemas orientados a ficheros se utilizaban copias.</li> <li>Mayor nivel inform\u00e1tico Los sistemas de bases de datos ofrecen herramientas m\u00e1s potentes y m\u00e1s sencillas para la manipulaci\u00f3n de los datos.</li> </ul> <p>Los Sistemas de Bases de Datos est\u00e1 integrados en los entornos de desarrollo de cuarta generaci\u00f3n, mientras que los Sistemas de Ficheros pertenecen a entornos de desarrollo de tercera generaci\u00f3n. </p> <p>Seg\u00fan lo que hemos visto, podemos afirmar que los Sistemas de Gesti\u00f3n de Archivos son sistemas de informaci\u00f3n orientados hacia los procesos, existiendo una gran dependencia datos/aplicaciones. Por el contrario, en los Sistemas de Gesti\u00f3n de Bases de Datos existe total independencia entre los datos y las aplicaciones que los tratan</p>"},{"location":"temas/01/index.html#4-elementos-de-una-base-de-datos","title":"4. Elementos de una Base de Datos","text":"<ul> <li> <p>Los Datos.     Es el conjunto de datos estructurados y almacenados en un soporte magn\u00e9tico u \u00f3ptico de acceso     directo. Este conjunto de datos es lo que suele denominarse Base de Datos.</p> </li> <li> <p>La Metabase.     Es la informaci\u00f3n sobre los datos de la Base de Datos. Es imprescindible para que el sistema     autodocumentado pueda suministrar a los usuarios, al administrador y al Sistema Gestor de Base de     Datos, la informaci\u00f3n que necesitan sobre los datos almacenados y su funcionamiento.</p> <p>Los elementos fundamentales de la Metabase son:</p> <ul> <li>Cat\u00e1logo o Diccionario de Datos: descripci\u00f3n l\u00f3gica de cada uno de los datos (es decir desde el punto de vista del usuario): tipo, fichero en el que se encuentra, relaciones entre ficheros, vistas, etc.</li> <li>Directorio de Datos: descripci\u00f3n f\u00edsica que permite pasar de la representaci\u00f3n externa a la interna.</li> <li>Sistema de Seguridad: es a dos niveles.<ul> <li>Seguridad L\u00f3gica: control de permisos de acceso de los usuarios a los datos.</li> <li>Seguridad F\u00edsica: consiste en registrar en unos ficheros llamados Log o Dietario, las operaciones realizadas en la Base de Datos con el objeto de poder deshacerlas en     caso de errores.</li> </ul> </li> <li> <p>Software de Gesti\u00f3n del Sistema (Logical). Es el conjunto de programas, procedimientos, lenguajes etc., capaces de realizar todos los tratamientos exigidos para el funcionamiento del sistema.</p> <ul> <li> <p>SGBD     Es el n\u00facleo de un sistema de Base de Datos. Permite que el usuario pueda crear, actualizar y recuperar los datos contenidos en la Base de Datos. Es decir, interpreta las \u00f3rdenes del usuario y las ejecuta f\u00edsicamente.</p> <p>Est\u00e1 formado por:</p> <ul> <li> <p>Gestor de almacenamiento: Es el m\u00f3dulo que proporciona la interfaz entre los datos almacenados y los programas de aplicaci\u00f3n y consultas solicitadas al sistema.</p> <p>A su vez est\u00e1 consta de:</p> <ul> <li>Gestor de Transacciones: Asegura que la Base de Datos sea consistente ante fallos en el sistema.</li> <li>Gestor de Archivos: Gestiona la reserva de espacio de disco y las estructuras de datos para representar los datos almacenados en el disco.</li> <li>Gestor de Memoria Intermedia: Se encarga de traer los datos desde el disco a la memoria principal y decidir qu\u00e9 datos se llevan a la memoria cach\u00e9</li> </ul> </li> </ul> </li> <li> <p>GESTOR DE CONSULTAS:</p> <p>Est\u00e1 formado por:</p> <ul> <li>Int\u00e9rprete del DDL (Lenguaje de Definici\u00f3n de Datos): Interpreta el DDL y graba las definiciones en el Diccionario de Datos.</li> <li>Compilador del DML (Lenguaje de Manipulaci\u00f3n de Datos): Traduce las consultas a instrucciones de bajo nivel que puedan ser ejecutadas por el motor de consultas. Tambi\u00e9n optimiza las consultas.</li> <li>Motor de Evaluaci\u00f3n de Consultas: Ejecuta las instrucciones dadas por el Compilador DML.</li> </ul> </li> </ul> </li> <li> <p>Utilidades de administraci\u00f3n de la Base de Datos que facilitan las tareas de mantenimiento y seguridad de la Base de Datos. Estos programas realizan tareas como: modificaci\u00f3n del tama\u00f1o de los ficheros, obtenci\u00f3n de estad\u00edsticas de utilizaci\u00f3n, carga de ficheros, obtenci\u00f3n de copias de seguridad, recuperaci\u00f3n tras una ca\u00edda del sistema, etc.</p> </li> <li> <p>Herramientas de desarrollo de aplicaciones. PL/SQL (Procedural Language/Structured Query Language), generador de informes (report), de pantallas (forms), APEX, \u2026</p> </li> </ul> </li> </ul>"},{"location":"temas/01/index.html#5-niveles-de-abstraccion-de-la-bd-modelo-ansix3sparc","title":"5. Niveles de Abstracci\u00f3n de la BD: Modelo ANSI/X3/SPARC","text":"<p>La arquitectura ANSI/X3/SPARC (del grupo de trabajo SPARC de la secci\u00f3n X3 de ANSI (American National Standards Institute)) establece tres niveles de abstracci\u00f3n que todo SGBD debe cumplir.</p> <p>Lo que se persigue estableciendo esta estructura es la independencia entre el sistema y los datos, para ocultar al usuario toda la complejidad del sistema y facilitarle la interacci\u00f3n con el mismo.</p> <p>Los niveles establecen distintos grados de abstracci\u00f3n sobre el mismo conjunto de datos.</p> <p>Estos 3 niveles de abstracci\u00f3n, desde el m\u00e1s cercano a la m\u00e1quina hasta el m\u00e1s cercano al usuario final, son:</p> <ul> <li>Nivel Interno o F\u00edsico: Es el nivel m\u00e1s bajo de abstracci\u00f3n y en el que existe realmente la Base de Datos. En \u00e9l se describen como se almacenan los datos y la estructura de los mismos. Este nivel tiene que ver con la forma en que los datos est\u00e1n almacenados f\u00edsicamente. Esta visi\u00f3n s\u00f3lo la requiere el DBA.</li> <li>Nivel L\u00f3gico o Conceptual: En \u00e9l se describe cu\u00e1les son los datos que se almacenan y qu\u00e9 relaciones se establecen entre ellos, representando de forma completa la Base de Datos con estructuras simples. Es el primer paso a realizar al crear una Base de Datos. Cuando hablamos del dise\u00f1o de una BD nos estamos refiriendo a este esquema. El esquema conceptual lo realiza Dise\u00f1adores/as o Analistas a partir de los requerimientos del cliente. Y luego es utilizado por los desarrolladores de aplicaciones.</li> <li>Nivel Externo: Est\u00e1 formado por el conjunto de las vistas de usuario, siendo una vista de usuario la fracci\u00f3n de la Base de Datos que ve un usuario en concreto. En este nivel es donde trabajan los programas de aplicaci\u00f3n de usuario. Se trata de la visi\u00f3n de los datos que se les ofrece a los usuarios finales (tablas, vistas, formularios, informes, ...). Estas vistas las obtienen los Desarrolladores de Aplicaciones, de modo que el usuario no conoce las relaciones entre los datos, como tampoco conoce todos los datos que realmente se almacenan. As\u00ed, cada usuario puede ver una base de datos diferente seg\u00fan sea el nivel de acceso que se le haya concedido</li> </ul> <p>En una Base de Datos determinada habr\u00e1 un \u00fanico esquema interno, un \u00fanico esquema conceptual, pero varios esquemas en el nivel externo.</p>"},{"location":"temas/01/index.html#51-correspondencia-entre-niveles","title":"5.1 Correspondencia entre Niveles","text":"<p>Es necesario establecer unas reglas para poder pasar del nivel f\u00edsico al l\u00f3gico y del l\u00f3gico al externo. Estas reglas se denominan correspondencias entre niveles y se guardan en el Diccionario de Datos.</p> <p>La independencia de los datos puede darse a dos niveles:</p> <ul> <li>Independencia F\u00edsica: consiste en modificar el nivel interno sin que se vea afectado el nivel conceptual. Por ejemplo, puede ser necesario reorganizar ciertos archivos f\u00edsicos con el fin de mejorar el rendimiento de ciertas operaciones sobre los datos.</li> <li>Independencia L\u00f3gica: consiste en modificar el nivel l\u00f3gico sin alterar el nivel f\u00edsico. Por ejemplo, si se necesita eliminar una entidad, los Esquemas Externos que no se refieran a ella no deben ser afectados.</li> </ul> Independencia f\u00edsica y l\u00f3gica"},{"location":"temas/01/index.html#6-funcionalidades-de-un-sgbd","title":"6. Funcionalidades de un SGBD","text":"<p>Hoy d\u00eda se espera de un SGBD que disponga de:</p> <ul> <li>Lenguaje que permita crear todos los elementos de la Base de Datos y gestionar el diccionario de datos. Normalmente este lenguaje ser\u00e1 SQL (aunque cada SGBD impone variantes al SQL est\u00e1ndar). Estar\u00e1 formado por lenguajes que permitan crear, manipular y controlar los datos.</li> <li>Herramientas gr\u00e1ficas que faciliten muchas tareas habituales tanto de gesti\u00f3n como de administraci\u00f3n del sistema.</li> <li>Posibilidad de establecer reglas de integridad avanzadas e incluirlas como parte de la Base de Datos. Dentro de estas reglas est\u00e1n las restricciones est\u00e1ndar como: UNIQUE (unicidad, prohibir repetici\u00f3n de valores), CHECK (cumplimiento de condiciones simples), NOT NULL (obligatoriedad), PRIMARY KEY (establecimiento de las claves de las tablas) o la propia FOREIGN KEY (clave for\u00e1nea); pero tambi\u00e9n restricciones m\u00e1s complejas como las que establecen los Triggers de los lenguajes procedimentales (como PL/SQL de Oracle) presentes en la mayor\u00eda de sistemas.</li> <li>Gesti\u00f3n de copias de seguridad. Una de las funciones cr\u00edticas de la Base de Datos ya que permite la recuperaci\u00f3n de informaci\u00f3n en caso de problemas.</li> <li>Aplicaciones de exportaci\u00f3n e importaci\u00f3n de datos. Para poder utilizar datos de otros SGBD u otro software.</li> <li>Posibilidad de recuperaci\u00f3n en caso de desastre. Para evitar perder informaci\u00f3n en caso de problemas serios con el software (errores de hardware, apagones prolongados, \u2026)</li> <li>Archivos LOG. Desde los que podemos examinar las incidencias y monitorizar el funcionamiento de la Base de Datos.</li> <li>Herramientas para programar aplicaciones. Que permitan crearlas aplicaciones (o facilidades) de usuario.</li> <li>Gesti\u00f3n de la comunicaci\u00f3n con los clientes de la Base de Datos. Permiten establecer conexi\u00f3n con la Base de Datos desde m\u00e1quinas remotas.</li> <li>Optimizaci\u00f3n de consultas. Busca el m\u00ednimo tiempo de respuesta para las operaciones sobre los datos.</li> <li>Herramientas para automatizar tareas. Permiten realizar programaciones sobre operaciones habituales sobre la Base de Datos.</li> <li>Posibilidad de distribuir la Base de Datos entre diferentes m\u00e1quinas, y as\u00ed mejorar su alta disponibilidad.</li> <li> <p>Gesti\u00f3n de Transacciones, ACID (Atomicity, Consistency, Isolation, Durability). Es una norma obligatoria que deben de cumplir las bases de datos para que una transacci\u00f3n se pueda considerar como tal.</p> <ul> <li>Atomicidad: Cada operaci\u00f3n debe ejecutarse como una unidad (de forma at\u00f3mica), o se realiza en su totalidad o no se realiza nada.</li> <li>Consistencia: Las reglas de integridad definidas en la Base de Datos deben cumplirse.</li> <li>Aislamiento: Esta propiedad asegura que un cambio en unos datos concretos no debe afectar al resto de los datos, o que la realizaci\u00f3n de dos transacciones sobre la misma informaci\u00f3n sea independiente y no generen ning\u00fan tipo de error. Persistencia: Esta propiedad asegura que, una vez realizada la operaci\u00f3n, esta persistir\u00e1 y no se podr\u00e1 deshacer, aunque falle el sistema.</li> </ul> </li> </ul>"},{"location":"temas/01/index.html#7-usuarios-de-la-bd","title":"7. Usuarios de la BD","text":"<p>Hay cuatro grupos de personas que intervienen en el entorno de una Base de Datos:</p> <ul> <li> <p>Analistas.</p> <p>Son los encargados de controlar el desarrollo de la Base de Datos aprobada por la direcci\u00f3n. Normalmente son adem\u00e1s los dise\u00f1adores de la Base de Datos, especialmente de los esquemas interno y conceptual debiendo identificar los datos, las relaciones entre datos y las restricciones. Para obtener un buen resultado, el dise\u00f1ador de la Base de Datos debe implicar en el desarrollo del modelo de datos a todos los usuarios de la Base de Datos, tan pronto como sea posible.  El dise\u00f1o l\u00f3gico de la Base de Datos es independiente del SGBD concreto que se vaya a utilizar, es independiente de los programas de aplicaci\u00f3n, de los lenguajes de programaci\u00f3n y de cualquier otra consideraci\u00f3n f\u00edsica.</p> </li> <li> <p>Administrador de la Base de Datos (DBA)</p> <p>Se encarga de realizar la implementaci\u00f3n de la Base de Datos, realiza la gesti\u00f3n de los usuarios y permisos, copias de seguridad, restauraci\u00f3n de las copias de seguridad en caso necesario y dem\u00e1s tareas necesarias para el correcto funcionamiento de la BD. El administrador debe conocer muy bien el SGBD que se est\u00e1 utilizando, as\u00ed como el equipo inform\u00e1tico sobre el que est\u00e1 funcionando.</p> </li> <li> <p>Programadores de Aplicaciones</p> <p>Una vez se ha dise\u00f1ado e implementado la Base de Datos, los programadores se encargan de implementar los programas de aplicaci\u00f3n que servir\u00e1n a los usuarios finales. Estos programas de aplicaci\u00f3n son los que permiten consultar datos, insertarlos, actualizarlos y eliminarlos.</p> </li> </ul>"},{"location":"temas/02/index.html","title":"Inicio","text":""},{"location":"temas/02/index.html#ut2-a-diseno-conceptual-modelo-entidad-relacion","title":"UT2-A Dise\u00f1o Conceptual: Modelo Entidad Relaci\u00f3n","text":"<p>Informaci\u00f3n de la unidad</p> ContenidosPropuesta did\u00e1ctica <p>Bases de datos relacionales:</p> <ul> <li>Modelo de datos</li> </ul> <p>Interpretaci\u00f3n de Diagramas Entidad/Relaci\u00f3n:</p> <ul> <li>El modelo E/R. Entidades y relaciones. Cardinalidades. Debilidad.</li> <li>El modelo E/R ampliado. Generalizaci\u00f3n y especializaci\u00f3n. Agregaci\u00f3n.</li> </ul> <p>En esta unidad vamos a comenzar a trabajar el RA6: Dise\u00f1a modelos relacionales normalizados interpretando diagramas entidad/relaci\u00f3n.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>CE6b: Se han identificado las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6c: Se han identificado los campos que forman parte de las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6d: Se han analizado las relaciones entre las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6e: Se han identificado los campos clave.</li> </ul>"},{"location":"temas/02/index.html#contenido-de-la-unidad","title":"Contenido de la unidad","text":"<p>El contenido de la unidad est\u00e1 repartido en los siguientes bloques.</p> <p>\u00cdndice:</p> <ul> <li>2.1 Modelo Entidad-Relaci\u00f3n</li> <li>2.2 Restricciones</li> <li>2.3 Modelo Extendido</li> <li>2.A Actividades</li> </ul>"},{"location":"temas/02/index.html#programacion-de-aula-12h","title":"Programaci\u00f3n de Aula (12h)","text":"<p>Esta unidad es la segunda, con lo que se imparte en la primera evaluaci\u00f3n, con una duraci\u00f3n estimada de 12 sesiones lectivas:</p> Sesi\u00f3n Contenidos Actividades Criterios trabajados 1 Modelo Entidad Relaci\u00f3n. AC201 CE6b, CE6c, CE6d 2 Entidades. Relaciones - Cardinalidad 3 Relaciones 1:1, 1:N, N:M AC203 CE6b 4 Atributos. Trabajando las cardinalidades AC204 CE6b 5 Atributos identificadores. Modelados sencillos AC205 CE6b, CE6c, CE6e 6 Completando modelos AC208 CE6b, CE6c, CE6e 7 Restricciones 8 Modelado EER. Generalizaci\u00f3n. Tipos AC209 CE6b, CE6c, CE6e 9 Modelados con generalizaciones AC210 CE6b, CE6c, CE6e 10 Agregaciones AC212 CE6b, CE6c, CE6e 11 Interpretando modelos AC215 CE6b, CE6c, CE6d, CE6e 12 Reto - Dise\u00f1ando una BD PY216 CE6b, CE6c, CE6d, CE6e"},{"location":"temas/02/2.1-ModeloER.html","title":"2.1 El modelo ER","text":""},{"location":"temas/02/2.1-ModeloER.html#21-diseno-de-bases-de-datos","title":"2.1. Dise\u00f1o de Bases de Datos","text":"<p>Una vez que hemos trabajado conceptos generales asociados a las bases de datos y los sistemas gestores de bases de datos, tenemos claro que existen diferentes modelos de datos que dan lugar a diferentes tipos de soluciones.</p> <p>Pero antes de entrar en uno de los modelos, conviene saber cual es el proceso de dise\u00f1o de una base de datos. Es l\u00f3gico que un buen dise\u00f1o sobre los datos va a facilitar el posterior desarrollo de las aplicaciones que explotan la base de datos.</p> <p>Sistema de informaci\u00f3n</p> <p>En la introducci\u00f3n de la unidad anterior estudiamos que un sistema de informaci\u00f3n define c\u00f3mo funciona una empresa y el uso que hace de los datos. Veamos un ejemplo concreto sobre una empresa.</p> <p>Una empresa vende productos a varios clientes. Se necesita conocer los datos personales de los clientes (nombre, apellidos, dni, direcci\u00f3n y fecha de nacimiento). Cada producto tiene un nombre y un c\u00f3digo, as\u00ed como un precio unitario. Un cliente puede comprar varios productos a la empresa, y un mismo producto puede ser comprado por varios clientes.</p> <p>Los productos los suministran diferentes proveedores. Se debe tener en cuenta que un producto s\u00f3lo puede ser suministrado por un proveedor, y que un proveedor puede suministrar diferentes productos. De cada proveedor se desea conocer el NIF, nombre y direcci\u00f3n.</p> <p>El objetivo general del dise\u00f1ar bases de datos es ofrecer una base de datos bien estructurada y eficiente que cumpla los requisitos de usuarios y empresas. Adem\u00e1s de cumplir estos requisitos, un dise\u00f1o dise\u00f1o de bases de datos, generalmente, cumple cinco objetivos comunes (los cuales trabajaremos a lo largo del curso):</p> <ol> <li>Coherencia e integridad de los datos.</li> <li>Mantenibilidad y facilidad de uso.</li> <li>Rendimiento y optimizaci\u00f3n.</li> <li>Seguridad de los datos.</li> <li>Escalabilidad y flexibilidad.</li> </ol> <p>As\u00ed pues, antes de comenzar el dise\u00f1o, el primer paso y m\u00e1s cr\u00edtico es determinar los requisitos de la base de datos mediante un sistema de informaci\u00f3n, describiendo el problema que la base de datos debe cubrir. Este paso est\u00e1 m\u00e1s asociado a la ingenier\u00eda del software y lo estudiar\u00e1s en detalle en el m\u00f3dulo de Entornos de Desarrollo.</p> <p>Las fases que se realizan a la hora de dise\u00f1ar una base de datos son tres:</p> <ol> <li>Dise\u00f1o conceptual: a partir de los requisitos y entendido el problema (conocido como el mundo real), mediante un modelo conceptual de alto nivel (EER) crearemos el esquema conceptual.</li> <li>Dise\u00f1o l\u00f3gico: transformaci\u00f3n de un modelo conceptual a un modelo de datos concreto para poder representar el problema (relacional, jer\u00e1rquico, ...). En este paso, ya nos tenemos que haber decidido por un modelo de datos, y en algunos casos, incluso por un SGBD concreto. El resultado del dise\u00f1o l\u00f3gico es el esquema l\u00f3gico/can\u00f3nico.</li> <li>Dise\u00f1o f\u00edsico: sobre el modelo l\u00f3gico de datos del punto anterior sobre un SGBD concreto, se define la representaci\u00f3n f\u00edsica de las estructuras, obteniendo el esquema f\u00edsico/interno.</li> </ol> <p>Estas tres fases se resumen en el siguiente gr\u00e1fico:</p> Del dise\u00f1o a los modelos <p>En las siguientes unidades vamos a ir pasando de una fase del dise\u00f1o a la siguiente. En nuestro caso, en el modelo conceptual aprenderemos el modelo Entidad Relaci\u00f3n, como modelo l\u00f3gico veremos el Modelo Relacional, y como modelo f\u00edsico, usaremos el sublenguaje DDL de SQL, ya centr\u00e1ndonos en un SGBD concreto.</p> <p>As\u00ed pues, en esta unidad comenzamos con el dise\u00f1o conceptual a trav\u00e9s del modelo conceptual m\u00e1s extendido, el modelo Entidad-Relaci\u00f3n.</p>"},{"location":"temas/02/2.1-ModeloER.html#el-modelo-entidad-relacion","title":"El modelo Entidad Relaci\u00f3n","text":"<p>Entendemos como modelo conceptual el conjunto de conceptos y reglas que nos permiten aplicar una serie de abstracciones con el prop\u00f3sito de definir y manipular datos de la realidad, almacen\u00e1ndola en una base de datos.</p> <p>Centr\u00e1ndonos en el modelo entidad/relaci\u00f3n, cuyo nombre completo es modelo entidad/interrelaci\u00f3n (entity/relationship en ingl\u00e9s), es un modelo de datos conceptual de alto nivel, propuesto por Peter Chen en 1976, y vigente a d\u00eda de hoy por su simplicidad y legibilidad, ya que el resultado del an\u00e1lisis del problema se representa de forma visual mediante diagramas entidad/relaci\u00f3n, representado mediante cajas y l\u00edneas que las unen. Ha tenido numerosas extensiones y aportaciones de muchos otros autores, teniendo soporte por m\u00faltiples herramientas de software de dise\u00f1o (CASE), lo que ha dado lugar a que no exista un \u00fanico modelo ER, sino una familia de modelos.</p> <p>El modelo ER describe el mundo real como un conjunto de entidades y sus atributos, as\u00ed como las relaciones existentes entre diferentes entidades.</p>"},{"location":"temas/02/2.1-ModeloER.html#nomenclatura","title":"Nomenclatura","text":"<p>A la hora de nombrar a los diferentes elementos, en todos los casos, es recomendable no utilizar espacios en blanco ni tildes, para facilitar la futura transformaci\u00f3n al modelo f\u00edsico.</p> <ul> <li>Las entidades suelen ser sustantivos y se nombran en singular y may\u00fasculas.</li> <li>Los atributos tambi\u00e9n en singular, pero en min\u00fasculas.</li> <li>Las relaciones son verbos en may\u00fasculas.</li> <li>Para las palabras compuestas, utilizaremos la convenci\u00f3n camelCase, que une las palabras poniendo la primera letra en may\u00fasculas. Ejemplos de atributos ser\u00edan mediante camelCase ser\u00edan <code>nombreCompleto</code> o <code>codigoPostal</code>.</li> </ul>"},{"location":"temas/02/2.1-ModeloER.html#elementos","title":"Elementos","text":"<p>Una entidad es cualquier persona, concepto, suceso o evento (en definitiva, cualquier cosa) con existencia independiente sobre la cual se desea almacenar informaci\u00f3n. La entidad representa un tipo de objeto, el concepto que permite representar a un conjunto de objetos similares. Por ejemplo <code>Persona</code>, <code>Cliente</code>, <code>Alumno</code>, <code>Asignatura</code>, etc... ser\u00edan entidades.</p> <p>Por otro lado, una entidad define de forma gen\u00e9rica a un conjunto de objetos a trav\u00e9s de propiedades (o atributos): cualquier informaci\u00f3n que interesa guardar sobre las entidades. Se obtienen mediante un proceso de abstracci\u00f3n que se conoce como clasificaci\u00f3n. Ejemplos de atributos ser\u00edan <code>nombre</code>, <code>direcci\u00f3n</code>, <code>fecha de nacimiento</code>, <code>saldo</code>, <code>tel\u00e9fono</code>, etc...</p> <p>Finalmente, una relaci\u00f3n es una asociaci\u00f3n entre entidades. Un tipo de relaci\u00f3n en un modelo de datos permite representar un conjunto de relaciones de caracter\u00edsticas similares. Igual que las entidades, las relaciones tambi\u00e9n pueden tener atributos, para representar informaci\u00f3n que no es propia de ninguno de los objetos participantes en la relaci\u00f3n. Ejemplos de relaciones ser\u00edan <code>Matricular</code>, <code>Contratar</code>, <code>Reservar</code>, etc...</p> <p>El modelo conceptual tambi\u00e9n define una serie de propiedades sobre los elementos, como son las propiedades:</p> <ul> <li> <p>est\u00e1ticas: restricciones sobre las entidades y relaciones. Por ejemplo, la restricci\u00f3n de integridad est\u00e1tica, limita las extensiones (ocurrencias) v\u00e1lidas (permitidas) para una propiedad. Existen varios tipos:</p> <ul> <li>Sobre atributos: valores posibles, valor no nulo.</li> <li>Sobre entidades: restricci\u00f3n de identificaci\u00f3n.</li> <li>Sobre relaciones: restricciones de cardinalidad.</li> <li>din\u00e1micas: operaciones sobre los objetos o sus relaciones, relaciones entre operaciones (transacciones) y restricciones din\u00e1micas sobre la evoluci\u00f3n de los objetos y sus relaciones, como por ejemplo, \"El n\u00famero de alumnado matriculado en una asignatura debe ser menor o igual a 20\".</li> </ul> </li> </ul> <p>Operaci\u00f3n vs Transacci\u00f3n</p> <p>Una operaci\u00f3n es una acci\u00f3n elemental (indivisible) sobre un objeto o una relaci\u00f3n. Las operaciones permiten crear, eliminar, modificar y consultar objetos y relaciones.</p> <p>Una transacci\u00f3n es una secuencia de operaciones que se considera at\u00f3mica en lo que se refiere a su ejecuci\u00f3n. Es decir, se ejecutan todas sus operaciones o ninguna de ellas, como por ejemplo, al realizar una transferencia bancaria.</p>"},{"location":"temas/02/2.1-ModeloER.html#elaborando-el-modelo-i","title":"\ud83c\udf31 Elaborando el modelo I","text":"<p>Una vez conocemos a muy alto nivel los elementos de un modelo ER, nos podemos preguntar \u00bfC\u00f3mo los deducimos? Normalmente, tras diversas entrevistas con el cliente o a partir de la toma de requisitos previos, disponemos de un sistema de informaci\u00f3n que sirve de base del modelo. El primer paso es identificar las entidades mediante los sustantivos y las relaciones con los verbos. Con esta informaci\u00f3n, realizaremos un esbozo inicial centr\u00e1ndonos \u00fanicamente en las entidades y sus relaciones, sin tener en cuenta los atributos.</p> <p>Por ejemplo, supongamos el siguiente sistema de informaci\u00f3n sobre una empresa que se dedica al alquiler de bicicletas. A los usuarios del servicio, como puede ser BiciElx o BiciMad, se les entrega una tarjeta que contendr\u00e1 sus datos personales, as\u00ed como su saldo disponible. Todas las bicicletas tienen un c\u00f3digo que las identifica, y se registra su estado actual (ya sea disponible o en uso), y la estaci\u00f3n donde se encuentra. Cuando un usuario alquila una bicicleta, tambi\u00e9n se registra cu\u00e1ndo y d\u00f3nde la recoge y devuelve.</p> <p>Analizando el texto, si en una frase aparecen dos sustantivos conectados por un verbo, es muy probable que los sustantivos sean entidades que est\u00e9n relacionadas mediante un relaci\u00f3n representado por el verbo.</p> <p>Entonces, sobre el sistema de informaci\u00f3n reci\u00e9n expuesto \u00bfQu\u00e9 entidades hemos detectado? Claramente, tenemos <code>USUARIO</code> y <code>BICICLETA</code>, las cuales representaremos mediante un rect\u00e1ngulo y mediante un rombo con la relaci\u00f3n <code>ALQUILAR</code>.</p> Modelo sencillo - primer esbozo <p>Una vez que tenemos una idea general de c\u00f3mo llegar a elaborar un dise\u00f1o, vamos a conocer en detalle los diferentes elementos y sus caracter\u00edsticas.</p>"},{"location":"temas/02/2.1-ModeloER.html#entidades","title":"\u23f9\ufe0f Entidades","text":"<p>Una entidad es cualquier objeto (real o abstracto) sobre el que queremos almacenar informaci\u00f3n en la base de datos.</p> <p>Se representa mediante un rect\u00e1ngulo con el nombre de la entidad en singular y may\u00fasculas. Se suele identificar con un sustantivo y suelen estar asociados a objetos (coche, libro, veh\u00edculo, etc...), personas (cliente, empleado, proveedor, ...), lugares (ciudad, provincia, etc...), organizaciones (hospital, aula, empresa, ...), etc...</p> Ejemplo con dos entidades <p>Control de redundancia</p> <p>Cada entidad solo puede aparecer una \u00fanica vez en el modelo, con lo que no podemos repetir el nombre de dos entidades en el mismo modelo.</p> <p></p> <p>Existe dos tipos de entidades:</p> <ul> <li>Regulares o fuertes: existen por s\u00ed mismas, sin necesidad de otra entidad. Por ejemplo, los clientes de nuestra empresa. Se representan mediante un rect\u00e1ngulo simple.</li> <li> <p>D\u00e9biles: su existencia depende de otra entidad. Por ejemplo, los familiares de los clientes ser\u00eda una entidad d\u00e9bil, ya que no tiene sentido almacenarlos si ya no tenemos a los clientes. Se representan mediante un rect\u00e1ngulo doble.</p> <p>Una entidad d\u00e9bil se identifica por sus propiedades y por las propiedades de las entidades de las que depende. Adem\u00e1s, al eliminar la entidad fuerte, tambi\u00e9n se elimina la entidad d\u00e9bil.</p> </li> </ul> <p>Finalmente, el t\u00e9rmino ocurrencia (o instancia de entidad) indica un elemento de la entidad, un objeto en concreto. Por ejemplo, en la entidad <code>PRODUCTO</code>, una ocurrencia ser\u00eda <code>Bol\u00edgrafo azul de gel</code> cuyo c\u00f3digo es <code>BOLIAZUL01</code> y fecha de alta en el sistema el <code>1/1/24</code>.</p> <p></p>"},{"location":"temas/02/2.1-ModeloER.html#relaciones","title":"\u23f9\ufe0f Relaciones","text":"<p>Una relaci\u00f3n representa una asociaci\u00f3n, relacionando los datos del modelo. Para ello, dibujaremos un rombo que unir\u00e1 las entidades que participan en la relaci\u00f3n, y la nombraremos mediante un verbo en may\u00fasculas:</p> Ejemplo de relaci\u00f3n <p>Realmente una relaci\u00f3n entre dos entidades contiene dos direcciones, de manera que la relaci\u00f3n <code>COMPRAR</code> se puede dividir en que:</p> <ul> <li>Un <code>CLIENTE</code> compra uno o m\u00e1s productos, de manera que la relaci\u00f3n va de <code>CLIENTE</code> hacia <code>PRODUCTO</code>.</li> <li>Un <code>PRODUCTO</code> lo pueden comprar uno o m\u00e1s clientes, de manera que la relaci\u00f3n va de <code>PRODUCTO</code> hacia <code>CLIENTE</code>.</li> </ul> <p>Notaci\u00f3n</p> <p>Existen m\u00faltiples notaciones para representar las relaciones (las entidades se suelen representar igual en todas las notaciones). En los apuntes vamos a utilizar tanto la notaci\u00f3n empleada por la herramienta ERDPlus (tambi\u00e9n conocida como de pata de gallo), la notaci\u00f3n de Chen (con las cardinalidades m\u00ednima y m\u00e1xima) as\u00ed como diferentes notaciones empleadas de forma generalizada por las empresas.</p> <p>Una vez dominada una notaci\u00f3n es muy f\u00e1cil entender y cambiar a cualquiera de las otras. Eso s\u00ed, debes ser constante y modelar siempre con la misma notaci\u00f3n.</p>"},{"location":"temas/02/2.1-ModeloER.html#grado","title":"\ud83d\udc65 Grado","text":"<p>Se denomina grado de una relaci\u00f3n a la cantidad de entidades involucradas en una relaci\u00f3n, lo que nos permite clasificarlas las relaciones en:</p> <ul> <li>binarias: son las m\u00e1s comunes, e implica la participaci\u00f3n de dos entidades.</li> <li>ternarias: participan tres entidades. A ser posible, es mejor simplificarlas mediante el uso de varias relaciones binarias y agregaciones. Por ejemplo, la relaci\u00f3n existente entre un libro, su autor y la editorial donde se publica el libro. En este curso no vamos a trabajar las relaciones ternarias y en su caso, cuando sea posible, haremos uso de agregaciones o entidades asociativas.</li> <li>n-arias: muy excepcionales, ya que involucran 4 o m\u00e1s entidades.</li> <li>reflexivas (unarias): son relaciones binarias entre la misma entidad. Por ejemplo, una persona se casa con otra persona.</li> </ul>"},{"location":"temas/02/2.1-ModeloER.html#cardinalidad","title":"\ud83e\uddee Cardinalidad","text":"<p>La cardinalidad define la cantidad de ocurrencias de una entidad que se relacionan con una relaci\u00f3n (que a su vez se relaciona con otra entidad).</p> <p>Para ello, definimos las cardinalidades:</p> <ul> <li>m\u00ednima (tambi\u00e9n conocido como participaci\u00f3n): indica el n\u00famero m\u00ednimo de asociaciones en las que aparecer\u00e1 cada ejemplar de la entidad. Los valores que puede tomar son cero (opcional) o uno (obligatorio)</li> <li>m\u00e1xima: indica el n\u00famero m\u00e1ximo de relaciones en las que puede aparecer cada ejemplar de la entidad. Los valores pueden ser uno o N (muchos).</li> </ul> <p>La cardinalidad entre una entidad y una relaci\u00f3n se representa entre par\u00e9ntesis indicando el valor m\u00ednimo a la izquierda y el mayor a la derecha mediante <code>Card(E,R) = (min, max)</code>. Las posibles combinaciones son:</p> <ul> <li><code>(0, 1)</code> - Una ocurrencia de una entidad se puede relacionar con ninguna o una ocurrencia de otra/s entidad/es.</li> <li><code>(1, 1)</code> - Una ocurrencia de una entidad se relaciona siempre con una ocurrencia de otra/s entidad/es.</li> <li><code>(0, N)</code> - Una ocurrencia de una entidad se puede relacionar con ninguna o muchas ocurrencias de otra/s entidad/es.</li> <li><code>(1, N)</code> - Una ocurrencia de una entidad se puede relacionar con una o muchas ocurrencias de otra/s entidad/es.</li> </ul> <p>Para averiguar la cardinalidad entre dos entidades v\u00eda una relaci\u00f3n, cogemos una ocurrencia de una entidad y nos preguntamos con cuantas ocurrencias de la otra entidad se va a relacionar.</p> <p>Ejemplo</p> <p>Pongamos un ejemplo. Si pensamos en la relaci\u00f3n que existe un producto y la categor\u00eda a la que pertenece, tendremos dos cardinalidades para cada lado de la relaci\u00f3n.</p> <p>Si tenemos un producto concreto  - \u00bfA cu\u00e1ntas categor\u00edas va a pertenecer como m\u00ednimo y como m\u00e1ximo?  - \u00bfEl <code>Bol\u00edgrafo azul de gel</code> a cuantas categor\u00edas pertenece?</p> <p><code>Card(PRODUCTO, PERTENECER) = (1, 1)</code> - Un producto siempre pertenece a una categor\u00eda</p> <p>Y en el otro sentido, dada una categor\u00eda concreta, \u00bfcu\u00e1ntos productos van a pertenecer a esta categor\u00eda? Si pensamos en la categor\u00eda <code>Papeler\u00eda</code>, tendremos muchos productos diferentes.</p> <p><code>Card(CATEGORIA, PERTENECER) = (0, N)</code> - Una categor\u00eda puede no tener productos, pero si tiene, pertenecer\u00e1n muchos.</p> <p>Para representar la cardinalidad en el modelo ER, las cardinalidades se anotan en el extremo opuesto de la entidad, utiliz\u00e1ndose la regla Entidad, Relaci\u00f3n, Cardinalidad, Entidad:</p> <p></p> Cardinalidades en la relaci\u00f3n <p></p> <p>As\u00ed pues, si aplicamos la regla de izquierda a derecha tenemos </p> <p><code>PRODUCTO, PERTENECER, (1,1), CATEGORIA</code>, lo que significa que un producto pertenece siempre a una categor\u00eda y como mucho a una tambi\u00e9n. </p> <p>En cambio, si la aplicamos de derecha a izquierda tenemos </p> <p><code>CATEGORIA, PERTENECER, (0,N), PRODUCTO</code> indica que a una categor\u00eda puede no pertenecer ning\u00fan producto pero tambi\u00e9n muchos.</p>"},{"location":"temas/02/2.1-ModeloER.html#tipos","title":"\ud83d\udcda Tipos","text":"<p>Si nos fijamos en las cardinalidades m\u00e1ximas, tenemos tres tipos de relaciones binarias:</p> <ul> <li>1:1 (uno a uno) \u2013 Un elemento de la primera relaci\u00f3n se corresponde con uno solo de la segunda y viceversa. Por ejemplo, una pantalla digital est\u00e1 en un aula y en un aula s\u00f3lo hay una pantalla digital.</li> <li>1:N (uno a muchos) \u2013 Un elemento de la primera relaci\u00f3n se corresponde con uno o varios de la segunda y uno de la segunda se relaciona con uno solo de la primera. Por ejemplo, un trabajador solo puede trabajar en una empresa y en la empresa puede haber muchos trabajadores.</li> <li>N:M (muchos a muchos) \u2013 Un elemento de la primera relaci\u00f3n se corresponden con muchos de la segunda y viceversa. Por ejemplo, un alumno puede estar matriculado en varias asignaturas y en una asignatura puede haber muchos alumnos.</li> </ul> <p>Para representar las relaciones, adem\u00e1s de la notaci\u00f3n de Chen (indicando las cardinalidades en el lado opuesto), utilizaremos la notaci\u00f3n de pata de gallo:</p> Descripci\u00f3n S\u00edmbolo Un anillo representa \"cero\" Un guion representa \"uno\" La pata de gallo representa \"muchos\" (N) <p>Para ello, dibujaremos la cardinalidad m\u00e1xima lo m\u00e1s cerca de cada entidad y la m\u00ednima lo m\u00e1s separada. En la siguiente tabla se supone que tenemos la relaci\u00f3n a la izquierda y la entidad a la derecha:</p> Descripci\u00f3n Cardinalidad S\u00edmbolo Anillo y guion (0, 1) Guion y guion (1, 1) Anillo y pata de gallo (0, N) Guion y pata de gallo (1, N)"},{"location":"temas/02/2.1-ModeloER.html#relacion-11","title":"\ud83e\udd1d Relaci\u00f3n 1:1","text":"<p>En las relaciones uno a uno, las dos cardinalidades m\u00e1ximas toman el valor 1, e indican que una ocurrencia de la entidad A se relaciona con s\u00f3lo uno de la B, y viceversa.</p> Relaci\u00f3n 1:1 <p></p> <p>Si nos fijamos en las ocurrencias de las entidades, vemos como cada departamento tiene asignado siempre un empleado y s\u00f3lo uno. Por ello, <code>Card(DPTO, DIRIGIR) = (1,1)</code>. En cambio, tenemos empleados que no tienen asignado ning\u00fan departamento, y en el caso de tenerlo, s\u00f3lo tienen uno, lo que implica que <code>Card(EMPLEADO, DIRIGIR) = (0,1)</code>.</p> <p>Como las dos cardinalidades m\u00e1ximas son 1, decimos que la relaci\u00f3n es uno a uno.</p> <p>Autoevaluaci\u00f3n</p> <p>\u00bfEn qu\u00e9 cambiar\u00eda el gr\u00e1fico de ocurrencias si las cardinalidades fueran <code>Card(DPTO, DIRIGIR) = (0,1)</code> y <code>Card(EMPLEADO, DIRIGIR) = (1,1)</code>? \u00bfCu\u00e1les pueden quedarse sin relacionar? \u00bfLos departamentos? \u00bfLos empleados?</p> <p>Todas las posibles combinaciones de cardinalidades de una relaci\u00f3n 1:1 son:</p> <ul> <li> <p> </p><p>Relaci\u00f3n 1:1 (0,1)-(0,1)</p><p></p> </li> <li> <p> </p><p>Relaci\u00f3n 1:1 ((1,1)-0,1)</p><p></p> </li> <li> <p> </p><p>Relaci\u00f3n 1:1 (0,1)-(1,1)</p><p></p> </li> <li> <p> </p><p>Relaci\u00f3n 1:1 (1,1)-(1,1)</p><p></p> </li> </ul> <p>\u00bf1:1 imposible?</p> <p>Imagina que tenemos una relaci\u00f3n 1:1 con las dos cardinalidades m\u00ednimas tambi\u00e9n a 1.</p> <p>Si cuando damos de alta una ocurrencia de la entidad A necesitamos de otra ocurrencia de la entidad B, y viceversa, nos encontramos con la paradoja circular del dilema del huevo y la gallina.</p> <p>Para evitar este problema, una de las dos cardinalidades m\u00ednimas se deja a 0, aquella que consideremos menos cr\u00edtica.</p>"},{"location":"temas/02/2.1-ModeloER.html#relacion-1n","title":"\ud83e\udd1d Relaci\u00f3n 1:N","text":"<p>En las relaciones uno a muchos, en un sentido hay una cardinalidad m\u00e1xima de uno, y en la otra de N, es decir, una ocurrencia de la entidad A se relaciona con una de la entidad B, pero una ocurrencia de la entidad B lo hace con muchas de la entidad A.</p> <p>En el siguiente ejemplo, tenemos que cada producto tendr\u00e1 una categor\u00eda y en cambio, que de una categor\u00eda, tendremos muchos productos.</p> Ocurrencias 1:N <p></p> <p></p> <p>Si nos fijamos en las ocurrencias de las entidades, vemos como un producto pertenece a una categor\u00eda, y siempre a una. Por ello, <code>Card(PRODUCTO, PERTENECER) = (1,1)</code>. En cambio, tenemos categor\u00edas a las que pertenecen muchos productos, e incluso categor\u00edas sin productos, lo que implica que <code>Card(CATEGORIA, PERTENECER) = (0,N)</code>.</p> <p>Autoevaluaci\u00f3n</p> <p>\u00bfEn qu\u00e9 cambiar\u00eda el gr\u00e1fico de ocurrencias si las cardinalidades fueran <code>Card(PRODUCTO, PERTENECER) = (0,1)</code> y <code>Card(CATEGORIA, PERTENECER) = (1,N)</code>?</p> <p>\u00bfY si les damos la vuelta siendo <code>Card(PRODUCTO, PERTENECER) = (1,N)</code> y <code>Card(CATEGORIA, PERTENECER) = (0,1)</code>?</p> <p>Todas las posibles combinaciones de cardinalidades de una relaci\u00f3n 1:N son:</p> <ul> <li> <p> </p><p>Relaci\u00f3n 1:1 (0,N)-(0,1)</p><p></p> </li> <li> <p> </p><p>Relaci\u00f3n 1:N (1,N)-(0,1)</p><p></p> </li> <li> <p> </p><p>Relaci\u00f3n 1:1 (0,N)-(1,1)</p><p></p> </li> <li> <p> </p><p>Relaci\u00f3n 1:1 (0,N)-(1,1)</p><p></p> </li> </ul> <p>Supuesto I Empresa</p> <p>Queremos gestionar la informaci\u00f3n sobre los empleados de una empresa, a partir de las siguientes condiciones: para cada empleado dispondremos de su DNI, nombre, fecha de nacimiento, salario y departamento en el que trabaja.</p> <p>De cada departamento sabremos su nombre, el n\u00famero del despacho en el que se ubica y conoceremos quien es el jefe de dicho departamento.</p> Soluci\u00f3n <p>El primero paso es, a partir del enunciado, identificar las entidades buscando los sustantivos.</p> <p>\"Queremos gestionar la informaci\u00f3n sobre los empleados de una empresa, a partir de las siguientes condiciones: para cada empleado dispondremos de su DNI, nombre, fecha de nacimiento, salario y departamento en el que trabaja. De cada departamento sabremos su nombre, el n\u00famero del despacho en el que se ubica y conoceremos quien es el jefe de dicho departamento.\"</p> <p>Tras su revisi\u00f3n, deducimos que tenemos empleados y departamentos, que ser\u00e1n nuestras dos entidades principales: <code>EMPLEADO</code> y <code>DPTO</code> (hemos reducido la palabra para reducir el tama\u00f1o del diagrama).</p> <p>El siguiente paso es localizar las relaciones. Para ello, buscaremos los verbos que relacionen las entidades localizadas.</p> <p></p> <p>\"Queremos gestionar la informaci\u00f3n sobre los empleados de una empresa, a partir de las siguientes condiciones: para cada empleado dispondremos de su DNI, nombre, fecha de nacimiento, salario y departamento en el que trabaja. De cada departamento sabremos su nombre, el n\u00famero del despacho en el que se ubica y conoceremos quien es el jefe de dicho departamento.\".</p> <p>As\u00ed pues, tenemos dos relaciones: <code>TRABAJAR</code> y <code>SER_JEFE</code>.</p> <p>Y por \u00faltimo, localizamos los atributos de las entidades y de las relaciones. Para ello, buscaremos los adjetivos y complementos que describan a las entidades y relaciones:</p> <p>\"Queremos gestionar la informaci\u00f3n sobre los empleados de una empresa, a partir de las siguientes condiciones: para cada empleado dispondremos de su DNI, nombre, fecha de nacimiento, salario y departamento en el que trabaja. De cada departamento sabremos su nombre, el n\u00famero del despacho en el que se ubica y conoceremos quien es el jefe de dicho departamento.\".</p> <p>As\u00ed pues, hemos localizado las siguientes entidades y sus atributos:</p> <ul> <li>Atributos de <code>EMPLEADO</code>: <code>dni</code> (atributo identificador), <code>nombre</code>, <code>fecha de nacimiento</code>, <code>salario</code>.</li> <li>Atributos de <code>DPTO</code>: <code>nombre</code>, <code>n\u00famero de despacho</code>.</li> </ul>"},{"location":"temas/02/2.1-ModeloER.html#relacion-nm","title":"\ud83e\udd1d Relaci\u00f3n N:M","text":"<p>En las relaciones muchos a muchos, en los dos sentidos hay una cardinalidad m\u00e1xima de muchos, es decir, una ocurrencia de la entidad A se relaciona con muchas de la entidad B, y una ocurrencia de la entidad B lo hace con muchas de la entidad A.</p> <p>En el siguiente ejemplo, tenemos que cada empleado puede trabajar en muchos proyectos, y que en cada proyecto, pueden trabajar muchos empleados:</p> Ocurrencias N:M <p></p> <p></p> <p>Si nos fijamos en las ocurrencias de las entidades, vemos como un empleado trabaja en uno o m\u00e1s proyectos (o en ninguno). Por ello, <code>Card(EMPLEADO, TRABAJAR) = (0,N)</code>. En cambio, tenemos proyectos en los que trabajan varios empleados, o incluso proyectos sin empleados, lo que implica que <code>Card(PROYECTO, TRABAJAR) = (0,N)</code>.</p> <p></p> <p>Autoevaluaci\u00f3n</p> <p>Igual que en las relaciones 1:1 y 1:N, \u00bfSer\u00edas capaz de anotar las combinaciones de cardinalidades y modelar todos los tipos de relaciones N:M posibles? \u00bfTiene sentido que las cardinalidades m\u00ednimas, en las relaciones N:M, sean 1? \u00bfPor qu\u00e9?</p>"},{"location":"temas/02/2.1-ModeloER.html#reflexivas","title":"\ud83e\udd1d Reflexivas","text":"Relaci\u00f3n reflexiva 1:N <p>Las relaciones reflexivas (o unarias) son aquellas relaciones de grado uno donde la misma entidad cumple dos roles diferentes en la relaci\u00f3n, los cuales se representan escribi\u00e9ndolo en cada lado de la relaci\u00f3n.</p> <p>Algunos ejemplos comunes son cuando una persona se casa con otra persona, una pieza que se compone de otras piezas o un empleado es responsable de otro empleado.</p> <p>Vamos a centrarnos en el caso de que un empleado sea el responsable de otro, donde podemos decir que todo empleado trabaja para otro pero que el empleado responsable (el jefe) lo es de varios empleados, lo que dar\u00eda lugar a una relaci\u00f3n 1:N. As\u00ed pues, creamos una relaci\u00f3n <code>TRABAJAR</code> y la unimos con <code>EMPLEADO</code> por los dos sentidos de la misma, y anotamos el rol en cada una de las cardinalidades.</p>"},{"location":"temas/02/2.1-ModeloER.html#atributos","title":"\u23f9\ufe0f Atributos","text":"<p>Los atributos describen propiedades de las entidades y de las relaciones, y se representan mediante elipses u \u00f3valos conectado a la entidad o la relaci\u00f3n mediante una l\u00ednea. Es importante destacar que en una misma entidad, el nombre de los atributos no se puede repetir, pero s\u00ed en entidades diferentes.</p> Atributos <p>Existen diferentes tipos de atributos:</p> <ul> <li>Identificador (clave): atributos \u00fanicos que identifican las ocurrencias de la entidad. Se subraya la palabra, como el <code>dni</code> que identifica a un cliente (no tendremos dos clientes con el mismo DNI)</li> <li>Compuesto: agrupaci\u00f3n de varios atributos, ya sean simples o compuestos. Por ejemplo, el campo <code>direccion</code> se compone de la calle, n\u00famero, etc... Se representa mediante \u00f3valos conectados entre s\u00ed, y pondremos el nombre compuesto entre par\u00e9ntesis.</li> <li>Multivaluado: el atributo puede tomar varios valores, como el <code>telefono</code> del cliente, que realmente puede almacenar el fijo, el m\u00f3vil y el n\u00famero del trabajo. Se representa mediante un doble \u00f3valo. (en otras notaciones, se pone una <code>n</code> al lado del conector del atributo)</li> <li>Derivado: Su valor se deduce a partir de otros atributos de la misma entidad, otras entidades con las que se relaciona o se calcula a partir de un dato. Por ejemplo, el campo <code>edad</code> se obtiene a partir de la fecha de nacimiento del cliente. Se representa mediante un \u00f3valo con el borde punteado.</li> <li>Opcional: el atributo puede contener valores nulos, como el <code>email</code>.</li> <li>No nulo: opuesto al atributo opcional, marca el atributo como obligatorio. En alguna notaciones se indica con un peque\u00f1o circulo entre el conector y el \u00f3valo.</li> <li>En una relaci\u00f3n: Su valor depende de la relaci\u00f3n, no de ninguna entidad</li> </ul> <p>Autoevaluaci\u00f3n</p> <p>Piensa en dos entidades que tengan una relaci\u00f3n con la cardinalidad que consideres, e identifica al menos un atributo de cada tipo.</p>"},{"location":"temas/02/2.1-ModeloER.html#identificadores","title":"\ud83c\udd94 Identificadores","text":"<p>Recuerda esta frase: Toda entidad debe tener uno o m\u00e1s atributos identificadores. M\u00e1s adelante veremos que en alg\u00fan caso particular de entidad no es necesario, pero por lo general, al realizar el modelo conceptual siempre debemos comprobar si hemos identificado un atributo identificador para cada entidad.</p> <p>Respecto a los atributos identificadores podemos tener:</p> <ul> <li>Atributos identificadores sencillos. Un atributo identifica de forma un\u00edvoca a una ocurrencia de la entidad. Por ejemplo, el <code>isbn</code> de un libro.</li> <li>Atributos identificadores compuestos, donde una entidad se identifica por dos o m\u00e1s atributos a la vez. Por ejemplo, una calle que se identifique por el tipo de v\u00eda y por el nombre de la calle, de manera que no es lo mismo la \"Avenida Am\u00e9rica\" que la \"Calle Am\u00e9rica\".</li> <li>Varios atributos candidatos que pueden identificar a la entidad. Por ejemplo, una persona que podemos identificar mediante su DNI, n\u00famero de pasaporte, n\u00famero de la seguridad social, etc.. Todos los atributos pueden identificar a la entidad <code>PERSONA</code>. Lo que haremos es elegir uno de ellos como identificador (el m\u00e1s com\u00fan o importante dependiendo del contexto del problema), y el resto de atributos se consideran claves alternativas, y se marcan como que aceptan valores \u00fanicos subrayando el nombre de los atributos con una l\u00ednea troceada.     \u00bfY si tenemos una entidad que no tiene aparentemente ning\u00fan atributo identificador? En ese caso, crearemos un nuevo atributo que lo haga, como <code>codigo</code> o <code>id</code>, y m\u00e1s adelante, el SGBD le dar\u00e1 un valor secuencial.</li> <li>Atributos identificadores que se complementan con otra entidad (este tipo lo estudiaremos en esta unidad dentro de las Restricciones)</li> </ul> <p>Dicho esto, un atributo identificador, como su propio nombre indica, debe identificar a la entidad de forma \u00fanica, siempre debe tener valor (no admite nulos), debe ser estable (a priori, no deber\u00eda cambiar), mejor si es sencilla y corta, y debe evitar la redundancia.</p> <p>Entidad Usuario</p> <p>Por ejemplo, pensemos en una entidad <code>USUARIO</code>, la cual tiene los atributos <code>login</code>, <code>password</code>, <code>email</code>, <code>nombre</code> y <code>telefono</code>. Si analizamos sus caracter\u00edsticas, claramente, los atributos candidatos ser\u00edan <code>login</code> y <code>email</code>, aunque como un usuario puede cambiar su email (por ejemplo, entre el personal y el de trabajo), ser\u00eda recomendable utilizar el atributo <code>login</code> como atributo identificador.</p> Nombre atributo \u00fanico siempre valor estable sencilla <code>login</code> S\u00ed S\u00ed S\u00ed S\u00ed <code>password</code> No S\u00ed No No <code>email</code> S\u00ed S\u00ed No S\u00ed <code>nombre</code> No S\u00ed S\u00ed S\u00ed <code>telefono</code> No No No S\u00ed <p>Autoevaluaci\u00f3n</p> <p>Piensa en una entidad PRODUCTO y deduce al menos 5 atributos que comparten todos los productos \u00bfQu\u00e9 atributo consideras identificador? \u00bfEs un atributo identificador simple o compuesto? Por \u00faltimo, \u00bfhas considerado otros atributos como candidatos?</p> <p>En resumen, los pasos que seguiremos a la hora de modelar un sistema de informaci\u00f3n son:</p> <ol> <li>Leer y comprender el problema.</li> <li>Localizar las entidades y relaciones candidatas. Para ello, sobre el enunciado, podemos rodear con un rect\u00e1ngulo las entidades (sustantivos) y con un rombo las relaciones (rombos).</li> <li>De las entidades, extraer los atributos, evitando la duplicidad y usando relaciones cuando sea necesario. Para cada entidad, debemos comprobar si tenemos uno o m\u00e1s atributos identificadores.</li> <li>Comprobar si alguno de los atributos debe ir en una relaci\u00f3n en vez de una entidad.</li> <li>Analizar y definir las cardinalidades de las relaciones, comenzando por la m\u00e1xima, para luego fijar la m\u00ednima y comprobar si las entidades participantes en la relaci\u00f3n son fuertes o d\u00e9biles.</li> <li>Revisar el modelo final y comprobar posibles relaciones redundantes o atributos derivados.</li> </ol> <p>Supuesto II Carreteras</p> <p>Se desea dise\u00f1ar una base de datos que contenga la informaci\u00f3n relativa a todas las carreteras de Espa\u00f1a. Se pide realizar el dise\u00f1o del modelo ER sabiendo que:</p> <ul> <li>Las carreteras se encuentran divididas en tramos.</li> <li>Un tramo, del que nos interesa su longitud, siempre pertenece a una \u00fanica carretera y no puede cambiar de carretera.</li> <li>Un tramo puede pasar por varios t\u00e9rminos municipales, siendo un dato de inter\u00e9s el km del tramo por el que entra en dicho t\u00e9rmino municipal y el km por el que sale.</li> <li>Existen una serie de \u00e1reas en las que se agrupan los tramos, cada uno de los cuales no puede pertenecer a m\u00e1s de un \u00e1rea.</li> </ul> Soluci\u00f3n <p>Primero localizamos las entidades y sus atributos:</p> <ul> <li>Entidades: <code>CARRETERA</code>, <code>TRAMO</code>, <code>MUNICIPIO</code>, <code>AREA</code></li> <li>Atributos: cada entidad tendr\u00e1 un atributo identificador, y c\u00f3mo en el enunciado no se indica, en unos casos creamos un atributo <code>codigo</code> y en otros con el nombre es suficiente (como es el caso de <code>MUNICIPIO</code>). Como atributo propio, cada <code>TRAMO</code> tiene un atributo <code>longitud</code>.</li> </ul> <p>Las relaciones son:</p> <ul> <li>Relaci\u00f3n 1:N nombrada como <code>PERTENECER</code> entre <code>CARRETERA</code> Y <code>TRAMO</code>, ya que \"las carreteras se encuentran divididas en tramos\" y \"un tramo, del que nos interesa su longitud, siempre pertenece a una \u00fanica carretera y no puede cambiar de carretera\".</li> <li>Relaci\u00f3n N:M nombrada como <code>PASAR</code> entre <code>TRAMO</code> y <code>MUNICIPIO</code>, ya que \"un tramo puede pasar por varios t\u00e9rminos municipales\", y aunque no lo indica de forma expl\u00edcita, deducimos que por un municipio pueden pasar varios tramos. Adem\u00e1s, a\u00f1adimos dos atributos en la relaci\u00f3n para almacenar \"el km del tramo por el que entra en dicho t\u00e9rmino municipal y el km por el que sale\". Si hubi\u00e9ramos colocado los atributos en <code>TRAMO</code> o en <code>MUNICIPIO</code> no tendr\u00edan el mismo significado, ya que nos interesa el dato de la relaci\u00f3n entre las dos entidades y no de una de ellas por separado.</li> <li>Relaci\u00f3n 1:N nombrada como <code>AGRUPAR</code> entre <code>TRAMO</code> Y <code>AREA</code>, ya que \"existen una serie de \u00e1reas en las que se agrupan los tramos, cada uno de los cuales no puede pertenecer a m\u00e1s de un \u00e1rea.\".</li> </ul> <p></p> Soluci\u00f3n supuesto Carretera <p></p>"},{"location":"temas/02/2.2-Restricciones.html","title":"2.2 Restricciones","text":""},{"location":"temas/02/2.2-Restricciones.html#22-restricciones","title":"2.2 Restricciones","text":"<p>En el apartado de Entidades vimos que tenemos entidades fuertes y d\u00e9biles, y en las d\u00e9biles su existencia depende de otra entidad, de manera que se identifica por sus propiedades y por las propiedades de las entidades de las que depende.</p>"},{"location":"temas/02/2.2-Restricciones.html#existencia-e-identificacion","title":"\ud83c\udd94 Existencia e identificaci\u00f3n","text":"<p>Las entidades d\u00e9biles, que representamos mediante un doble rect\u00e1ngulo, presentan dos tipos de dependencia:</p> <ul> <li> <p>Dependencia en existencia: la entidad d\u00e9bil no puede existir sin la entidad d\u00e9bil, lo que implica que, si desaparece una instancia de entidad fuerte desaparecer\u00e1n las instancias de entidad d\u00e9biles que dependan de la primera. La representaci\u00f3n de este tipo de dependencia incluir\u00e1 una <code>E</code> en el conector o en el interior de la relaci\u00f3n d\u00e9bil. En todos casos las restricciones de existencia implican que la cardinalidad m\u00ednima es 1.</p> </li> <li> <p>Dependencia en identificaci\u00f3n: debe darse una dependencia en existencia y adem\u00e1s, una ocurrencia de la entidad d\u00e9bil no puede identificarse por s\u00ed misma, debiendo hacerse mediante los atributos identificadores de la entidad fuerte asociada. La representaci\u00f3n de este tipo de dependencia incluir\u00e1 una <code>ID</code> en el conector o en el interior de la relaci\u00f3n d\u00e9bil. Tambi\u00e9n se puede representar con un rombo doble. Adem\u00e1s de que la cardinalidad m\u00ednima ser\u00e1 1, es muy com\u00fan que en estos casos, la relaci\u00f3n tenga una cardinalidad de 1:N.</p> </li> </ul> Restricci\u00f3n de ID <p>En el ejemplo del gr\u00e1fico tenemos una relaci\u00f3n que tiene una restricci\u00f3n de identificaci\u00f3n entre una l\u00ednea de pedido (entidad d\u00e9bil) respecto a un pedido (entidad fuerte). El pedido tendr\u00e1 un c\u00f3digo y un montante total que se calcula a partir de los valores de las l\u00edneas de pedido. La propia restricci\u00f3n de identificaci\u00f3n implica que las l\u00edneas de pedido realmente se identifican por su n\u00famero de l\u00ednea y por el c\u00f3digo del pedido, por ejemplo la l\u00ednea <code>1</code> del pedido <code>R2024A01</code>, la l\u00ednea <code>2</code> del mismo pedido, etc... o la l\u00ednea <code>1</code> de otro pedido diferente.</p> <p>En las restricciones de identificaci\u00f3n es muy com\u00fan que la entidad d\u00e9bil se identifique mediante un n\u00famero o c\u00f3digo secuencial, el cual se reinicia por cada cambio de la entidad fuerte. Por ejemplo, pensemos en que todos los apartamentos de un edificio empiezan desde el n\u00famero <code>101</code>, pudiendo tener el apartamento <code>102</code> del edificio <code>E1</code> y el apartamento <code>102</code> del edificio <code>E2</code>, es decir, la entidad <code>APARTAMENTO</code> tiene una restricci\u00f3n de identificaci\u00f3n con <code>EDIFICIO</code>.</p> <p>Pongamos otro ejemplo, si identificamos al alumnado por su n\u00famero de lista y por el grupo al que pertenecen, tendremos que no ser\u00e1 el mismo estudiante el n\u00famero <code>1</code> del grupo <code>1K</code> que el estudiante <code>1</code> del grupo <code>2K</code>, de manera que tendremos una restricci\u00f3n de identificaci\u00f3n entre la entidad <code>ESTUDIANTE</code> y la entidad <code>GRUPO</code>.</p> <p>D\u00e9bil o fuerte</p> <p></p> <p>Hay casos en los que una entidad tiene relaci\u00f3n con varias entidades, comport\u00e1ndose como d\u00e9bil en una, y como fuerte en otras. Es por ello, que adem\u00e1s de marcar la entidad como d\u00e9bil, debemos marcar la relaci\u00f3n con un doble rombo.</p> <p>Ve\u00e1moslo con un ejemplo. Si sobre la l\u00ednea de pedido, a\u00f1adimos una relaci\u00f3n 1:N con observaciones sobre la misma, tendr\u00edamos el siguiente modelo, donde LINEA_PEDIDO es una entidad d\u00e9bil respecto a la relaci\u00f3n CONTENER, pero hace de entidad fuerte respecto a la relaci\u00f3n TENER.</p> <p>Cardinalidades exactas</p> <p>En ocasiones sabemos la cantidad exacta de ocurrencias con las que se puede relacionar una entidad. En dicho caso, seguir\u00e1n siendo relaciones 1:N o N:M, pero en el modelo, indicaremos la cantidad de ocurrencias.</p> <p>Por ejemplo, si en una clase se matriculan un m\u00ednimo de 5 estudiantes y un m\u00e1ximo de 24, y un estudiante se matricula en al menos 2 clases y 6 como m\u00e1ximo, tendremos:</p> <p></p> Restricci\u00f3n de ID <p></p> <p>Supuesto III Empresa</p> <p>Vamos a ampliar el sistema de informaci\u00f3n anterior para almacenar m\u00e1s informaci\u00f3n. El nuevo sistema es:</p> <ul> <li>La empresa est\u00e1 organizada en departamentos. Cada uno tiene un nombre \u00fanico, el n\u00famero del despacho en el que se ubica y un empleado que lo dirige. Nos interesa la fecha que empez\u00f3 a dirigirlo.</li> <li>Cada departamento controla una serie de proyectos, los cuales tienen nombre y n\u00famero \u00fanicos.</li> <li>De cada empleado nos interesa el DNI, nombre, fecha de nacimiento, salario y departamento en el que trabaja. Cada empleado puede trabajar en m\u00e1s de un proyecto, dedic\u00e1ndole un determinado n\u00famero de horas a la semana en cada proyecto.</li> <li>Finalmente, queremos guardar tambi\u00e9n los familiares de cada empleado, para administrar informaci\u00f3n relativa a las p\u00f3lizas de seguros. De los familiares, queremos saber el nombre, fecha de nacimiento y parentesco con el empleado.</li> </ul> Soluci\u00f3n <p>Si volvemos a repetir el mismo proceso que hemos realizando anteriormente, vamos a localizar las entidades y las relaciones buscando los sustantivos y los verbos:</p> <ul> <li>La empresa est\u00e1 organizada en departamentos. Cada uno tiene un nombre \u00fanico, el n\u00famero del despacho en el que se ubica y un empleado que lo dirige. Nos interesa la fecha que empez\u00f3 a dirigirlo.</li> <li>Cada departamento controla una serie de proyectos, los cuales tienen nombre y n\u00famero \u00fanicos.</li> <li>De cada empleado nos interesa el DNI, nombre, fecha de nacimiento, salario y departamento en el que trabaja. Cada empleado puede dedicarse a m\u00e1s de un proyecto, facturando un determinado n\u00famero de horas a la semana a cada proyecto.</li> <li>Finalmente, queremos guardar tambi\u00e9n los familiares que tiene cada empleado, para administrar informaci\u00f3n relativa a las p\u00f3lizas de seguros. De los familiares, queremos saber el nombre, fecha de nacimiento y parentesco con el empleado.</li> </ul> <p>Resumiendo, hemos localizado: </p> <ul> <li>Entidades: EMPLEADO, DPTO, PROYECTO y FAMILIAR.</li> </ul> <p>Relaciones:</p> <ul> <li>TRABAJAR entre EMPLEADO y DPTO.</li> <li>SER_JEFE entre EMPLEADO y DPTO.</li> <li>CONTROLAR entre DPTO y PROYECTO.</li> <li>DEDICAR entre EMPLEADO y PROYECTO.</li> <li>TENER entre EMPLEADO y FAMILIAR.</li> </ul> <p>Si nos centramos en las cardinalidades de las relaciones, tenemos:</p> <ul> <li>Card(EMPLEADO, TRABAJAR) = (0, 1) y Card(DPTO, TRABAJAR) = (0, N)</li> <li>Card(EMPLEADO, SER_JEFE) = (0, 1) y Card(DPTO, SER_JEFE) = (1, 1)</li> <li>Card(DPTO, CONTROLAR) = (0, N) y Card(PROYECTO, CONTROLAR) = (1, 1)</li> <li>Card(EMPLEADO, DEDICAR) = (0, N) y Card(PROYECTO, DEDICAR) = (1, N)</li> <li>Card(EMPLEADO, TENER) = (0, N) y Card(FAMILIAR, TENER) = (1, 1)</li> </ul> <p>Finalmente, los atributos de las entidades y las relaciones son:</p> <ul> <li>Atributos de EMPLEADO: dni (atributo identificador), nombre, fecha de nacimiento, salario.</li> <li>Atributos de DPTO: nombre (atributo identificador), n\u00famero de despacho.</li> <li>Atributos de PROYECTO: nombre y n\u00famero (ambos atributos identificadores).</li> <li>Atributos de FAMILIAR: nombre (atributo identificador), fecha de nacimiento, parentesco.</li> </ul> <p>Atributos de las relaciones:</p> <ul> <li>SER_JEFE: fecha de inicio</li> <li>DEDICARSE: horas semanales</li> </ul> <p>Con estas consideraciones, el modelo resultante es:</p> <p></p> Soluci\u00f3n <p></p>"},{"location":"temas/02/2.2-Restricciones.html#perdida-expresiva","title":"P\u00e9rdida expresiva","text":"<p>En ocasiones, los modelos conceptuales no son capaces de expresar todas las restricciones, relaciones o propiedades el mundo real, ya sea por algunas relaciones muy complejas, dependencias temporales o reglas de negocio.</p> <p>Para ello, en el pie de los modelos indicaremos con texto una frase del estilo \"P\u00e9rdida expresiva: Todo cliente debe haber nacido en la misma provincia que la tienda donde realiza el pedido\".</p>"},{"location":"temas/02/2.3-Modelo-extendido.html","title":"2.3 Modelo Extendido","text":""},{"location":"temas/02/2.3-Modelo-extendido.html#23-el-modelo-entidad-relacion-extendido","title":"2.3 El modelo Entidad Relaci\u00f3n Extendido","text":"<p>Con el paso de los a\u00f1os, y dadas ciertas carencias del modelo entidad relaci\u00f3n, a mediados de los a\u00f1os 80 se extendi\u00f3 con la incorporaci\u00f3n de los conceptos de clase y subclase, junto con los conceptos de generalizaci\u00f3n y especializaci\u00f3n, as\u00ed como la agregaci\u00f3n de entidades, dando lugar al modelo Entidad Relaci\u00f3n Extendido (EER).</p>"},{"location":"temas/02/2.3-Modelo-extendido.html#generalizacion","title":"\ud83d\udd37 Generalizaci\u00f3n","text":"<p>La descomposici\u00f3n de tipos de entidad en varios subtipos o subclases permite identificar jerarqu\u00edas de entidades, entre una entidad general, que denominamos entidad superclase (o entidad padre), que se puede especializar en entidades subclase (o entidades hijas):</p> <ul> <li>La entidad superclase modelan las caracter\u00edsticas comunes de la entidad vista de una forma gen\u00e9rica.</li> <li>Las entidades subclase modelan las caracter\u00edsticas propias de sus especializaciones.</li> </ul> <p>Es necesario que se cumpla que toda ocurrencia de una entidad subclase sea tambi\u00e9n una ocurrencia de su entidad superclase, propagando sus caracter\u00edsticas de padres a hijos, lo que se denomina herencia de propiedades.</p> <p>Generalizaci\u00f3n vs Especializaci\u00f3n</p> <p>Se dice que tenemos una generalizacio\u0301n, cuando dos o ma\u0301s tipos de entidades van a compartir diferentes atributos. Para ello, la entidad superclase contendr\u00e1 aquellos atributos comunes a las subclases. En cambio, se dice que realizamos una especializaci\u00f3n cuando un tipo de entidad tiene algunos atributos que tienen sentido para algunas subclases, pero no para todas. Para ello, cada subclase contendr\u00e1 sus atributos espec\u00edficos, y los comunes se colocan en la superclase.</p> <p>As\u00ed pues, se dice que la generalizaci\u00f3n va de abajo hacia arriba, subiendo los atributos comunes al padre, y en consecuencia, la especializaci\u00f3n va de arriba a abajo, colocando en los hijos los atributos espec\u00edficos que no comparten todas las subclases.</p> <p>Con generalizaci\u00f3n y la especializaci\u00f3n se establece una relaci\u00f3n ES-UN (en ingl\u00e9s, IS-A), indicando que una entidad hijo ES-UN con la entidad padre. Por ejemplo, si la superclase es <code>VEHICULO</code>, ejemplos de subclases ser\u00edan <code>CAMION</code>, <code>AUTOBUS</code>, <code>MOTO</code>, etc... ya que un <code>CAMION</code> es un <code>VEHICULO</code>.</p> <p>En la generalizaci\u00f3n/especializaci\u00f3n, las caracter\u00edsticas (atributos o interrelaciones) de la entidad superclase se propagan hacia las entidades subclase. Es lo que se denomina herencia de propiedades.</p> Generalizaci\u00f3n <p>Las generalizaciones siempre se representan en vertical, situando la entidad superclase arriba y las subclases debajo. Para conectarlas, se utiliza un c\u00edrculo que puede contener la letra <code>d</code> o la letra <code>o</code> de forma similar al ejemplo que tenemos en el lateral, para indicar que la especializaci\u00f3n es disjunta o solapada (overlap). Entre la clase padre y el c\u00edrculo, si se utiliza una l\u00ednea simple indicamos que es una especializaci\u00f3n parcial y si es doble, que se trata de una generalizaci\u00f3n total.</p> <p>Finalmente, el circulo conecta con los hijos mediante una l\u00ednea que contiene un arco indicando el sentido del padre a los hijos.</p> <p>As\u00ed pues, en el ejemplo tenemos que un <code>LIBRO</code> tiene un isbn y un t\u00edtulo. Y que un <code>EBOOK</code> ES-UN <code>LIBRO</code> y que <code>EN_PAPEL</code> tambi\u00e9n ES-UN <code>LIBRO</code>. Un <code>EBOOK</code> en total tiene tres atributos, los dos que hereda del padre, m\u00e1s el formato del ebook. De forma similar, <code>EN_PAPEL</code>, tambi\u00e9n tiene tres atributos, los dos que hereda de <code>LIBRO</code> m\u00e1s el n\u00famero de p\u00e1ginas de la copia impresa.</p>"},{"location":"temas/02/2.3-Modelo-extendido.html#tipos","title":"\ud83d\udcda Tipos","text":"<p>Cuando definimos una especializaci\u00f3n es muy importante definir c\u00f3mo se relacionan las superclases con las subclases.</p> <p>Vamos a centrarnos en un supuesto donde tenemos una superclase <code>EMPLEADO</code> y tenemos tres subclases: <code>DIRECTIVO</code>, <code>TECNICO</code> y <code>COMERCIAL</code>.</p> <p>Si nos centramos en la cantidad de subtipos posibles tenemos:</p> <ul> <li>Total: La superclase pertenece obligatoriamente a alguna de las subclases. No puede haber un <code>EMPLEADO</code> que no sea ni <code>DIRECTIVO</code>, ni <code>TECNICO</code>, ni <code>COMERCIAL</code>. Se representa uniendo mediante una l\u00ednea doble (<code>||</code>) la superclase con el c\u00edrculo.</li> <li>Parcial: La superclase puede no pertenecer a alguna de las subclases. Podr\u00edamos tener un <code>EMPLEADO</code> que no sea ni <code>DIRECTIVO</code>, ni <code>TECNICO</code>, ni <code>COMERCIAL</code>. Se representa uniendo mediante una l\u00ednea sencilla (<code>|</code>) la superclase con el c\u00edrculo.</li> </ul> <p>Y si ponemos en foco en la exclusividad de las subclases:</p> <ul> <li>Disjunta / Exclusiva: La superclase s\u00f3lo pertenece a una de las subclases. Si un <code>EMPLEADO</code> es un <code>DIRECTIVO</code>, no puede ser un <code>TECNICO</code> ni un <code>COMERCIAL</code>. Se representa poniendo una <code>d</code> dentro del c\u00edrculo.</li> <li>Solapada: La superclase puede pertenecer a varias de las subclases a la vez. Un <code>EMPLEADO</code> puede ser un <code>DIRECTIVO</code> y un <code>COMERCIAL</code> a la vez. Se representa poniendo una <code>o</code> dentro del c\u00edrculo.</li> </ul> <p>Con lo cual, se pueden dar las siguientes combianciones:</p> Tipos de relaciones IS-a Otras formas de representar este tipo de relaciones: <p></p> Tipos de relaciones IS-a (representaci\u00f3n alternativa) <p></p> <p>Supuesto IV Tienda</p> <p>Se pide dise\u00f1ar la base de datos de una tienda, la cual est\u00e1 organizada por departamentos, que contenga informaci\u00f3n sobre los trabajadores y los art\u00edculos que se ofertan.</p> <p>Se deben tener en cuenta las siguientes restricciones:</p> <p>De todos los trabajadores nos interesa almacenar su DNI, nombre completo y n\u00famero de tel\u00e9fono, as\u00ed como el departamento en el que trabajan. Existen tres tipos de trabajadores: gerentes (del que guardaremos el bonus anual), jefes (nos interesa almacenar cuantos vendedores tiene a su cargo) y vendedores (de cada vendedor, guardaremos su sueldo base y la zona donde trabaja). Cada departamento lo dirige un gerente, aunque se puede dar el caso que tengamos gerentes que no dirijan ning\u00fan departamento, pero nunca dirigir\u00e1n m\u00e1s de uno. Un gerente tiene a su cargo a un cierto n\u00famero de jefes y \u00e9stos a su vez a un cierto n\u00famero de vendedores. En cuanto a los productos nos interesa su c\u00f3digo, nombre y precio, y departamento en el que se encuentran. Cada producto lo pueden vender muchos vendedores, y cada vendedor, a su vez, puede vender muchos productos. Adem\u00e1s, cada vendedor le aplicar\u00e1 un determinado descuento a los productos con los que trabaja.</p> Soluci\u00f3n <p>Primero localizamos las entidades y sus atributos:</p> <ul> <li>Entidades: TRABAJADOR, DPTO, PRODUCTO. Los trabajadores a su vez, se descomponen en las subclases VENDEDOR, JEFE y GERENTE.</li> <li>Atributos: los trabajadores se identifican por su dni, mientras que los departamentos y los productos por su codigo.</li> </ul> <p>Las relaciones son:</p> <ul> <li>Relaci\u00f3n 1:N nombrada como PERTENECER entre TRABAJADOR Y DPTO, ya que de los trabajadores nos interesa \"el departamento en el que trabajan\" y se entiende que a un departamento pertenecer\u00e1n varios trabajadores.</li> <li>Generalizaci\u00f3n total y disjunta entre TRABAJADOR y sus hijos VENDEDOR, JEFE y GERENTE, cada uno con sus propios atributos. Destacar que el atributo de cantVendedores es derivado, ya que se obtiene de la cardinalidad de la relaci\u00f3n SUPERVISAR.</li> <li>Relaci\u00f3n 1:1 nombrada como DIRIGIR entre DPTO Y GERENTE, ya que \"Cada departamento lo dirige un gerente, aunque se puede dar el caso que tengamos gerentes que no dirijan ning\u00fan departamento, pero nunca dirigir\u00e1n m\u00e1s de uno\"</li> <li>Relaci\u00f3n 1:N nombrada como MANDAR entre GERENTE Y JEFE, ya que \"Un gerente tiene a su cargo a un cierto n\u00famero de jefes\".</li> <li>Relaci\u00f3n 1:N nombrada como SUPERVISAR entre JEFE Y VENDEDOR, continuando \"y \u00e9stos (los jefes) a su vez a un cierto n\u00famero de vendedores\".</li> <li>Relaci\u00f3n 1:N nombrada como ENCONTRAR entre DPTO Y PRODUCTO, ya que \"En cuanto a los productos nos interesa ... departamento en el que se encuentran\", y entendemos que en un departamento encontraremos varios productos.</li> <li>Relaci\u00f3n N:M nombrada como VENDER entre VENDEDOR y PRODUCTO, ya que \"Cada producto lo pueden vender muchos vendedores, y cada vendedor, a su vez, puede vender muchos productos\". Adem\u00e1s, a\u00f1adimos el atributo descuento en la relaci\u00f3n para almacenar el descuento que cada vendedor aplica a los productos.</li> </ul> <p></p> Soluci\u00f3n <p></p>"},{"location":"temas/02/2.3-Modelo-extendido.html#agregacion","title":"\u2716\ufe0f Agregaci\u00f3n","text":"<p>La agregaci\u00f3n surge de la limitaci\u00f3n que existe en el modelo ER de no permitir expresar relaciones entre relaciones binarias, y en gran medida, haciendo uso de agregaciones podemos evitar hacer uso de relaciones ternarias.</p> <p>As\u00ed pues, una agregaci\u00f3n se comporta como una entidad m\u00e1s, con un nivel de abstracci\u00f3n mayor que la propia relaci\u00f3n.</p> <p>Ejemplo Agregaci\u00f3n</p> <p>Por ejemplo, tengamos el caso de un docente que imparte clase en una determinada aula. El docente dar\u00e1 clase a varios grupos en el aula, y en el aula entran varios docentes. Queda claro que una relaci\u00f3n N:M entre <code>DOCENTE</code> y <code>AULA</code> (por ejemplo, <code>IMPARTIR</code>) nos permite modelar este caso. Pero \u00bfy si queremos registrar las incidencias que se producen en el aula cuando un docente est\u00e1 dando clase? Si unimos la entidad <code>INCIDENCIA</code> con <code>DOCENTE</code> o con <code>AULA</code>, estar\u00edamos perdiendo informaci\u00f3n.</p> <p></p> Agregaci\u00f3n <p></p> <p>As\u00ed pues, creamos una entidad asociativa que funciona como una agregaci\u00f3n, y la nombramos, por ejemplo como <code>SESION</code> (una sesi\u00f3n lectiva la imparte un docente en un aula) y \u00e9sta es la que relacionamos con la entidad <code>INCIDENCIA</code> mediante la relaci\u00f3n <code>REGISTRAR</code>. Es importante destacar que la entidad asociativa no tiene atributo identificador, porque realmente es como si tuviera una restricci\u00f3n de identificaci\u00f3n respecto a las otras entidades, a modo de entidad d\u00e9bil que necesita de todas las entidades con las que se asocia para identificarse.</p> <p>El mecanismo de agregaci\u00f3n lo que hace es abstraer las entidades y la relaci\u00f3n que las asocia para obtener una entidad compleja, conocida como entidad asociativa, que a su vez puede relacionarse como una entidad normal con el resto de entidades de nuestro sistema.</p> <p>Aunque tiene muchos puntos de contacto con una relaci\u00f3n ternaria, la agregaci\u00f3n remarca la relaci\u00f3n entre una determinada pareja de entidades, al mismo tiempo que no implica una necesaria asociaci\u00f3n con la tercera entidad, como si ocurre en las ternarias.</p>"},{"location":"temas/02/2.A-Actividades.html","title":"Actividades","text":""},{"location":"temas/02/2.A-Actividades.html#ut2-a-actividades","title":"UT2-A. Actividades","text":""},{"location":"temas/02/2.A-Actividades.html#actividades","title":"Actividades","text":""},{"location":"temas/02/2.A-Actividades.html#ac201-rabd6-ce6b-ce6c","title":"AC201. (RABD.6 // CE6b, CE6c)","text":"A partir del siguiente sistema de informaci\u00f3n <p>Vamos a dise\u00f1ar la base de datos para una flota de veh\u00edculos y las multas asociadas.</p> <p>Tenemos una flota de veh\u00edculos de los cuales queremos guardar los siguientes datos: <code>matr\u00edcula</code>, <code>modelo</code>, <code>marca</code> y <code>a\u00f1o de fabricaci\u00f3n</code>. Nos interesa almacenar informaci\u00f3n de su <code>propietario</code>, que tiene los siguientes datos: <code>DNI</code>, <code>nombre</code>, <code>apellidos</code>, <code>edad</code>, <code>tel\u00e9fono</code>, <code>direcci\u00f3n</code>, <code>c\u00f3digo postal</code> y la <code>fecha desde la que ese propietario tiene el veh\u00edculo</code>.</p> <p>Ampliaci\u00f3n: Gesti\u00f3n de Multas \ud83d\udc6e</p> <p>Se desea conocer las multas impuestas a cada veh\u00edculo.</p> <p>De cada multa interesa conocer: la <code>identificaci\u00f3n de la multa</code> (n\u00famero \u00fanico), <code>fecha</code>, <code>hora</code>, <code>breve descripci\u00f3n</code>, <code>ubicaci\u00f3n</code>, si estaba <code>presente o ausente</code> el propietario/conductor, <code>importe total</code>, el <code>agente</code> que ha puesto la multa (del cual nos interesa saber su <code>DNI</code>, <code>n\u00famero de agente</code>, <code>nombre</code> y <code>apellidos</code>, <code>a\u00f1os en el cuerpo</code>) y las infracciones asociadas a la multa.</p> <p>Una multa puede tener asociada m\u00e1s de una infracci\u00f3n. De las infracciones que se pueden cometer queremos registrar el <code>identificador de infracci\u00f3n</code>, <code>denominaci\u00f3n</code>, <code>tipo</code> (Leve, Grave, Muy grave), <code>sanci\u00f3n econ\u00f3mica</code> (m\u00ednimo y m\u00e1ximo) y <code>p\u00e9rdida de puntos</code>.</p> <p>Se pide:</p> <ol> <li>Identifica las entidades, atributos y relaciones</li> <li>Una vez identificados, realiza el modelo ER \u00fanicamente con las entidades y las relaciones (sin colocar los atributos) y define las cardinalidades de las relaciones</li> </ol>"},{"location":"temas/02/2.A-Actividades.html#ar202-rabd6-ce6b","title":"AR202. (RABD.6 // CE6b)","text":"Dise\u00f1a el modelo ER \u00fanicamente con las entidades y las relaciones de un Centro Educativo <p>Dise\u00f1ar la base de datos para gestionar alumnos, profesores y m\u00f3dulos.</p> <p>Se desea guardar informaci\u00f3n de los <code>alumnos</code> (<code>N\u00famero de expediente</code>, <code>NIF</code>, <code>nombre</code>, <code>apellido 1</code>, <code>apellido 2</code>, <code>tel\u00e9fono</code>, <code>direcci\u00f3n</code>, <code>ciudad</code>, <code>c\u00f3digo postal</code>, <code>edad</code>, <code>email</code>), de los <code>m\u00f3dulos</code> que se imparten (<code>denominaci\u00f3n</code>, <code>n\u00famero de horas</code> y <code>ciclo</code> al que pertenecen), el <code>profesor</code> que lo imparte y la <code>nota final</code> obtenida por cada alumno en cada m\u00f3dulo (s\u00f3lo una nota final).</p> <p>Del <code>profesor</code> queremos guardar su <code>DNI</code>, <code>nombre</code> y <code>apellidos</code>, <code>tel\u00e9fono</code>, <code>email</code>, <code>fecha de ingreso</code>, si tiene <code>plaza definitiva</code> o no y <code>departamento</code> al que pertenece. Se desea conocer tambi\u00e9n el profesor que es <code>jefe de departamento</code>.</p> <p>Ampliaci\u00f3n: Gesti\u00f3n de Convocatorias \ud83d\udcc4</p> <p>En el caso de que el alumno haya suspendido un m\u00f3dulo, se debe almacenar la nota obtenida en cada una de las convocatorias. Estas se guardar\u00e1n como <code>MAR</code> (marzo), <code>JUN</code> (junio) y <code>SEP</code> (septiembre) y el <code>a\u00f1o</code> al que corresponda.</p>"},{"location":"temas/02/2.A-Actividades.html#ac203-rabd6-ce6d","title":"AC203. (RABD.6 // CE6d)","text":"A partir del siguiente modelo ER <p>Indica las cardinalidades de las relaciones, y a continuaci\u00f3n, redacta el texto que dar\u00eda lugar como resultado este modelo</p> <p></p> Actividad 203 <p></p>"},{"location":"temas/02/2.A-Actividades.html#ac204-rabd6-ce6b-ce6c-ce6e","title":"AC204. (RABD.6 // CE6b, CE6c, CE6e):","text":"Empresa Venta de Productos <p>Una empresa vende productos a varios clientes. Se desea registrar los datos de los clientes, los datos de los productos, de los proveedores que lo proporcionan y de las compras que realizan los clientes.</p> <ul> <li>Clientes: <code>nombre</code>, <code>apellidos</code>, <code>DNI</code>, <code>direcci\u00f3n completa</code>, <code>tel\u00e9fono</code>, <code>email</code> y <code>edad</code>.</li> <li>Productos que compran: <code>n\u00famero de unidades</code> de cada producto y la <code>fecha</code> en la que lo compran.</li> <li>Productos: Se clasifican en <code>categor\u00edas</code> (textil, menaje, tecnolog\u00eda, ...), de forma que un producto pertenece a una \u00fanica categor\u00eda. Cada producto tiene un <code>nombre</code>, un <code>c\u00f3digo</code>, un <code>precio unitario de compra</code>, <code>precio de venta</code> y <code>tipo de IVA</code> (21, 10 o 4).</li> <li>Compras: Un cliente puede comprar varios productos, y un mismo producto puede ser comprado por varios clientes. Si se realiza una compra de un mismo art\u00edculo un mismo d\u00eda, se registrar\u00e1 como una \u00fanica compra.</li> <li>Proveedores: Un producto s\u00f3lo puede ser suministrado por un proveedor, y un proveedor puede suministrar diferentes productos. De cada proveedor se desea conocer el <code>NIF</code>, <code>nombre</code>, <code>apellidos</code>, <code>tel\u00e9fono</code> y el <code>precio</code> al que suministra cada producto.</li> </ul>"},{"location":"temas/02/2.A-Actividades.html#ac205-rabd6-ce6b-ce6c-ce6e","title":"AC205. (RABD.6 // CE6b, CE6c, CE6e)","text":"Realiza el modelo ER de los siguientes sistemas de informaci\u00f3n <ul> <li> <p><code>205.1</code>: Una empresa ubicada en distintos edificios de distintos pol\u00edgonos industriales desea registrar la distribuci\u00f3n de sus departamentos.     Un departamento puede estar distribuido en varios edificios. Del departamento tenemos su nombre y el n\u00famero de empleados que lo integran.     De los edificios sabemos su nombre y el n\u00famero de despachos que tienen. En cada edificio (que est\u00e1 localizado en un pol\u00edgono industrial, y del que se conoce su nombre y la ciudad en la que est\u00e1 situado) pueden ubicarse distintos departamentos.     Debido a esto, se desea controlar el n\u00famero de despachos que cada departamento tiene en cada edificio.</p> </li> <li> <p><code>205.2</code>: Una peque\u00f1a empresa telef\u00f3nica desea crear una base de datos para el control de las llamadas efectuadas exclusivamente entre sus clientes.     Dispondr\u00e1 de informaci\u00f3n sobre las terminales de su red (si se trata de tel\u00e9fonos m\u00f3viles o fijos, el no de tel\u00e9fono y el nombre del cliente), y de cada llamada realizada entre ellos se almacenar\u00e1: n\u00fameros de tel\u00e9fono del emisor y el receptor de la llamada, la hora de comienzo de la misma y su duraci\u00f3n.</p> </li> </ul>"},{"location":"temas/02/2.A-Actividades.html#ar206-rabd6-ce6b-ce6c-ce6e","title":"AR206. (RABD.6 // CE6b, CE6c, CE6e)","text":"Realiza el modelo ER de una base de datos para una Autoescuela. <p>En una autoescuela hay varios profesores y varios coches para realizar las pr\u00e1cticas.</p> <p>Se desea guardar informaci\u00f3n respecto a los alumnos (<code>DNI</code>, <code>nombre</code>, <code>apellidos</code>, <code>fecha de matriculaci\u00f3n</code>, <code>tel\u00e9fono</code>, <code>email</code>), el profesor que se les asigna (<code>DNI</code>, <code>nombre</code> y <code>apellidos</code>, <code>direcci\u00f3n</code>, <code>tel\u00e9fono</code>, <code>fecha ingreso</code>) y el coche que conducir\u00e1n (<code>matr\u00edcula</code>, <code>color</code>, <code>a\u00f1o de compra</code>, <code>potencia</code>).</p> <ul> <li> <p>Caso A) \ud83d\ude97     Cada alumno da clase siempre en el mismo coche y con el mismo profesor.</p> </li> <li> <p>Caso B) \ud83d\udd04   Cada alumno puede dar clases con un profesor y/o coche distinto. Se desea reflejarlo y saber en qu\u00e9 <code>fecha</code> ha dado la clase, con qu\u00e9 coche y con qu\u00e9 profesor.</p> </li> </ul>"},{"location":"temas/02/2.A-Actividades.html#ap207-rabd6-ce6b-ce6c-ce6e","title":"AP207. (RABD.6 // CE6b, CE6c, CE6e):","text":"Realiza el modelo ER empresa de log\u00edstica <p>Nos subimos al cami\u00f3n para dise\u00f1ar la base de datos de una empresa de log\u00edstica que reparte paquetes por toda Espa\u00f1a.</p> <p>Se desea informatizar la gesti\u00f3n de una empresa de transportes.</p> <ul> <li>Camioneros: <code>DNI</code>, <code>nombre</code>, <code>tel\u00e9fono</code>, <code>direcci\u00f3n</code>, <code>salario</code> y <code>poblaci\u00f3n</code> y <code>provincia</code> en la que vive.</li> <li>Paquetes: <code>c\u00f3digo de paquete</code>, <code>descripci\u00f3n</code>, <code>nombre destinatario</code> y <code>direcci\u00f3n completa del destinatario</code>.</li> <li>Reglas de reparto: Un camionero distribuye muchos paquetes, y un paquete s\u00f3lo puede ser distribuido por un camionero.</li> <li>Provincias: <code>c\u00f3digo de provincia</code> y <code>nombre</code>. Un paquete s\u00f3lo puede llegar a una provincia. Sin embargo, a una provincia pueden llegar varios paquetes.</li> <li>Camiones: <code>matr\u00edcula</code>, <code>marca</code>, <code>modelo</code> y <code>potencia</code>. Un camionero puede conducir diferentes camiones en fechas diferentes, y un cami\u00f3n puede ser conducido por varios camioneros en una misma fecha. Puede haber camiones nuevos que no se hayan usado en el reparto todav\u00eda.</li> </ul>"},{"location":"temas/02/2.A-Actividades.html#ac208-rabd6-ce6b-ce6c-ce6e","title":"AC208. (RABD.6 // CE6b, CE6c, CE6e)","text":"Realiza el modelo ER una prueba ciclista <p>A los ciclistas inscritos en la prueba se les asigna un dorsal \u00fanico. De cada ciclista participante se desea conocer su edad, nombre y equipo al que pertenece. De cada equipo se desea conocer su director.</p> <p>La prueba es por etapas. De cada etapa se registra el n\u00famero de etapa, los kil\u00f3metros, la ciudad de salida y la de llegada (con unas breves rese\u00f1as geogr\u00e1ficas, hist\u00f3ricas y econ\u00f3micas) y los puertos por los que pasa la etapa (nombre, altura, categor\u00eda).</p> <p>Se quiere conocer qu\u00e9 ciclista ha ganado en cada puerto y qui\u00e9n ha ganado cada etapa.</p> <p></p> Actividad 208 <p></p>"},{"location":"temas/02/2.A-Actividades.html#ac209-rabd6-ce6b-ce6c-ce6e","title":"AC209. (RABD.6 // CE6b, CE6c, CE6e)","text":"Realiza el modelo ER sobre cine <p>De cada pel\u00edcula le interesar\u00e1 conocer el t\u00edtulo, el a\u00f1o de producci\u00f3n, la nacionalidad, y los datos (nombre, fecha de nacimiento y nacionalidad) de los int\u00e9rpretes (como mucho los 6 int\u00e9rpretes principales), del director y los autores del guion en el que est\u00e1 basada la pel\u00edcula. De este \u00faltimo -el guion- se sabr\u00e1 adem\u00e1s el t\u00edtulo.</p> <p>Tambi\u00e9n desea conocer los posibles Oscars ganados por cada pel\u00edcula en las modalidades de: mejor pel\u00edcula, mejor guion, mejores int\u00e9rpretes y mejor director.</p> <p>Por \u00faltimo, se tendr\u00e1n identificadas las pel\u00edculas que son remakes de otras, conociendo en ese caso, la pel\u00edcula original y los distintos remakes.</p>"},{"location":"temas/02/2.A-Actividades.html#ac210-rabd6-ce6b-ce6c-ce6e","title":"AC210. (RABD.6 // CE6b, CE6c, CE6e)","text":"Realiza el modelo ER sobre una academ\u00eda de ingl\u00e9s <p>Se desea generar una base de datos para almacenar informaci\u00f3n respecto a una academia de ingl\u00e9s.</p> <ul> <li>Personas (Alumnos): Se almacena el <code>expediente</code>, <code>nombre</code>, <code>apellidos</code>, <code>direcci\u00f3n completa</code>, <code>tel\u00e9fono</code> y <code>edad</code>.</li> <li>Grupos: Cada persona se ubica en un grupo en funci\u00f3n de su nivel de ingl\u00e9s. El grupo se identifica por un <code>c\u00f3digo</code> y tendr\u00e1 un <code>n\u00famero de alumnos</code>. Hay un grupo por cada nivel. En cada grupo hay un alumno que es el delegado. Puede haber grupos sin alumnos.</li> <li>Profesores: Hay varios profesores de nacionalidades distintas. Se guarda su <code>DNI</code>, <code>nombre</code>, <code>direcci\u00f3n completa</code>, <code>tel\u00e9fono</code> y <code>nacionalidad</code>.</li> <li>Relaciones clave:<ul> <li>Cada profesor da clase a varios grupos.</li> <li>Cada grupo est\u00e1 formado por varios alumnos.</li> <li>A cada grupo s\u00f3lo le imparte clase un profesor.</li> <li>Debe quedar reflejado cu\u00e1l es el profesor de un determinado alumno (esto se deduce de la relaci\u00f3n grupo-profesor).</li> </ul> </li> </ul>"},{"location":"temas/02/2.A-Actividades.html#ap211-rabd6-ce6b-ce6c-ce6e","title":"AP211. (RABD.6 // CE6b, CE6c, CE6e)","text":"Actividad: REaliza el ER sobre un campeonato de ajedrez que gestiona toda la informaci\u00f3n participantes, alojamientos y partidas <p>En el campeonato participan jugadores y \u00e1rbitros; de ambos se requiere conocer el n\u00famero de asociado, nombre, direcci\u00f3n, tel\u00e9fono de contacto y campeonatos en los que han participado (como jugador o como \u00e1rbitro). De los jugadores se precisa adem\u00e1s el nivel de juego en una escala de 1 a 10. Ning\u00fan \u00e1rbitro puede participar como jugador.</p> <p>Los pa\u00edses env\u00edan al campeonato un conjunto de jugadores y \u00e1rbitros, aunque no todos los pa\u00edses env\u00edan participantes. Todo jugador y \u00e1rbitro es enviado por un \u00fanico pa\u00eds. Un pa\u00eds puede ser representado por otro pa\u00eds. Cada pa\u00eds se identifica por un n\u00famero correlativo seg\u00fan su orden alfab\u00e9tico e interesa conocer adem\u00e1s de su nombre, el n\u00famero de clubes de ajedrez existentes en el mismo.</p> <p>Cada partida se identifica por un numero correlativo (<code>codigop</code>), la juegan dos jugadores y la arbitra un \u00e1rbitro. Interesa registrar las partidas que juegan cada jugador y el color (blancas o negras) con el que juega. Ha de tenerse en cuenta que un \u00e1rbitro no puede arbitrar a jugadores enviados por el mismo pa\u00eds que le ha enviado a \u00e9l. Todo participante participa en al menos una partida.</p> <p>Tanto jugadores como \u00e1rbitros se alojan en uno de los hoteles en los que se desarrollan las partidas, se desea conocer en qu\u00e9 hotel y en qu\u00e9 fechas se ha alojado cada uno de los participantes. Los participantes pueden no permanecer en el mismo hotel que se realiza el campeonato durante todo el campeonato, sino acudir cuando tienen que jugar alguna partida aloj\u00e1ndose en el mismo o distinto hotel. De cada hotel, se desea conocer el nombre, la direcci\u00f3n y el n\u00famero de tel\u00e9fono.</p> <p>El campeonato se desarrolla a lo largo de una serie de jornadas (a\u00f1o, mes, d\u00eda) y cada partida tiene lugar en una de las jornadas aunque no tengan lugar partidas todas las jornadas.</p> <p>Cada partida se celebra en una de las salas de las que pueden disponer los hoteles, se desea conocer el n\u00famero de entradas vendidas en la sala para cada partida. De cada sala, se desea conocer la capacidad y medios de que dispone (radio, televisi\u00f3n, video...) para facilitar la retransmisi\u00f3n de los encuentros. Una sala puede disponer de varios medios distintos.</p> <p>De cada partida se pretende registrar todos los movimientos que la componen. La identificaci\u00f3n de movimiento se establece en base a un numero de orden dentro de cada partida: para cada movimiento se guardan la jugada (5 posiciones) y un breve comentario realizado por un experto.</p>"},{"location":"temas/02/2.A-Actividades.html#ac212-rabd6-ce6b-ce6c-ce6e","title":"AC212. (RABD.6 // CE6b, CE6c, CE6e)","text":"Realiza el modelo ER del siguiente sistema de informaci\u00f3n sobre las cadenas de radio del panorama radiof\u00f3nico <p>De cada cadena conoceremos el nombre, el g\u00e9nero (musical, de noticias, deportiva, ...) y adem\u00e1s, el nombre de las provincias en las que emite, teniendo en cuenta que una cadena puede tener varias emisoras en una misma provincia, cada una de ellas emitiendo en su correspondiente dial.</p> <p>Por otra parte, conoceremos el nombre y la antig\u00fcedad de todos los empleados de cada cadena de radio. De los t\u00e9cnicos conoceremos adem\u00e1s su especialidad (de sonido, de archivo, de mantenimiento, ...) y de los locutores los programas que presentan.</p> <p>Sabremos, para cada programa, su nombre, la hora de inicio, su duraci\u00f3n en minutos y la cadena de radio que lo emite.</p> <p>Hemos de tener en cuenta adem\u00e1s que cada locutor puede presentar un m\u00e1ximo de tres programas distintos y que cada programa es presentado como mucho por cinco locutores.</p> <p>Los programas pueden tener un patrocinador del que conoceremos el nombre y el aporte econ\u00f3mico; distintos programas pueden tener el mismo patrocinador.</p>"},{"location":"temas/02/2.A-Actividades.html#ar213-rabd6-ce6b-ce6c-ce6e","title":"AR213. (RABD.6 // CE6b, CE6c, CE6e)","text":"Realiza el modelo ER del siguiente sistema de informaci\u00f3n sobre la Eurocopa: <p>Nos interesa conocer el nombre de cada selecci\u00f3n y su indumentaria habitual (color de la camiseta, del pantal\u00f3n y las calzas), el nombre del seleccionador y el n\u00famero de a\u00f1os que \u00e9ste lleva en el cargo, y los nombres, n\u00famero de camiseta y posici\u00f3n (portero, defensa, centrocampista, ...) de los 22 jugadores de cada equipo.</p> <p>Adem\u00e1s, se desea almacenar informaci\u00f3n de todos los partidos jugados por cada equipo: la fecha, el lugar, el equipo local y el resultado (n\u00famero de goles del equipo local y del visitante).</p> <p>Tambi\u00e9n, de cada gol marcado, el jugador que lo marca, el portero que lo encaja, el minuto de juego y el tipo de gol (de falta, de penalti, en jugada, etc...).</p>"},{"location":"temas/02/2.A-Actividades.html#ac214-rabd6-ce6b-ce6c-ce6e","title":"AC214. (RABD.6 // CE6b, CE6c, CE6e)","text":"Realiza el modelo ER sobre una Museo <p>Se desea almacenar por cada museo un c\u00f3digo, nombre, provincia, direcci\u00f3n. Cada museo dispone de una serie de salas donde se muestran sus obras; cada sala se identifica con un n\u00famero consecutivo dentro del c\u00f3digo del museo al que pertenece, adem\u00e1s se almacena su ubicaci\u00f3n y tama\u00f1o en metros cuadrados. Cada museo dispondr\u00e1, al menos, de una sala de exposici\u00f3n.</p> <p>Se necesita personal para controlar el sistema, es decir, trabajadores especializados en tres diferentes funciones: personal de vigilancia al cual se le asigna un n\u00famero de control y un n\u00famero de arma, personal de conservaci\u00f3n del cual se registra su funci\u00f3n y personal de gesti\u00f3n para labores administrativas. Para todo el personal es necesario almacenar su DNI y el n\u00famero de la seguridad social. Un trabajador tiene exclusividad en un museo. Cada sala est\u00e1 vigilada siempre por un solo trabajador del \u00e1rea de vigilancia. Cada vigilante tiene su propia sala de vigilancia de la que es responsable, aunque hay vigilantes que se encargan de otras \u00e1reas del museo. A veces, las labores del personal de vigilancia son delicadas, por ello hay un trabajador con funciones de coordinador para cada grupo de vigilantes, aunque no todos los trabajadores tienen coordinador ni todos los trabajadores son coordinadores. No hay m\u00e1s de un coordinador por grupo.</p> <p>Adem\u00e1s, se quiere registrar las visitas del p\u00fablico; con respecto al visitante el DNI, nombre, tel\u00e9fono y el museo o museos que ha visitado en una o varias fechas, teniendo en cuenta que el visitante puede entrar al museo o museos el mismo d\u00eda varias veces en distintas horas. Es necesario registrar dichas fechas y horas.</p> <p>Todos los museos han sido inaugurados, abiertos al p\u00fablico y visitados desde hace tiempo.</p>"},{"location":"temas/02/2.A-Actividades.html#ac215-rabd6-ce6b-ce6c-ce6d-ce6e","title":"AC215. (RABD.6 // CE6b, CE6c, CE6d, CE6e)","text":"A partir del siguiente modelo EER sobre un concurso de cocina Modelo ER Cocina <p>Contesta las siguientes cuestiones justificando tu respuesta:</p> <ol> <li>\u00bfCuantos tipos de concursantes hay? \u00bfPodemos tener m\u00e1s? \u00bfY est\u00e1n relacionados entre s\u00ed?</li> <li>\u00bfQu\u00e9 tipo de relaci\u00f3n existe entre <code>EDICION</code> y <code>PREMIO</code>. \u00bfSe puede repetir el mismo premio en diferentes ediciones?</li> <li>\u00bfPuede ganar el concurso un restaurante que lo dirige un concursante de un pa\u00eds diferente?</li> <li>\u00bfPara qu\u00e9 sirve el atributo <code>contrato</code> de la relaci\u00f3n <code>TRABAJAR</code> entre <code>RESTAURANTE</code> y <code>PROFESIONAL</code></li> <li>Respecto a las recetas, \u00bfpor qu\u00e9 tiene una relaci\u00f3n reflexiva?</li> <li>Si eliminamos la entidad <code>PAIS</code>, \u00bfqu\u00e9 cambios habr\u00eda que hacer en el modelo para que siguiera expresando lo mismo?</li> </ol>"},{"location":"temas/02/2.A-Actividades.html#py216-rabd6-ce6b-ce6c-ce6d-ce6e","title":"PY216. (RABD.6 // CE6b, CE6c, CE6d, CE6e)","text":"Reto I <p>Una vez que ya tenemos unas nociones b\u00e1sicas sobre el modelado conceptual de datos, llega el momento de concretar el sistema de informaci\u00f3n y crear el modelo de datos del Reto I - Dise\u00f1amos de nuestro equipo.</p> <p>Toda soluci\u00f3n debe:</p> <ul> <li>Tener un m\u00ednimo de 6 entidades.</li> <li>Utilizar relaciones con diferentes cardinalidades.</li> <li>Emplear atributos de diferente tipo.</li> <li>(opcional) Utilizar una generalizaci\u00f3n o agregaci\u00f3n.</li> </ul> <p>Se debe entregar un informe con el sistema de informaci\u00f3n, el modelo EER y describir las decisiones tomadas en su elaboraci\u00f3n.</p> <p>Se utilizar\u00e1 una r\u00fabrica para su evaluaci\u00f3n en base a la siguiente lista de cotejo:</p> <ul> <li>Todas las entidades tienen un atributo que las identifica.</li> <li>La nomenclatura es homog\u00e9nea en todo el modelo.</li> <li>Las entidades se nombran en singular y may\u00fasculas.</li> <li>Las relaciones se nombran con verbos en may\u00fasculas.</li> <li>Los atributos se nombran en min\u00fasculas.</li> <li>Todas las relaciones indican la cardinalidad</li> </ul>"},{"location":"temas/02/2.A-Actividades.html#reto-i-disenamos","title":"\ud83e\udde0 Reto I - Dise\u00f1amos","text":"<p>A lo largo de las tres siguientes unidades vamos a desarrollar una base de datos desde cero. Para ello, en equipos de 3-4 personas, y siguiendo un enfoque metodol\u00f3gico de Aprendizaje Colaborativo basado en Retos, cada equipo va a definir:</p> <ul> <li>Un sistema de informaci\u00f3n.</li> <li>El modelo entidad relaci\u00f3n (dise\u00f1o conceptual)</li> <li>El modelo relacional (dise\u00f1o l\u00f3gico)</li> </ul> <p>Si no se os ocurre ning\u00fan sistema de informaci\u00f3n, algunas propuestas que pod\u00e9is dise\u00f1ar son la base de datos de un gimnasio, una academia de idiomas, una biblioteca, un liga amateur de f\u00fatbol/baloncesto o la base de datos de un festival de m\u00fasica.</p> <p>Durante el desarrollo del reto estableceremos diferentes hitos que deber\u00e9is cumplir, a modo de entregables. En cada unidad dedicaremos una o m\u00e1s sesiones a trabajar el reto y compartir el resultado con la clase.</p> <p>En la prueba escrita que realizaremos a finales de la unidad 4 aparecer\u00e1n actividades sobre alguna de las soluciones creadas.</p>"},{"location":"temas/02B/index.html","title":"Inicio","text":""},{"location":"temas/02B/index.html#ut2-b-diseno-logico-modelor-relacional","title":"UT2-B Dise\u00f1o L\u00f3gico: Modelor Relacional","text":"<p>Informaci\u00f3n de la unidad</p> ContenidosPropuesta did\u00e1ctica <p>Bases de datos relacionales:</p> <ul> <li>Modelo de datos.</li> <li>Terminolog\u00eda del modelo relacional.</li> <li>Tipos de datos.</li> <li>Claves primarias.</li> <li>Restricciones de validaci\u00f3n.</li> <li>El valor NULL.</li> <li>Claves ajenas.</li> </ul> <p>Interpretaci\u00f3n de Diagramas Entidad/Relaci\u00f3n:</p> <ul> <li>Elementos del modelo relacional.</li> <li>Restricciones sem\u00e1nticas del modelo relacional.</li> <li>Normalizaci\u00f3n de modelos relacionales.</li> </ul> <p>En esta unidad vamos a comenzar a trabajar el RA6: Dise\u00f1a modelos relacionales normalizados interpretando diagramas entidad/relaci\u00f3n.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>CE6a: Se han utilizado herramientas gr\u00e1ficas para representar el dise\u00f1o l\u00f3gico.</li> <li>CE6b: Se han identificado las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6c: Se han identificado los campos que forman parte de las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6d: Se han analizado las relaciones entre las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6e: Se han identificado los campos clave.</li> <li>CE6f: Se han aplicado reglas de integridad.</li> <li>CE6g: Se han aplicado reglas de normalizaci\u00f3n.</li> </ul>"},{"location":"temas/02B/index.html#contenido-de-la-unidad","title":"Contenido de la unidad","text":"<p>El contenido de la unidad est\u00e1 repartido en los siguientes bloques.</p> <p>\u00cdndice:</p> <ul> <li>2.4 Modelo relacional</li> <li>2.B Actividades</li> </ul>"},{"location":"temas/02B/index.html#programacion-de-aula-9h","title":"Programaci\u00f3n de Aula (9h)","text":"<p>Esta unidad es la segunda, con lo que se imparte en la primera evaluaci\u00f3n, con una duraci\u00f3n estimada de 12 sesiones lectivas:</p> Sesi\u00f3n Contenidos Actividades Criterios trabajados 1 Modelo Relacional AC201.b CE6b, CE6c, CE6d 2 Elementos 3 Restricciones AC203.b CE6b 4 Notacion AC205.b CE6b 5 Interpretando modelos AC209.b CE6b, CE6c, CE6e 6 Diccionario de datos AC208.b CE6b, CE6c, CE6e 7 Dependencias funcionales 8 Formas normales AC209.b CE6b, CE6c, CE6e 9 Desnormalizaci\u00f3n AC210.b CE6b, CE6c, CE6e"},{"location":"temas/02B/2.4-ModeloRelacional.html","title":"2.4 El modelo relacional","text":""},{"location":"temas/02B/2.4-ModeloRelacional.html#24-el-modelo-relacional","title":"2.4. El modelo relacional","text":"<p>Presentaci\u00f3n Modelo Relacional</p> <p>\ud83d\udd25 Fundamental ver: Presentaci\u00f3n en Genially del modelo relacional</p> <p>En la unidad anterior estudiamos que un modelo l\u00f3gico representa de forma conceptual la estructura de una base de datos, pero dependiendo del SGBD a utilizar.</p> Modelo l\u00f3gico <p>Si nuestra elecci\u00f3n es un SGBD relacional, el modelo por excelencia es el modelo relacional. Creado por Codd a finales de los a\u00f1os 60, aunque los primeros SGBD relacionales no aparecieron hasta los 80. Una base de datos modelada mediante el modelo relacional se conoce como una base de datos relacional.</p> <p>Supuso una revoluci\u00f3n en el dise\u00f1o l\u00f3gico de las base de datos, dando lugar a la segunda generaci\u00f3n de SGBD.</p> <p>Es el modelo l\u00f3gico m\u00e1s extendido, y por ende, el mercado de SGBD est\u00e1 copado de soluciones relacionales como Oracle, PostgreSQL, MySQL, SQL Server, etc...</p> <p>Los objetivos del modelo relacional son:</p> <ul> <li>Independencia f\u00edsica<ul> <li>La forma de almacenar los datos no debe influir en su manipulaci\u00f3n l\u00f3gica</li> </ul> </li> <li>Independencia l\u00f3gica<ul> <li>Las aplicaciones que usan el SGBD no deben sufrir una modificaci\u00f3n cuando se modifique una base de datos.</li> </ul> </li> <li>Flexibilidad<ul> <li>Diferentes vistas para diferentes usuarios</li> </ul> </li> <li>Uniformidad</li> <li>Sencillez</li> </ul>"},{"location":"temas/02B/2.4-ModeloRelacional.html#241-elementos","title":"2.4.1 Elementos","text":"<p>El elemento principal es la relaci\u00f3n, que consiste en una tabla que contiene filas y columnas. Una base de datos relacional consiste en un conjunto de tablas relacionadas donde cada tabla tiene un nombre \u00fanico.</p> <p>Las relaciones se conocen como tablas relacionales o m\u00e1s com\u00fanmente como tablas.</p> <p>Cada columna (tambi\u00e9n llamado campo o atributo de la relaci\u00f3n) almacena informaci\u00f3n sobre una propiedad determinada de la tabla, como puede ser el nombre, DNI, apellidos o la edad.</p> <p>Cada fila posee una ocurrencia o ejemplar de la instancia o relaci\u00f3n representada por la tabla (a las filas se las llama tambi\u00e9n tuplas o registros).</p> Elementos de una tabla <p>As\u00ed pues, un ejemplo de una relaci\u00f3n <code>CLIENTE</code> de grado 5 (<code>dni</code>, <code>nombre</code>, <code>direccion</code>, <code>fecha</code> y <code>genero</code>) con 3 tuplas ser\u00eda:</p> dni nombre direcci\u00f3n fecha genero 12345678A Pedro Casas Avenida de la libertad, 23 21/03/24 M 48123456B Mireia Vidal Porta de la Morera, 6 22/03/24 F 34123456C Laura Meca Pla\u00e7a de Baix, s/n 23/03/24 F <p>Como podemos observar, en la cabecera est\u00e1n los nombres de las columnas, y cada fila supone una nueva ocurrencia. Podemos referirnos al campo de una tabla mediante la notaci\u00f3n <code>TABLA.campo</code>, por ejemplo, <code>CLIENTE.nombre</code> referencia el campo <code>nombre</code> de la tabla <code>CLIENTE</code>.</p> <p>En una misma tabla, no podemos repetir el nombre de las columnas, aunque s\u00ed que lo podemos repetir en tablas diferentes. Por ejemplo, <code>CLIENTE.dni</code> y <code>PROVEEDOR.dni</code> ser\u00edan campos de tablas diferentes con el mismo nombre.</p> <p>Una restricci\u00f3n del modelo relacional es que dentro de una tabla no puede haber dos tuplas iguales, ya que implicar\u00eda el mismo dato dos veces. Adem\u00e1s, todas las tuplas deben tener el mismo n\u00famero de campos, aunque alguno est\u00e9 vac\u00edo (se permiten campos con valores nulos).</p> <p>El orden no importa</p> <p>El orden de las tuplas no importa, ni tampoco el orden de los atributos.</p> <p>Dicho esto, esta ser\u00eda otra representaci\u00f3n de la misma tabla:</p> dni direcci\u00f3n genero fecha nombre 34123456C Pla\u00e7a de Baix, s/n F 23/03/24 Laura Meca 48123456B Porta de la Morera, 6 F 22/03/24 Mireia Vidal 12345678A Avenida de la libertad, 23 M 21/03/24 Pedro Casas"},{"location":"temas/02B/2.4-ModeloRelacional.html#dominio","title":"Dominio","text":"<p>El dominio de un atributo indica el tipo de valores para un determinado campo. Dicho de otro modo, cada atributo s\u00f3lo puede tomar un valor en el dominio en el que est\u00e1 inscrito.</p> <p>Si nos basamos en el ejemplo anterior, tendr\u00edamos que los dominios ser\u00edan:</p> <ul> <li><code>dni</code>: 8 d\u00edgitos y una letra.</li> <li><code>nombre</code>: cadena de hasta 32 caracteres.</li> <li><code>direcci\u00f3n</code>: cadena de hasta 64 caracteres.</li> <li><code>fecha</code>: fecha compuesta de <code>dd/mm/yy</code>.</li> <li><code>genero</code>: caracteres <code>M</code>, <code>F</code> o <code>?</code></li> </ul> <p>Como cada atributo s\u00f3lo puede tomar un valor para una misma tupla (los valores de los campos son at\u00f3micos), no podr\u00edamos poner dos DNIs o dos fechas a un mismo cliente.</p> <p>A muy alto nivel, los tipos de datos b\u00e1sicos para los dominios son:</p> <ul> <li>Texto: cadena de caracteres, letras, s\u00edmbolos o n\u00fameros con los que no se realizan operaciones (por ejemplo, un c\u00f3digo postal).</li> <li>Num\u00e9rico: n\u00fameros sobre los cuales se pueden realizar operaciones matem\u00e1ticas.</li> <li>Fecha/hora: fechas, horas, o ambas.</li> <li>Booleano (V/F - S\u00ed/No): datos con dos posibles valores.</li> <li>Autonum\u00e9rico: secuencia (1,2,3,...) que el SGBD incrementa de forma autom\u00e1tica cuando se a\u00f1ade un nuevo registro.</li> </ul> <p>Tipos de dominio</p> <p>Cuando estudiemos el modelo f\u00edsico haremos m\u00e1s hincapi\u00e9 en todos los tipos de dominio existente. De momento, lo m\u00e1s importante es tener claro que todos los valores de un determinado campo en una tabla comparten el mismo dominio.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#claves","title":"Claves","text":"<p>Cada tabla tiene una columna (o en algunos casos un conjunto de columnas) que sirven como clave primaria (PK / primary key). Su prop\u00f3sito es distinguir a una tupla de otra dentro de la tabla.</p> <p>Cada tabla debe tener una clave primaria, la cual es una columna (o conjunto de columnas) cuyo valor es \u00fanico para cada fila.</p> <p>Volvamos al ejemplo anterior sobre la tabla <code>CLIENTE</code>:</p> dni nombre direcci\u00f3n fecha genero 12345678A Pedro Casas Avenida de la libertad, 23 21/03/24 M 48123456B Mireia Vidal Porta de la Morera, 6 22/03/24 F 34123456C Laura Meca Pla\u00e7a de Baix, s/n 23/03/24 F <p>El campo <code>dni</code> funciona como clave primaria de la tabla, ya que no hay dos clientes con el mismo DNI. Pero \u00bfy el campo <code>nombre</code>? Aunque en la tabla no tengamos ahora mismo dos clientes con el mismo nombre, conceptualmente sabemos que se puede dar el caso, y por lo tanto, no ser\u00eda una elecci\u00f3n correcta, ya que el nombre de un cliente no lo identifica de forma univoca.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#clave-subrogada","title":"Clave subrogada","text":"<p>Cuando en una tabla no tengamos una columna que identifique claramente a una tabla, podemos crear una nueva columna num\u00e9rica, normalmente denominada <code>id</code>, que tomas valores secuenciales y autoincrementables, de manera que act\u00faa como una clave sustituta independiente de los valores de negocio, que realmente no tiene un significado por s\u00ed misma.</p> <p>Si a\u00f1adimos una clave subrogada a la tabla <code>CLIENTE</code> tendr\u00edamos:</p> id dni nombre direcci\u00f3n fecha genero 1 12345678A Pedro Casas Avenida de la libertad, 23 21/03/24 M 2 48123456B Mireia Vidal Porta de la Morera, 6 22/03/24 F 3 34123456C Laura Meca Pla\u00e7a de Baix, s/n 23/03/24 F"},{"location":"temas/02B/2.4-ModeloRelacional.html#claves-candidatas","title":"Claves candidatas","text":"<p>Si una tabla tiene m\u00e1s de un campo (o un conjunto de ellos) que pueden identificar un\u00edvocamente a cada tupla de la tabla, se dice que todas las claves posibles son claves candidatas.</p> <p>De entre las claves candidatas, elegiremos una como la clave primaria y el resto ser\u00e1n claves alternativas. As\u00ed pues, una clave alternativa es una clave candidata que no es primaria.</p> <p>Por ejemplo, si pensamos en la tabla <code>ESTUDIANTE</code> podemos definir los siguientes campos: <code>nif</code>, <code>codigo</code>, <code>nombre</code>, <code>fMatricula</code>, <code>direccion</code>. Las claves candidatas ser\u00edan <code>ESTUDIANTE.codigo</code> y <code>ESTUDIANTE.nif</code>, ya que permiten identificar de forma un\u00edvoca a cada estudiante. Si nos decantamos por <code>ESTUDIANTE.codigo</code> como su clave primaria, entonces <code>ESTUDIANTE.nif</code> ser\u00eda una clave alternativa.</p> nif codigo nombre fMatricula direccion 12345678A 1 Pedro Casas 1/9/24 Avenida de la libertad, 23 48123456B 2 Mireia Vidal 1/9/24 Porta de la Morera, 6 34123456C 3 Laura Meca 1/9/24 Pla\u00e7a de Baix, s/n"},{"location":"temas/02B/2.4-ModeloRelacional.html#claves-ajenas","title":"Claves ajenas","text":"<p>Finalmente, tenemos las claves ajenas (FK / foreign key), los cuales son campos cuyos valores referencian a valores de otra tabla.</p> <p>Dentro del modelo relacional, el hecho de relacionar los datos de una tabla con otra es crucial, y se realiza mediante las claves ajenas. As\u00ed pues, la clave ajena de una tabla referencia, normalmente, al valor de la clave primaria de otra tabla. Por ello, los dominios de la clave ajena y de la clave primaria referenciada deben ser iguales (un campo num\u00e9rico no puede referenciar a un campo de texto).</p> <p>Comencemos con el mismo ejemplo que vimos con las relaciones 1:N del modelo conceptual, donde ten\u00edamos que todo producto tiene una categor\u00eda, pero de una categor\u00eda, tenemos muchos productos, el cual representamos as\u00ed:</p> <p>Si lo representamos mediante tablas, podr\u00edamos tener la siguiente estructura:</p> <ul> <li> <p><code>CATEGORIA</code></p> codigo nombre 1 Consola 2 TIC 3 Cocina 4 Bricolaje </li> <li> <p><code>PRODUCTO</code></p> codigo nombre codCategoria<code>*</code> 1 PS5 1 2 Nevera 3 3 Teclado 2 4 XBOX 1 5 Rat\u00f3n 2 6 Volante <code>NULL</code> </li> <li> <p>Representaci\u00f3n de las ocurrencias</p> <p> </p> </li> <li> <p>Representaci\u00f3n relacional</p> <p></p> </li> </ul> <p>Puedes observar como hemos subrayado las claves primaria de cada tabla. \u00bfQu\u00e9 atributo tiene la funci\u00f3n de clave ajena? En este ejemplo, la columna <code>PRODUCTO.codCategoria</code> es una clave ajena que apunta a <code>CATEGORIA.codigo</code> (f\u00edjate que en este caso, al atributo que es clave ajena le hemos puesto un asterisco <code>*</code> tras su nombre). Si revisamos los valores, podemos comprobar como podemos tener valores repetidos y valores nulos, facilitando que de una categor\u00eda tengamos varios productos (categor\u00edas de los productos <code>1</code> y <code>4</code>), que de una categor\u00eda no tengamos productos (la categor\u00eda <code>4</code> no est\u00e1 asociada a ning\u00fan producto) y, aunque el modelo conceptual no representaba dicha cardinalidad, que tengamos productos sin categor\u00eda (como el producto <code>6</code>).</p> <p>Cuando tenemos dos tablas relacionadas mediante una clave ajena, mediante operaciones relacionales que veremos en la Unidad 6, podremos crear una nueva relaci\u00f3n con el resultado de unir una clave ajena con los datos a los que referencia.</p> <p>As\u00ed pues, al unir ambas tablas, obtendr\u00edamos como resultado:</p> PRODUCTO.codigo PRODUCTO.nombre PRODUCTO.codCategoria CATEGORIA.nombre 1 PS5 1 Consola 2 Nevera 3 Cocina 3 Teclado 2 TIC 4 XBOX 1 Consola 5 Rat\u00f3n 2 TIC 6 Volante <code>NULL</code> <code>NULL</code> <p>Veamos otro ejemplo, donde tenemos dos tablas, una para estudiantes (igual que el ejemplo de las claves candidatas) y otra para almacenar qu\u00e9 cursos realizan los estudiantes, similares a las siguientes:</p> <ul> <li> <p><code>ESTUDIANTE</code></p> nif codigo nombre fMatricula direccion 12345678A 1 Pedro Casas 1/9/24 Avenida de la libertad, 23 48123456B 2 Mireia Vidal 1/9/24 Porta de la Morera, 6 34123456C 3 Laura Meca 1/9/24 Pla\u00e7a de Baix, s/n </li> <li> <p><code>CURSAR</code></p> nifEstudiante<code>*</code> asignatura anyo repetidor 12345678A 1 2024 true 48123456B 1 2024 false 12345678A 2 2023 false </li> </ul> <p>El campo <code>CURSAR.nifEstudiante</code> es una clave ajena de la relaci\u00f3n <code>CURSAR</code> y enlaza con la relaci\u00f3n <code>ESTUDIANTE</code> con el campo <code>ESTUDIANTE.nif</code>.</p> <p>Visualmente, lo podemos representar mediante el siguiente gr\u00e1fico:</p> Clave ajena entre ESTUDIANTE y CURSAR <p>Conviene aclarar que un campo puede ser clave primaria y clave ajena a la vez. Adem\u00e1s, una tabla puede tener m\u00e1s de una clave ajena o no tener ninguna. Adem\u00e1s, en el caso de las relaciones reflexivas, la clave ajena de la relaci\u00f3n enlazar\u00e1 con la clave primaria de s\u00ed misma.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#borrado-y-actualizacion","title":"Borrado y actualizaci\u00f3n","text":"<p>Cuanto trabajamos con varias tablas relacionadas mediante claves ajenas y claves primarias, debemos definir las reglas y modificar la clave primaria a la que referencian.</p> <p>Al actualizar/borrar un registro que contiene una clave ajena, se puede:</p> <ul> <li>Rechazar: no se permite el borrado/modificaci\u00f3n</li> <li>Propagar: se borra/modifica el registro, y las tuplas que lo referencian</li> <li>Anular: se borra/modifica el registro y las tuplas que lo referencian ponen a nulo la clave ajena.</li> </ul> <p>Autoevaluaci\u00f3n</p> <p>Si volvemos a la relaci\u00f3n entre <code>ESTUDIANTE</code> y <code>CURSAR</code>, \u00bfqu\u00e9 sucede cuando eliminamos el estudiante <code>12345678A</code>?</p> <ul> <li> <p><code>ESTUDIANTE</code></p> nif codigo nombre fMatricula direccion 12345678A 1 Pedro Casas 1/9/24 Avenida de la libertad, 23 48123456B 2 Mireia Vidal 1/9/24 Porta de la Morera, 6 </li> <li> <p><code>CURSAR</code></p> nifEstudiante<code>*</code> asignatura anyo repetidor 12345678A 1 2024 <code>true</code> 48123456B 1 2024 <code>false</code> 12345678A 2 2023 <code>false</code> </li> </ul> <p>Profundizaremos en las operaciones entre claves ajenas y primarias cuando trabajemos las operaciones DML sobre el modelo f\u00edsico en la Unidad 3.- Lenguaje de definici\u00f3n de datos (DDL).</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#242restricciones-semanticas","title":"2.4.2Restricciones sem\u00e1nticas","text":"<p>A la hora de definir las propiedades de una tabla y sus columnas podemos emplear las siguientes restricciones:</p> <ul> <li>clave primaria: los atributos marcados como clave primaria no puedan repetir valores.</li> <li>unicidad: impide que los valores de los atributos marcados de esa forma puedan repetirse, consider\u00e1ndose un\u00edvocos. A nivel visual se marcan con <code>UK</code>. Vamos a considerar que un atributo <code>UK</code> no permite valores repetidos pero s\u00ed nulos (dependiendo del SGBD, en algunos casos se permiten y en otros no).</li> <li>obligatoriedad (<code>VNN</code>): proh\u00edbe que el atributo marcado de esta forma no tenga ning\u00fan valor (valor no nulo).</li> <li>regla de validaci\u00f3n: condici\u00f3n que debe de cumplir un dato concreto para que sea actualizado.</li> </ul> <p>Adem\u00e1s, podemos definir diferentes restricciones:</p> <ul> <li>a nivel de fila, por ejemplo, de relaci\u00f3n entre columnas, del tipo la fecha de devoluci\u00f3n debe ser posterior a la fecha de pr\u00e9stamo</li> <li>a nivel de conjunto de filas, por ejemplo, un cliente no puede hacer m\u00e1s de 20 pedidos en un d\u00eda</li> <li>a nivel de negocio, del tipo, al insertar un pedido, se debe comprobar si la direcci\u00f3n de env\u00edo es la misma que la direcci\u00f3n del cliente, y en caso de no serlo, a\u00f1adir una nueva direcci\u00f3n al cliente.</li> </ul>"},{"location":"temas/02B/2.4-ModeloRelacional.html#nulos","title":"Nulos","text":"<p>Los valores nulos (<code>NULL</code>) indican contenidos de atributos que no tienen ning\u00fan valor, bien porque la informaci\u00f3n es desconocida o no aplicable. Es decir, m\u00e1s que un valor, es la ausencia de informaci\u00f3n. Algunos SGBD muestran la palabra clave <code>NULL</code>, mientras que otros muestran el campo en blanco.</p> <p>Por ejemplo, si en la tabla <code>ESTUDIANTE</code> tenemos un registro con la direcci\u00f3n nula, est\u00e1 indicando que desconocemos la direcci\u00f3n de <code>Mireia Vidal</code>, no que no tenga direcci\u00f3n.</p> nif codigo nombre fMatricula direccion 12345678A 1 Pedro Casas 1/9/24 Avenida de la libertad, 23 48123456B 2 Mireia Vidal 1/9/24 <code>NULL</code> 34123456C 3 Laura Meca 1/9/24 Pla\u00e7a de Baix, s/n <p>Si el campo es una clave ajena, indica que el registro actual no est\u00e1 relacionado con ninguno.</p> <p>Las bases de datos relacionales admiten utilizar ese valor en todo tipo de operaciones.</p> <p>En cuanto a los campos booleano (V/F), define un tercer valor en la l\u00f3gica, ya que adem\u00e1s del valor verdadero o falso, existe el valor para los nulos.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#integridad-de-entidad","title":"Integridad de entidad","text":"<p>La integridad de entidad define que todas las claves primarias deben tener valor, y, por lo tanto, no admiten valores nulos.</p> <p>Si volvemos a la tabla <code>ESTUDIANTE</code>, no podemos tener ning\u00fan estudiante con el NIF vac\u00edo.</p> <p>Al definir un campo como <code>PK</code> ya estamos declarando que dicho campo no admite valores nulos (ni repetidos por el propio concepto de clave primaria).</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#integridad-referencial","title":"Integridad referencial","text":"<p>Si una relaci\u00f3n R1 posee una clave ajena que la enlaza con la relaci\u00f3n R2, entonces diremos que cumple la restricci\u00f3n de integridad referencial si todo valor de dicha clave ajena de R1 cumple una de las dos condiciones:</p> <ol> <li>coincide con alg\u00fan valor de la clave primaria en la relaci\u00f3n R2</li> <li>toma el valor nulo (<code>NULL</code>)</li> </ol> <p>Es decir, proh\u00edbe colocar valores en una clave ajena que no est\u00e9n reflejados en la clave primaria de la tabla que relaciona.</p> <p>Veamos un ejemplo que no cumple con la integridad referencial. Tengamos los siguientes datos, sabiendo que <code>CURSAR.nifEstudiante</code> es una clave ajena que apunta a <code>ESTUDIANTE.nif</code>:</p> <ul> <li> <p><code>ESTUDIANTE</code></p> nif codigo nombre fMatricula direccion 12345678A 1 Pedro Casas 1/9/24 Avenida de la libertad, 23 48123456B 2 Mireia Vidal 1/9/24 Porta de la Morera, 6 34123456C 3 Laura Meca 1/9/24 Pla\u00e7a de Baix, s/n </li> <li> <p><code>CURSAR</code></p> nifEstudiante<code>*</code> asignatura anyo repetidor 12345678A 1 2024 <code>true</code> 1 2024 <code>false</code> 66666666Z 2 2023 <code>false</code> </li> </ul> <p>El primer fallo que encontramos es que el campo <code>CURSAR.nifEstudiante</code> contiene nulos. Aunque las claves ajenas permiten valores nulos, al tratarse tambi\u00e9n de una clave primaria, estar\u00eda incumpliendo la integridad de entidad.</p> <p>El segundo error es que el valor <code>66666666Z</code> referencia a un estudiante invalido, y este valor s\u00ed que viola la integridad referencial, ya que dicho valor no existe en <code>ESTUDIANTE.nif</code>.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#243-notacion","title":"2.4.3 Notaci\u00f3n","text":"<p>Para representar una tabla en el modelo relaci\u00f3n usaremos una notaci\u00f3n textual que facilita su comprensi\u00f3n y posterior transformaci\u00f3n al modelo f\u00edsico. A esta representaci\u00f3n se le conoce como esquema relacional (o esquema l\u00f3gico/can\u00f3nico).</p> <p>Pondremos el nombre de la tabla en may\u00fasculas, y a continuaci\u00f3n, entre par\u00e9ntesis, enumeraremos los campos mediante su nombre en min\u00fasculas (y opcionalmente su dominio). Como convenci\u00f3n, el primer atributo ser\u00e1 aquel que hace la funci\u00f3n de clave primaria, el cual adem\u00e1s subrayaremos para facilitar la legibilidad, y a aquellos campos que sean claves ajenas les a\u00f1adiremos un asterisco (<code>*</code>) para indicar su condici\u00f3n.</p> <p>Tras el listado de campos, enumeraremos las restricciones, con el siguiente orden:</p> <ol> <li>la clave primaria (<code>PK</code>), con el atributo o conjunto de atributos que identifican un\u00edvocamente a una tupla.</li> <li>las claves ajenas (<code>FK</code>) (si las hubiera), indicando el nombre de la columna, una flecha, y la relaci\u00f3n a la que referencia.</li> <li>el resto de restricciones (<code>UK</code>, <code>VNN</code>, comprobaciones, etc...) (si las hubiera)</li> </ol> <p>M\u00e1s propiedades</p> <p>Un campo puede tener opcionalmente las siguientes propiedades:</p> <ul> <li>Descripci\u00f3n: texto breve que aporta informaci\u00f3n sobre el contenido o la finalidad del campo.</li> <li>Tama\u00f1o: tama\u00f1o m\u00e1ximo permitido.</li> <li>Rango de valores posibles, a modo de enumeraci\u00f3n.</li> <li>Requerido o <code>NOT NULL</code>: no permite valores nulos.</li> <li>Predeterminado (<code>DEFAULT</code>): valor por defecto para cuando no se inserta ning\u00fan valor.</li> </ul> <p>Por ejemplo, un esquema l\u00f3gico en modelo relacional que relaciona un libro con un autor, y un autor con muchos libros (relaci\u00f3n 1:N) podr\u00eda ser el siguiente:</p> <p><code>**AUTOR** (codigo: autonum\u00e9rico, nombre: texto, fnac: fecha, nacionalidad: texto)</code> <code>\u00b7 PK: (codigo)</code></p> <p><code>**LIBRO** (isbn: texto, titulo: texto, descripcion: texto, autor*: num\u00e9rico, editorial: texto, pvp: real)</code> <code>\u00b7 PK: (isbn)</code> <code>\u00b7 FK: (autor) \u2192 AUTOR</code></p> <p>Por legibilidad, vamos a omitir los dominios y representar las tablas \u00fanicamente con el nombre de los campos, y posteriormente, en el diccionario de datos, definiremos sus tipos. De este modo, quedar\u00eda as\u00ed:</p> <p><code>**AUTOR** (codigo, nombre, fnac, pais)</code> <code>\u00b7 PK: (codigo)</code></p> <p><code>**LIBRO** (isbn, titulo, autor*, editorial, pvp)</code> <code>\u00b7 PK: (isbn)</code> <code>\u00b7 FK: (autor) \u2192 AUTOR</code></p> <p>DBML - Database Markup Language</p> <p>Tenemos que el autor se identifica por un c\u00f3digo, el cual es su clave primaria. En cambio, los libros se identifican por su ISBN, y tienen un atributo <code>autor</code> que referencia a la clave primaria de <code>AUTOR</code> (y por tanto, deben tener el mismo dominio). De esta relaci\u00f3n, deducimos que el nombre del atributo de la clave ajena no tiene por qu\u00e9 coincidir con el nombre de la clave primaria, pero s\u00ed su dominio.</p> <p>Si analizamos las cardinalidades de las tablas, tenemos:</p> <ul> <li><code>Card(LIBRO, ESCRIBIR) = (0, 1)</code>: Todo libro tiene un atributo autor, y s\u00f3lo uno, el cual puede estar rellenado o no.</li> <li><code>Card(AUTOR, ESCRIBIR) = (0, N)</code>: Si un libro tiene un atributo autor, y el mismo autor puede aparecer en m\u00e1s de un libro, entonces un autor puede escribir muchos libros (o ninguno, si no aparece en ninguna ocurrencia de <code>LIBRO</code>).</li> </ul> <p>En la pr\u00f3xima unidad estudiaremos el proceso de transformaci\u00f3n de un modelo conceptual a uno relacional, y en concreto, c\u00f3mo se gestionan las claves ajenas para cumplir las cardinalidades y restricciones de las relaciones.</p> <p>La notaci\u00f3n que vamos a emplear en clase es sencilla y cumple su prop\u00f3sito.</p> <p>Dicho esto, desde principio de 2020, gracias a la empresa https://dbdiagram.io/, se est\u00e1 popularizando DBML como un lenguaje de marcado para representar bases de datos.</p> <p>Si quieres profundizar en su uso, es recomendable consultar su sintaxis o puedes probar a generar diagramas en https://dbdiagram.io/.</p> <p>En nuestro caso, por ejemplo, podemos representa las entidades <code>AUTOR</code> y <code>LIBRO</code> del siguiente modo:</p> <pre><code>Table AUTOR {\n    codigo entero [primary key]\n    nombre cadena\n    fnac fecha\n    pais cadena\n}\n\nTable LIBRO {\n    isbn cadena [primary key]\n    titulo cadena\n    autor entero [ref: &gt; AUTOR.codigo]\n    editorial cadena\n    pvp real\n}\n</code></pre> <p>Obteniendo como resultado el diagrama:</p> <p></p> Diagrama AUTOR-LIBRO <p></p> <p>Vamos a crear datos ficticios y comprobaremos si el modelo cumple la relaci\u00f3n de uno a muchos:</p> <ul> <li> <p><code>AUTOR</code></p> codigo nombre fnac pais 1 Brandon Sanderson 19/12/75 USA 2 Juan G\u00f3mez Jurado 16/12/77 Espa\u00f1a 3 J\u00f6el Dicker 16/06/85 Suiza </li> <li> <p><code>LIBRO</code></p> isbn titulo autor<code>*</code> editorial pvp 9788420476841 Un animal salvaje 3 Alfaguara 23,90 9788420414065 La verdad sobre el caso Harry Quebert 3 Alfaguara 23,90 9788491221722 Lazarillo de Tormes <code>NULL</code> Santillana 14,20 9788419260444 Nacidos de la bruma 1 Nova 24,90 </li> </ul> <p>As\u00ed pues, comprobamos que tenemos un autor (el <code>3</code> con dos libros), e incluso un libro sin autor, confirmando la relaci\u00f3n 1:N conforme quer\u00edamos dise\u00f1ar.</p> <p>Cardinalidad de las relaciones</p> <p>Con lo que sabemos hasta ahora, piensa:</p> <ul> <li>\u00bfC\u00f3mo evitamos que la cardinalidad m\u00ednima sea 0 entre LIBRO y AUTOR, es decir, que <code>Card(LIBRO, ESCRIBIR) = (1,1)</code>, de manera que cada libro lo escriba siempre un autor, no permitiendo valores nulos en la clave ajena?</li> <li>\u00bfC\u00f3mo cambiamos la relaci\u00f3n de 1:N a una relaci\u00f3n 1:1, para que cada autor solo pudiera escribir un libro?</li> </ul>"},{"location":"temas/02B/2.4-ModeloRelacional.html#representacion-grafica","title":"Representaci\u00f3n gr\u00e1fica","text":"<p>Aunque ya hemos visto que podemos emplear DBDiagrams para generar un diagrama a partir del esquema l\u00f3gico mediante DBML, tambi\u00e9n podemos emplear diversas herramientas existentes en el mercado, como ERDPlus o MySQLWorbench (m\u00e1s cercano al modelo f\u00edsico), que permiten dibujar los elementos.</p> <p>En nuestro caso, nos vamos a centrar en DBDiagrams, principalmente por ser una herramienta online y que actualmente el lenguaje DBML (Database Markup Language) se est\u00e1 instaurando como el lenguaje de referencia para esta funci\u00f3n.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#diccionario-de-datos","title":"Diccionario de datos","text":"<p>El diccionario de datos de un modelo relacional es un repositorio central que almacena metadatos sobre los elementos de una base de datos.</p> <p>En un sistema de bases de datos relacional, el diccionario de datos incluye detalles sobre las estructuras de las tablas, las relaciones entre las tablas, las columnas, los \u00edndices, las restricciones, los procedimientos almacenados y otros objetos de la base de datos. Es esencialmente un cat\u00e1logo que describe la estructura l\u00f3gica y la organizaci\u00f3n de la base de datos.</p> <p>Las funciones del diccionario de datos son:</p> <ul> <li> <p>Documentaci\u00f3n: Sirve como referencia para desarrolladores y administradores de bases de datos, ayud\u00e1ndoles a entender la estructura y organizaci\u00f3n de la base de datos.</p> </li> <li> <p>Control de integridad: Ayuda a asegurar que las definiciones de las tablas y relaciones se mantengan coherentes y conformes a las reglas establecidas.</p> </li> </ul>"},{"location":"temas/02B/2.4-ModeloRelacional.html#componentes","title":"Componentes","text":"<ol> <li> <p>Tablas y columnas: Describe las tablas en la base de datos, los nombres de las columnas, tipos de datos (los diferentes tipos de datos los estudiaremos en detalle en la unidad 3, tama\u00f1os y si permiten valores nulos.</p> </li> <li> <p>Relaciones y claves: Define las relaciones entre tablas y especifica las claves primarias y ajenas.</p> </li> <li> <p>Restricciones: Incluye detalles sobre restricciones como <code>UNIQUE</code>, <code>CHECK</code>, <code>NOT NULL</code>, y <code>DEFAULT</code>.</p> </li> </ol> <p>Si nos centramos en los modelos f\u00edsicos, podr\u00edamos incluir otros componentes como \u00edndices, vistas, procedimientos almacenados y funciones o triggers, as\u00ed como usuarios y permisos.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#ejemplo","title":"Ejemplo","text":"<p>Para este ejemplo, nos vamos a basar en el mismo ejemplo que hemos utilizado en el apartado de Notaci\u00f3n, donde un <code>AUTOR</code> escribe muchos <code>LIBRO</code>, pero un <code>LIBRO</code> s\u00f3lo lo escribe un <code>AUTOR</code>.</p> <p>Para documentar el diccionario de datos, se utiliza una estructura de tabla con el nombre de la columna, el tipo de datos y una descripci\u00f3n del campo:</p> <ul> <li> <p>Tabla <code>AUTOR</code></p> Columna Tipo de Datos Descripci\u00f3n <code>codigo</code> <code>INT</code> Clave primaria. Identificador \u00fanico del autor. <code>nombre</code> <code>VARCHAR(64)</code> Nombre del autor. <code>fnac</code> <code>DATE</code> Fecha de nacimiento del autor. <code>pais</code> <code>VARCHAR(32)</code> Pa\u00eds de nacimiento del autor. </li> <li> <p>Tabla <code>LIBRO</code></p> Columna Tipo de Datos Descripci\u00f3n <code>isbn</code> <code>INT</code> Clave primaria. Identificador \u00fanico del libro. <code>titulo</code> <code>VARCHAR(64)</code> T\u00edtulo del libro. <code>autor</code> <code>INT</code> Clave for\u00e1nea que referencia a <code>AUTOR.codigo</code>. Indica el autor del libro. <code>editorial</code> <code>VARCHAR(32)</code> Editorial que publica el libro. <code>pvp</code> <code>DECIMAL(10,2)</code> Precio de venta al p\u00fablico del libro. </li> </ul> <p>A continuaci\u00f3n, indicamos las relaciones y restricciones</p> <ul> <li>Clave primaria en <code>AUTOR</code>: <code>codigo</code></li> <li>Clave primaria en <code>LIBRO</code>: <code>isbn</code></li> <li>Clave ajena en <code>LIBRO</code>: <code>autor</code> referencia a <code>codigo</code> en la tabla <code>AUTOR</code>, indicando la relaci\u00f3n entre un libro y su autor.<ul> <li>Restricci\u00f3n de borrado: rechazar.</li> <li>Restricci\u00f3n de modificaci\u00f3n: propagar.</li> </ul> </li> </ul>"},{"location":"temas/02B/2.4-ModeloRelacional.html#244-normalizacion","title":"2.4.4 Normalizaci\u00f3n","text":"<p>Un principio del dise\u00f1o relacional es que \"hechos distintos se deben almacenar en objetos distintos\".</p> <p>Para conseguir este objetivo, la normalizaci\u00f3n es una t\u00e9cnica dentro del dise\u00f1o de bases de datos relacionales que consiste en la separaci\u00f3n de atributos en tablas lo m\u00e1s simples posibles para suprimir dependencias err\u00f3neas entre atributos, reducir la redundancia as\u00ed como optimizar los procesos de inserci\u00f3n, modificaci\u00f3n y borrado en la bases de datos, evitando las anomal\u00edas previamente comentadas, lo que maximiza la integridad de los datos y su consistencia.</p> <p>Podemos simplificar el objetivo de la normalizaci\u00f3n en maximizar la integridad de los datos, reduciendo su redundancia.</p> <p>Para conseguirlo, se basa en el an\u00e1lisis de dependencias entre atributos mediante un proceso que consiste en identificar y aplicar una serie de reglas a las relaciones obtenidas del esquema relacional.</p> <p>Supuesto Comerciales</p> <p>Supongamos los siguientes datos sobre ventas que realizan una serie de comerciales de los cuales tenemos su c\u00f3digo y nombre, su estado laboral (con un c\u00f3digo y una descripci\u00f3n), la ciudad y la provincia donde realizan las ventas, as\u00ed como las poblaciones de dichas ciudades y provincias.</p> comercialID comercialNom estadoID estadoDesc ciudad provincia ciudadPob provinciaPob ventas C1 Carlos Suarez JC Jornada Completa Elche Alicante 230.000 1.800.000 33 C1 Carlos Suarez JC Jornada Completa Denia Alicante 42.000 1.800.000 22 C2 Manoli Campos JC Jornada Completa Elche Alicante 230.000 1.800.000 55 C2 Manoli Campos JC Jornada Completa Aspe Alicante 22.000 1.800.000 44 C3 Carlos Suarez JPM Jornada Partida Ma\u00f1anas Cartagena Murcia 218.000 1.520.000 17 C4 Sonia S\u00e1nchez JPT Jornada Partida Tardes Gand\u00eda Valencia 73.000 2.550.000 27 C5 Marina Vidal JC Jornada Completa Valencia Valencia 807.000 1.800.000 37 C6 Michael Johnson JC Jornada Completa Valencia California 63.000 38.940.000 47 <p>Claramente, tenemos datos redundantes. Si reorganizamos los datos de otra manera podr\u00edamos evitar dependencias.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#anomalias","title":"Anomal\u00edas","text":"<p>Una anomal\u00eda se refiere a una inconsistencia o problema que puede surgir en una base de datos, especialmente cuando no est\u00e1 normalizada. Estas anomal\u00edas pueden manifestarse de diversas maneras, afectando la integridad y consistencia de la informaci\u00f3n almacenada.</p> <p>Los tipos de anomal\u00edas en bases de datos son:</p> <ul> <li>anomal\u00edas de actualizaci\u00f3n: ocurren cuando se intenta actualizar un registro en m\u00faltiples ubicaciones y no todas las copias se actualizan correctamente, generando discrepancias en los datos.</li> <li>anomal\u00edas de inserci\u00f3n: surgen cuando no se puede insertar un nuevo registro en una tabla sin introducir datos redundantes o violar ciertas restricciones. Por ejemplo, si tenemos una tabla que almacena informaci\u00f3n de estudiantes y cursos, si no hay una clave principal que identifique de forma \u00fanica cada registro, se podr\u00edan generar anomal\u00edas al intentar insertar nueva informaci\u00f3n.</li> <li>anomal\u00edas de eliminaci\u00f3n: se producen cuando se elimina informaci\u00f3n importante al intentar eliminar un registro espec\u00edfico, lo que puede llevar a la p\u00e9rdida de datos. Siguiendo con el ejemplo anterior, si se elimina un registro de estudiante y este registro tambi\u00e9n contiene informaci\u00f3n sobre un curso, podr\u00eda perderse la informaci\u00f3n del curso si no se toman precauciones.</li> </ul> <p>Para solucionar las anomal\u00edas, debemos normalizar las tablas.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#dependencias-funcionales","title":"Dependencias funcionales","text":"<p>Antes de entrar a conocer los pasos de la normalizaci\u00f3n, previamente tenemos que definir una serie de conceptos:</p> <ul> <li> <p>Dependencia funcional (DF): es la relaci\u00f3n sem\u00e1ntica existente entre atributos de una misma tabla. Decimos que A \u2192 B, es decir, que B depende funcionalmente de A (o A determina a B), si y solo si para cada valor de A s\u00f3lo puede existir un B.</p> <p>El sentido de la relaci\u00f3n no es bidireccional. Que para una valor de A s\u00f3lo exista un B, no significa que dado B, siempre obtengamos A. Por ejemplo, la dependencia <code>dni \u2192 nombre, apellidos</code> es correcta, ya que tanto el nombre de una persona como sus apellidos dependen funcionalmente de su DNI, pero no al rev\u00e9s. \u00bfDado un nombre de una persona, podemos saber su DNI?</p> </li> </ul> <p>DF - Supuesto Comerciales</p> <p>El primer paso es para cada columna, identificar las dependencias que hay entre los atributos.</p> <p>Por ejemplo, cogemos el nombre del comercial, y detectamos que dependen funcionalmente del identificador del comercial, por lo tanto: <code>comercialID \u2192 comercialNom</code>. Pero si nos fijamos bien en los nombres de los comerciales, no podemos decir lo mismo en el sentido contrario, ya que tenemos un nombre repetido en diferentes c\u00f3digos de comercial (\u00a1qu\u00e9 casualidad!), con lo que no es correcto decir <code>comercialNom \u2192 comercialID</code>.</p> <p>Si hacemos lo mismo con el identificador del estado del comercial, deducimos que depende tambi\u00e9n del identificador, obteniendo <code>comercialID \u2192 estadoID</code>.</p> <p>Y lo mismo con la descripci\u00f3n del estado. En este caso, se cumplen que tanto el identificador del comercial como el identificador del estado permiten obtener la descripci\u00f3n del estado, obteniendo <code>comercialID \u2192 estadoDesc</code> y <code>estadoID \u2192 estadoDesc</code>.</p> <p>Si continuamos con todos los atributos y agrupamos las dependencias funcionales tenemos:</p> <ul> <li><code>comercialID \u2192 comercialNom, estadoID, estadoDesc</code></li> <li><code>estadoID \u2192 estadoDesc</code></li> <li><code>estadoDesc \u2192 estadoID</code></li> <li><code>provincia \u2192 provinciaPob</code></li> <li><code>ciudad, provincia \u2192 ciudadPob</code>, por ejemplo, tenemos dos ciudades <code>Valencia</code> en provincias diferentes</li> <li><code>comercialID , ciudad, provincia \u2192 ventas</code></li> </ul> <p>Tal como hemos comentado previamente, cuando agrupamos los atributos, la dependencia <code>comercialID \u2192 comercialNom, estadoID, estadoDesc</code> significa que tanto el nombre del comercial, como el c\u00f3digo de su estado y el estado dependen del identificador del comercial.</p> <ul> <li> <p>Dependencia funcional completa (DFC): cuando tenemos que A1, A2, ...AN \u2192 B (B tiene una dependencia funcional del conjunto A1, A2, ...AN), pero no de ninguno de sus subconjuntos.</p> <p>Es decir, B depende de la combinaci\u00f3n completa de atributos, y no de un parte de la clave.</p> <p>DFC - Supuesto Comerciales</p> <p>Tenemos que las ventas dependen de la combinaci\u00f3n <code>comercialID, ciudad, provincia</code> y no de un subconjunto de ellas, es decir, <code>comercialID, ciudad, provincia \u2192 ventas</code>.</p> </li> <li> <p>Dependencia funcional transitiva (DFT): se dice que hay un DFT entre A y C, si A \u2192 B y B \u2192 C, siendo B y C columnas no claves. Dicho de otro modo, cuando tenemos columnas no claves que determinan otras columnas no clave.</p> <p>DFT - Supuesto Comerciales</p> <p>Tenemos que <code>comercialID \u2192 comercialNom, estadoID, estadoDesc</code> y que <code>estadoID \u2192 estadoDesc</code>, por lo que tenemos una dependencia transitiva de <code>comercialID</code> a <code>estadoDesc</code>, ya que <code>comercialID \u2192 estadoID \u2192 estadoDesc</code>.</p> </li> </ul> Ejemplos de dependencias funcionales <p>Ejemplo 1: El Gimnasio del Barrio - Entendiendo la Dependencia Funcional</p> <p>En el gimnasio \"Siempre en Forma\", tienen una hoja de c\u00e1lculo para registrar a sus miembros. Es muy sencilla.</p> <p>Tabla: <code>MIEMBROS_GIMNASIO</code></p> ID_Socio Nombre Apellido Fecha_Nacimiento Tipo_Suscripcion SOC-001 Elena Ram\u00edrez 1995-03-15 Mensual SOC-002 Marcos Vidal 1988-11-20 Anual SOC-003 Carla Soler 2001-07-30 Mensual <p>Aqu\u00ed, el <code>ID_Socio</code> es \u00fanico para cada persona. Pensemos como la base de datos:</p> <ul> <li>Si te doy <code>SOC-001</code>, \u00bfpuedes decirme el nombre? S\u00ed, es Elena. No hay duda.<ul> <li><code>ID_Socio -&gt; Nombre</code></li> </ul> </li> <li>Si te doy <code>SOC-001</code>, \u00bfpuedes decirme la <code>Fecha_Nacimiento</code>? S\u00ed, 1995-03-15.<ul> <li><code>ID_Socio -&gt; Fecha_Nacimiento</code></li> </ul> </li> <li>Pero, si te digo que busques a la persona con suscripci\u00f3n \"Mensual\", \u00bfpuedes darme un <code>ID_Socio</code> \u00fanico? No, porque tanto Elena como Carla tienen esa suscripci\u00f3n. Por lo tanto, <code>Tipo_Suscripcion</code> no determina el <code>ID_Socio</code>.</li> </ul> <p>Conclusi\u00f3n del ejemplo: La Dependencia Funcional es una regla de negocio que dice: \"Este valor (o conjunto de valores) me sirve como una 'llave' para encontrar exactamente un solo valor de este otro campo\". Aqu\u00ed, <code>ID_Socio</code> es la llave para todos los dem\u00e1s datos del miembro.</p> <p>Ejemplo 2: La Pizzer\u00eda \"Mamma Mia\" - Descubriendo la Dependencia Funcional Completa vs. Parcial</p> <p>La pizzer\u00eda quiere registrar qu\u00e9 ingredientes extra a\u00f1ade cada cliente a sus pizzas en cada pedido. Su tabla inicial es un desastre.</p> <p>Tabla: <code>EXTRAS_PEDIDO</code></p> Nro_Pedido Pizza_ID Nombre_Pizza Ingrediente_Extra Precio_Extra 1001 P01 Margarita Champi\u00f1ones 1.50 1001 P01 Margarita Aceitunas 1.00 1001 P02 Barbacoa Doble Queso 2.00 1002 P01 Margarita Champi\u00f1ones 1.50 <p>La clave para identificar una l\u00ednea de forma \u00fanica es la combinaci\u00f3n de <code>{Nro_Pedido, Pizza_ID, Ingrediente_Extra}</code>. \u00a1Una clave de tres columnas!</p> <p>Ahora, analicemos qu\u00e9 depende de qu\u00e9:</p> <ol> <li> <p>Dependencia del <code>Precio_Extra</code>: \u00bfCu\u00e1nto cuesta el extra \"Champi\u00f1ones\"? Cuesta 1.50. \u00bfNecesito saber el n\u00famero de pedido para saber eso? No. \u00bfNecesito saber el tipo de pizza? No. El precio del extra solo depende del ingrediente en s\u00ed.</p> <ul> <li><code>Ingrediente_Extra -&gt; Precio_Extra</code> Esta es una dependencia parcial, porque <code>Precio_Extra</code> depende de <code>Ingrediente_Extra</code>, que es solo un trocito de nuestra larga clave primaria.</li> </ul> </li> <li> <p>Dependencia del <code>Nombre_Pizza</code>: Para saber que la \"P01\" es una \"Margarita\", \u00bfnecesito el n\u00famero de pedido o el ingrediente? No, solo necesito el <code>Pizza_ID</code>.</p> <ul> <li><code>Pizza_ID -&gt; Nombre_Pizza</code> Esta es otra dependencia parcial. <code>Nombre_Pizza</code> depende de <code>Pizza_ID</code>, que es otra parte de la clave.</li> </ul> </li> </ol> <p>\u00bfExiste alguna dependencia completa aqu\u00ed? En esta tabla, tal como est\u00e1 dise\u00f1ada, no hay ning\u00fan atributo que necesite las tres partes de la clave para ser determinado. Esto nos indica que el dise\u00f1o es muy deficiente y necesita ser descompuesto. Por ejemplo, si a\u00f1adi\u00e9ramos un campo <code>Comentario_Cliente</code> (\"sin cortar\"), ese campo s\u00ed podr\u00eda depender de la clave completa: <code>{Nro_Pedido, Pizza_ID, Ingrediente_Extra} -&gt; Comentario_Cliente</code>, porque el comentario es espec\u00edfico para un ingrediente en una pizza de un pedido concreto.</p> <p>Conclusi\u00f3n del ejemplo: Una dependencia es completa solo si necesita todos los componentes de la clave compuesta para funcionar. Si le sobra aunque sea uno, es parcial. Las dependencias parciales son una se\u00f1al de alarma que nos grita: \"\u00a1Divide esta tabla!\".</p> <p>Ejemplo 3: La Academia de Idiomas - Identificando la Dependencia Funcional Transitiva</p> <p>La academia \"Polyglot\" registra los cursos en los que se matriculan sus estudiantes.</p> <p>Tabla: <code>MATRICULAS</code></p> ID_Matricula ID_Estudiante Nombre_Estudiante ID_Curso Nivel_Curso ID_Profesor Nombre_Profesor MAT-01 EST-12 Ana Sanz ING-B1 Intermedio PROF-J John Smith MAT-02 EST-15 Luis Prado FRA-A2 B\u00e1sico PROF-S Sophie Dubois MAT-03 EST-12 Ana Sanz FRA-A2 B\u00e1sico PROF-S Sophie Dubois <p>La clave primaria que identifica cada acto de matriculaci\u00f3n es <code>ID_Matricula</code>.</p> <p>Vamos a seguir la cadena de dependencias:</p> <ol> <li> <p><code>ID_Matricula</code> determina el estudiante (<code>ID_Estudiante</code>) y el curso (<code>ID_Curso</code>). \u00a1Correcto!</p> <ul> <li><code>ID_Matricula -&gt; ID_Estudiante</code></li> <li><code>ID_Matricula -&gt; ID_Curso</code></li> </ul> </li> <li> <p>Ahora bien, <code>Nombre_Estudiante</code> no depende directamente de la matr\u00edcula, sino del estudiante.</p> <ul> <li><code>ID_Estudiante -&gt; Nombre_Estudiante</code></li> </ul> </li> <li> <p>Y aqu\u00ed viene lo interesante. El profesor asignado (<code>ID_Profesor</code> y <code>Nombre_Profesor</code>) no depende de la matr\u00edcula en s\u00ed, sino del curso impartido. Cada curso tiene un profesor asignado.</p> <ul> <li><code>ID_Curso -&gt; ID_Profesor</code></li> <li><code>ID_Profesor -&gt; Nombre_Profesor</code></li> </ul> </li> </ol> <p>\u00a1Hemos encontrado la transitividad!</p> <ul> <li><code>ID_Matricula</code> (la clave) -&gt; <code>ID_Curso</code> (atributo no clave)</li> <li><code>ID_Curso</code> (atributo no clave) -&gt; <code>Nombre_Profesor</code> (atributo no clave)</li> </ul> <p>El <code>Nombre_Profesor</code> depende de la <code>ID_Matricula</code>, pero de forma indirecta, a trav\u00e9s del <code>ID_Curso</code>. Esto es una dependencia transitiva.</p> <p>\u00bfCu\u00e1l es el peligro? Si la profesora Sophie Dubois se va de la academia y es reemplazada por \"Pierre Martin\" en el curso FRA-A2, tendr\u00edamos que buscar todas las matr\u00edculas de ese curso (la de Luis, la de Ana y la de cualquier otro alumno) para actualizar el nombre del profesor. Si nos dejamos una sola fila sin actualizar, tendremos datos inconsistentes.</p> <p>Conclusi\u00f3n del ejemplo: La dependencia transitiva es como un \"amigo de un amigo\". Un atributo no clave no deber\u00eda darnos informaci\u00f3n sobre otro atributo no clave. Cada concepto (estudiantes, cursos, profesores) deber\u00eda tener su propia tabla para evitar estas peligrosas dependencias en cadena.</p> <p>El objetivo final de identificar estas dependencias es guiarnos para crear un dise\u00f1o de base de datos normalizado, donde cada pieza de informaci\u00f3n est\u00e9 en su lugar l\u00f3gico y solo en uno.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#formas-normales","title":"Formas Normales","text":"<p>La normalizaci\u00f3n consiste en una serie de pasos, cada uno de los cuales se corresponde a una forma normal (FN). Conforme se va avanzando en la normalizaci\u00f3n, las tablas tienen una estructura m\u00e1s limpia y con menor redundancia.</p> <p>Codd propuso en 1972 tres formas normales, a las que se sum\u00f3 la forma normal de Boyce-Codd en 1974, y luego se a\u00f1adieron dos m\u00e1s por parte de Fagin entre 1977 y 1979. En este curso, nos vamos a centrar en las tres primeras, que cubren la mayor\u00eda de casos con los que nos vamos a encontrar, ya que se considera que una base de datos que est\u00e1 en 3FN es una base de datos correctamente dise\u00f1ada</p> <p>Todas las formas normales se construyen sobre una forma normal previa, de forma que se anidan unas dentro de otras:</p> <ul> <li> <p>1FN: Una relaci\u00f3n est\u00e1 en primera forma normal si, y s\u00f3lo si, todos sus dominios contienen valores at\u00f3micos. Supone la eliminaci\u00f3n de todos los campos multivaluados.</p> <p>Por lo general, si tenemos una tabla de un modelo relacional, por las propias restricciones sem\u00e1nticas del modelo relacional, no deber\u00edamos tener ning\u00fan campo con varios valores, ya que deber\u00edan haberse transformado en relaciones 1:N.</p> <p>1FN - Supuesto Comerciales</p> <p>Como ninguna columna tiene m\u00e1s de un valor, la tabla ya est\u00e1 en 1FN.</p> <p>1FN - Supuesto Comerciales</p> <p>Como ninguna columna tiene m\u00e1s de un valor, la tabla ya est\u00e1 en 1FN.</p> </li> <li> <p>2FN: una relaci\u00f3n est\u00e1 en segunda forma normal si est\u00e1 en 1FN y todas las columnas que no son clave tienen un DFC de la clave primaria.</p> <p>Para ello, descompondremos la tabla en varias subtablas, y comprobaremos que ning\u00fan subconjunto de los atributos no clave determinan campos no principales.</p> <p>Si todas las claves candidatas de las tablas en 1FN son simples (unitarias), autom\u00e1ticamente las tablas ya est\u00e1n en 2FN. En cambio, si la clave primaria es compuesta, deberemos comprobar que todos los atributos dependen de la clave primaria compuesta y no de un subconjunto de esta.</p> 2FN - Supuesto Comerciales <p>Si revisamos las dependencia funcionales, hemos de comprobar que todos los atributos no clave dependan de toda la clave primaria. Para ello, necesitamos crear al menos tres tablas:</p> <p><code>**COMERCIAL** (comercialID, comercialNom, estadoID, estadoDesc)</code> <code>\u00b7 PK: (codigo)</code></p> <p><code>**CIUDAD** (ciudad, provincia, ciudadPob, provinciaPob)</code> <code>\u00b7 PK: (ciudad)</code></p> <p><code>**REGISTRO** (comercialID*, ciudad*, provincia*, ventas)</code> <code>\u00b7 PK: (comercialID, ciudad, provincia)   \u00b7 FK: (comercialID) \u2192 COMERCIAL   \u00b7 FK: (ciudad, provincia) \u2192 CIUDAD</code></p> <p>Dando como resultado las siguientes tablas con datos:</p> <ul> <li> <p><code>COMERCIAL</code></p> comercialID comercialNom estadoID estadoDesc C1 Carlos Suarez JC Jornada Completa C2 Manoli Campos JC Jornada Completa C3 Carlos Suarez JPM Jornada Partida Ma\u00f1anas C4 Sonia S\u00e1nchez JPT Jornada Partida Tardes C5 Marina Vidal JC Jornada Completa C6 Michael Johnson JC Jornada Completa </li> <li> <p><code>CIUDAD</code></p> ciudad provincia ciudadPob provinciaPob Elche Alicante 230.000 1.800.000 Denia Alicante 42.000 1.800.000 Aspe Alicante 22.000 1.800.000 Cartagena Murcia 218.000 1.520.000 Gand\u00eda Valencia 73.000 2.550.000 Valencia Valencia 807.000 1.800.000 Valencia California 63.000 38.940.000 </li> <li> <p><code>REGISTRO</code></p> comercialID<code>*</code> ciudad<code>*</code> provincia<code>*</code> ventas C1 Elche Alicante 33 C1 Denia Alicante 22 C2 Elche Alicante 55 C2 Aspe Alicante 44 C3 Cartagena Murcia 17 C4 Gand\u00eda Valencia 27 C5 Valencia Valencia 37 C6 Valencia California 47 </li> </ul> </li> <li> <p>3FN: 2FN + todo atributo que no es clave primaria no tiene una dependencia funcional transitiva de otro atributo no clave, es decir, depende \u00fanicamente de la clave primaria de modo no transitivo.</p> 3FN - Supuesto Comerciales <p>Ahora revisamos que no haya atributos que dependan de forma transitiva de la clave primaria. Tanto <code>COMERCIAL.estadoDesc</code> como <code>CIUDAD.provinciaPob</code> dependen de forma transitiva de un atributo no que es clave en sus tablas (<code>COMERCIAL.estadoID</code> y <code>CIUDAD.provincia</code>, respectivamente). Es decir, tenemos las DFT <code>comercialID \u2192 estadoID \u2192 estadoDesc</code> y <code>ciudad \u2192 provincia \u2192 provinciaPob</code>.</p> <p>As\u00ed pues, para deshacer las dependencias funcionales transitivas dividimos las tablas <code>COMERCIAL</code> y <code>CIUDAD</code> en dos nuevas tablas (<code>ESTADO</code>y <code>PROVINCIA</code>):</p> <p><code>**ESTADO** (estadoID, estadoDesc)</code> <code>\u00b7 PK: (codigo)</code></p> <p><code>**COMERCIAL** (comercialID, comercialNom, estadoID*)</code> <code>\u00b7 PK: (codigo)   \u00b7 FK: (estadoID) \u2192 ESTADO</code> <code>**PROVINCIA** (provincia, provinciaPob)</code> <code>\u00b7 PK: (provincia)</code></p> <p><code>**CIUDAD** (ciudad, provincia*, ciudadPob)</code> <code>\u00b7 PK: (ciudad)   \u00b7 FK: (provincia) \u2192 PROVINCIA</code></p> <p><code>**REGISTRO** (comercialID*, ciudad*, provincia*, ventas)</code> <code>\u00b7 PK: (comercialID, ciudad, provincia)</code> <code>\u00b7 FK: (comercialID) \u2192 COMERCIAL</code> <code>\u00b7 FK: (ciudad, provincia) \u2192 CIUDAD</code></p> <p>Dando como resultado las siguientes tablas con datos:</p> <ul> <li> <p><code>ESTADO</code></p> estadoID estadoDesc JC Jornada Completa JPM Jornada Partida Ma\u00f1anas JPT Jornada Partida Tardes </li> <li> <p><code>COMERCIAL</code></p> comercialID comercialNom estadoID<code>*</code> C1 Carlos Suarez JC C2 Manoli Campos JC C3 Carlos Suarez JPM C4 Sonia S\u00e1nchez JPT C5 Marina Vidal JC C6 Michael Johnson JC </li> <li> <p><code>PROVINCIA</code></p> provincia provinciaPob Alicante 1.800.000 Murcia 1.520.000 Valencia 2.550.000 California 38.940.000 </li> <li> <p><code>CIUDAD</code></p> ciudad provincia<code>*</code> ciudadPob Elche Alicante 230.000 Denia Alicante 42.000 Aspe Alicante 22.000 Cartagena Murcia 218.000 Gand\u00eda Valencia 73.000 Valencia Valencia 807.000 Valencia California 63.000 </li> <li> <p><code>REGISTRO</code></p> comercialID<code>*</code> ciudad<code>*</code> provincia<code>*</code> ventas C1 Elche Alicante 33 C1 Denia Alicante 22 C2 Elche Alicante 55 C2 Aspe Alicante 44 C3 Cartagena Murcia 17 C4 Gand\u00eda Valencia 27 C5 Valencia Valencia 37 C6 Valencia California 47 </li> </ul> <p>El problema de la 3FN es que no maneja relaciones que:</p> <ul> <li>Tienen varias claves candidatas,</li> <li>Esas claves candidatas son compuestas, y</li> <li>Las claves candidatas tienen por lo menos un atributo en com\u00fan. </li> </ul> </li> <li> <p>FNBC: Es una mejora de la 3FN donde, si tenemos m\u00e1s de una clave candidata y estas son compuestas y comparten alg\u00fan atributo entonces, ning\u00fan atributo, sea clave o no, puede depender de algo que no sea la clave primaria.</p> <p>Si la clave no es compuesta y no existe m\u00e1s de una clave candidata (s\u00f3lo tenemos la clave primaria), la FNBC es equivalente a la 3FN.</p> <p>El objetivo de la FNBC es asegurar que cada dato de una tabla depende \u00fanicamente de una clave real y completa, y no de otra cosa.</p> FNBC - Supuesto Comerciales <p>En nuestro caso, no tenemos m\u00e1s de una clave candidata, por lo que la FNBC es equivalente a la 3FN.</p> </li> </ul> <p>En resumen</p> <p>En la pr\u00e1ctica, cuando todas las tablas est\u00e1n en FNBC, se puede considerar que la base de datos est\u00e1 totalmente normalizada. Una tabla en FNBC ya est\u00e1 desde 1FN hasta 3FN y tiene las siguientes caracter\u00edsticas:</p> <ul> <li>Tiene una clave primaria.</li> <li>No tiene columnas multivaluadas.</li> <li>Todas las columnas dependen de una clave pero nada m\u00e1s.</li> <li>No contiene ninguna dependencia transitiva.</li> </ul> <p></p> Proceso de normalizaci\u00f3n <p></p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#ejemplo-paso-a-paso","title":"Ejemplo Paso a Paso","text":"Ejemplo 1: Paso a paso. Consultora de software <p>Una peque\u00f1a consultora de software, \"C\u00f3digo Veloz\", registra los datos de los proyectos en una \u00fanica tabla. Vuestro objetivo es sanear y normalizar esta tabla para evitar problemas de redundancia e inconsistencia.</p> <p>Normalizaci\u00f3n de una Tabla de Proyectos</p> <p>Una peque\u00f1a consultora de software, \"C\u00f3digo Veloz\", registra los datos de los proyectos en una \u00fanica tabla. Vuestro objetivo es sanear y normalizar esta tabla para evitar problemas de redundancia e inconsistencia.</p> <p>La Tabla Inicial: <code>PROYECTOS_DESORDENADOS</code></p> ID_Proyecto Nombre_Proyecto ID_Empleado Nombre_Empleado Horas_Trabajadas ID_Departamento Jefe_Departamento Salario_Base_Empleado P100 App M\u00f3vil E01 Juan P\u00e9rez 100 D01 Ana Torres 40.000 P100 App M\u00f3vil E02 Mar\u00eda Sol 80 D01 Ana Torres 55.000 P200 Web Cliente E01 Juan P\u00e9rez 120 D01 Ana Torres 40.000 P300 Sistema IA E03 Luis Rey 90 D02 Pedro Soto 60.000 <p>Paso 0: Identificaci\u00f3n de Dependencias y Clave</p> <p>Antes de empezar, asumimos que esta tabla ya est\u00e1 en Primera Forma Normal (1FN), pues no hay grupos repetitivos ni atributos multivaluados (cada celda contiene un solo valor at\u00f3mico).</p> <ol> <li> <p>Clave Primaria (CP): Para identificar de forma \u00fanica cada fila (es decir, las horas que un empleado dedic\u00f3 a un proyecto), necesitamos la combinaci\u00f3n: <code>{ID_Proyecto, ID_Empleado}</code>.</p> </li> <li> <p>Dependencias Funcionales (DFs) Observadas:</p> <ul> <li><code>ID_Proyecto -&gt; Nombre_Proyecto</code> (El ID del proyecto determina su nombre).</li> <li><code>ID_Empleado -&gt; Nombre_Empleado, ID_Departamento, Salario_Base_Empleado</code> (El ID del empleado determina sus datos personales y salariales).</li> <li><code>ID_Departamento -&gt; Jefe_Departamento</code> (El departamento determina qui\u00e9n es su jefe).</li> </ul> </li> </ol> <p>Paso 1: De 1FN a 2FN (Eliminar Dependencias Parciales)</p> <p>REGLA DE LA 2FN: Todos los atributos no clave deben ser completamente dependientes de toda la Clave Primaria.</p> <p>Identificando las dependencias parciales:</p> <ol> <li><code>ID_Proyecto -&gt; Nombre_Proyecto</code>: El nombre del proyecto depende solo de <code>ID_Proyecto</code> (una parte de la clave). Dependencia Parcial.</li> <li><code>ID_Empleado -&gt; Nombre_Empleado, ID_Departamento, Salario_Base_Empleado</code>: Los datos del empleado dependen solo de <code>ID_Empleado</code> (otra parte de la clave). Dependencia Parcial.</li> </ol> <p>Acci\u00f3n: Descomponer la tabla para eliminar las dependencias parciales.</p> <p>Tabla 1.1: <code>ASIGNACION_PROYECTO</code> (Retiene la clave primaria original y los atributos que dependen de ella de forma COMPLETA). *   DF Remanente: <code>{ID_Proyecto, ID_Empleado} -&gt; Horas_Trabajadas</code> *   CP: <code>{ID_Proyecto, ID_Empleado}</code></p> ID_Proyecto ID_Empleado Horas_Trabajadas P100 E01 100 P100 E02 80 P200 E01 120 P300 E03 90 <p>Tabla 1.2: <code>PROYECTOS</code> (Extrae la informaci\u00f3n que solo depende de <code>ID_Proyecto</code>). *   DF Remanente: <code>ID_Proyecto -&gt; Nombre_Proyecto</code> *   CP: <code>{ID_Proyecto}</code></p> ID_Proyecto Nombre_Proyecto P100 App M\u00f3vil P200 Web Cliente P300 Sistema IA <p>Tabla 1.3: <code>EMPLEADOS</code> (Extrae la informaci\u00f3n que solo depende de <code>ID_Empleado</code>). *   DF Remanente: <code>ID_Empleado -&gt; Nombre_Empleado, ID_Departamento, Salario_Base_Empleado</code> *   CP: <code>{ID_Empleado}</code></p> ID_Empleado Nombre_Empleado ID_Departamento Jefe_Departamento Salario_Base_Empleado E01 Juan P\u00e9rez D01 Ana Torres 40.000 E02 Mar\u00eda Sol D01 Ana Torres 55.000 E03 Luis Rey D02 Pedro Soto 60.000 <p>Resultado: Las tres tablas est\u00e1n ahora en 2FN.</p> <p>Paso 2: De 2FN a 3FN (Eliminar Dependencias Transitivas)</p> <p>REGLA DE LA 3FN: No debe existir ninguna dependencia funcional transitiva. Un atributo no clave no puede depender de otro atributo no clave.</p> <p>Identificando las dependencias transitivas:</p> <p>Revisamos las tablas 1.1 y 1.2 (que ya est\u00e1n perfectas) y nos centramos en la Tabla 1.3: <code>EMPLEADOS</code>.</p> <ul> <li>DF Observada: <code>ID_Departamento -&gt; Jefe_Departamento</code></li> <li>An\u00e1lisis:<ul> <li><code>ID_Empleado</code> es la clave primaria.</li> <li><code>ID_Departamento</code> es un atributo no clave.</li> <li><code>Jefe_Departamento</code> es un atributo no clave.</li> <li>El <code>Jefe_Departamento</code> depende de <code>ID_Departamento</code>, que a su vez depende de la clave primaria (<code>ID_Empleado</code>). \u00a1Dependencia Transitiva!</li> <li><code>ID_Empleado -&gt; ID_Departamento -&gt; Jefe_Departamento</code></li> </ul> </li> </ul> <p>Acci\u00f3n: Crear una nueva tabla para romper la cadena transitiva.</p> <p>Tabla 2.1: <code>DEPARTAMENTOS</code> (Extrae la informaci\u00f3n de la dependencia transitiva).</p> <ul> <li>DF Remanente: <code>ID_Departamento -&gt; Jefe_Departamento</code></li> <li>CP: <code>{ID_Departamento}</code></li> </ul> ID_Departamento Jefe_Departamento D01 Ana Torres D02 Pedro Soto <p>Tabla 2.2: <code>EMPLEADOS_NORMALIZADOS</code> (Actualiza la tabla de empleados).</p> <ul> <li>DF Remanente: <code>ID_Empleado -&gt; Nombre_Empleado, ID_Departamento, Salario_Base_Empleado</code></li> <li>CP: <code>{ID_Empleado}</code></li> </ul> ID_Empleado Nombre_Empleado ID_Departamento Jefe_Departamento Salario_Base_Empleado E01 Juan P\u00e9rez D01 Ana Torres 40.000 E02 Mar\u00eda Sol D01 Ana Torres 55.000 E03 Luis Rey D02 Pedro Soto 60.000 <p>Resultado: Ahora tenemos cuatro tablas (ASIGNACION_PROYECTO, PROYECTOS, DEPARTAMENTOS, EMPLEADOS_NORMALIZADOS) que est\u00e1n en 3FN.</p> <p>Paso 3: De 3FN a FNBC (Boyce-Codd)</p> <p>REGLA DE LA FNBC: Para cada dependencia funcional no trivial $X \\rightarrow A$, $X$ debe ser una superclave (o sea, una clave candidata o un conjunto de atributos que la contienen).</p> <p>En la mayor\u00eda de los casos de la vida real, si una tabla est\u00e1 en 3FN, tambi\u00e9n lo estar\u00e1 en FNBC. La FNBC solo es m\u00e1s estricta cuando existen m\u00faltiples claves candidatas que se solapan.</p> <p>Identificando la posibilidad de FNBC:</p> <p>Revisamos las cuatro tablas para buscar dependencias donde el determinante ($X$) no sea una superclave:</p> <ol> <li><code>ASIGNACION_PROYECTO</code>: DF: <code>{ID_Proyecto, ID_Empleado} -&gt; Horas_Trabajadas</code>. El determinante es la CP. OK.</li> <li><code>PROYECTOS</code>: DF: <code>ID_Proyecto -&gt; Nombre_Proyecto</code>. El determinante es la CP. OK.</li> <li><code>DEPARTAMENTOS</code>: DF: <code>ID_Departamento -&gt; Jefe_Departamento</code>. El determinante es la CP. OK.</li> <li><code>EMPLEADOS_NORMALIZADOS</code>: DF: <code>ID_Empleado -&gt; Nombre_Empleado, ID_Departamento, Salario_Base_Empleado</code>. El determinante es la CP. OK.</li> </ol> <p>\u00a1PERO ESPERA! \u00bfQu\u00e9 pasar\u00eda si la regla de negocio fuera: Cada Salario Base determina un Nivel de Empleado, y solo los Jefes de Departamento pueden tener un Nivel 5?</p> <ul> <li>Si a\u00f1adi\u00e9ramos un atributo <code>Nivel_Empleado</code> a la tabla <code>EMPLEADOS_NORMALIZADOS</code> y existiera la DF: <code>Salario_Base_Empleado -&gt; Nivel_Empleado</code> (donde $X$ no es la clave), esto podr\u00eda forzarnos a aplicar FNBC.</li> </ul> <p>Ejemplo Hipot\u00e9tico para romper FNBC (No aplica al caso anterior, pero es did\u00e1ctico):</p> <p>Imaginemos que en la tabla de empleados existe una regla donde el Nombre del Empleado debe ser \u00fanico. Tendr\u00edamos dos claves candidatas: <code>ID_Empleado</code> y <code>Nombre_Empleado</code>.</p> <ul> <li>Claves Candidatas (CC): <code>{ID_Empleado}</code> y <code>{Nombre_Empleado}</code></li> <li>DFs: <code>ID_Empleado -&gt; Nombre_Empleado</code> y <code>Nombre_Empleado -&gt; ID_Empleado</code></li> </ul> <p>Si existiera la DF: <code>Nombre_Empleado -&gt; Salario_Base_Empleado</code>. El determinante (<code>Nombre_Empleado</code>) es una clave candidata (Superclave). Por lo tanto, sigue estando en FNBC.</p> <p>Conclusi\u00f3n del ejercicio: En este caso pr\u00e1ctico, al llegar a la 3FN hemos satisfecho todos los requisitos de la FNBC.</p> <p>RESUMEN FINAL DE LAS TABLAS NORMALIZADAS (FNBC)</p> Tabla Clave Primaria (CP) Atributos Dependencias Funcionales ASIGNACION_PROYECTO <code>{ID_Proyecto, ID_Empleado}</code> <code>Horas_Trabajadas</code> Completa: <code>{ID_Proyecto, ID_Empleado} -&gt; Horas_Trabajadas</code> PROYECTOS <code>ID_Proyecto</code> <code>Nombre_Proyecto</code> <code>ID_Proyecto -&gt; Nombre_Proyecto</code> DEPARTAMENTOS <code>ID_Departamento</code> <code>Jefe_Departamento</code> <code>ID_Departamento -&gt; Jefe_Departamento</code> EMPLEADOS <code>ID_Empleado</code> <code>Nombre_Empleado, ID_Departamento, Salario_Base_Empleado</code> <code>ID_Empleado -&gt; Nombre_Empleado, ID_Departamento, Salario_Base_Empleado</code> <p>\u00a1Con esto, hemos pasado de una tabla redundante y propensa a errores a un modelo relacional s\u00f3lido, limpio y eficiente! Recordad, la normalizaci\u00f3n es la clave para la integridad de vuestros datos.</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#desnormalizacion","title":"Desnormalizaci\u00f3n","text":"<p>El concepto de desnormalizar un modelo relacional consiste en transformar una base de datos a una forma normal menor, siempre con el objetivo de mejorar el rendimiento de las operaciones de consulta de datos, a costa de aceptar cierta redundancia de datos</p> <p>Por ejemplo, podemos unir varias relaciones en una si se usan juntas frecuentemente mediante operaciones join.</p> <p>Adem\u00e1s del rendimiento en las consultas, podemos desnormalizar nuestros modelos para simplificar el esquema o reducir la complejidad de ciertas consultas.</p> <p>Un caso muy com\u00fan es unir los datos de dos tablas que tienen una relaci\u00f3n 1:1 en una \u00fanica tabla (siempre que la sem\u00e1ntica de las relaciones lo permita).</p>"},{"location":"temas/02B/2.4-ModeloRelacional.html#referencias","title":"Referencias","text":"<ul> <li> <p>Herramienta gr\u00e1fica ERDPlus para la realizaci\u00f3n de diagramas de modelos relacionales.</p> </li> <li> <p>Materiales sobre el m\u00f3dulo de BD:</p> <ul> <li>Model Relacional - Institut Obert de Catalunya</li> <li>Modelo Relacional de Jorge S\u00e1nchez</li> <li>Bases de datos relacionales de Javier Guti\u00e9rrez</li> <li>Dise\u00f1o de modelo l\u00f3gicos normalizados de gestionbasesdatos.readthedocs.io</li> <li>Dise\u00f1o l\u00f3gico y Normalizaci\u00f3n de la Universidad de Sevilla</li> </ul> </li> </ul>"},{"location":"temas/02B/2.B-Actividades.html","title":"Actividades","text":""},{"location":"temas/02B/2.B-Actividades.html#ut2-b-actividades","title":"UT2-B. Actividades","text":""},{"location":"temas/02B/2.B-Actividades.html#actividades","title":"Actividades","text":""},{"location":"temas/02B/2.B-Actividades.html#ac201b","title":"AC201.B","text":"Ejercicio AC201.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6b, CE6c // 3p <p>Analiza la siguiente tabla EMPLEADO y enumera todos los errores que encuentres. A continuaci\u00f3n, aporta una soluci\u00f3n para cada uno de ellos. Finalmente, analiza las claves existentes:</p> dni nombre genero direccion fAlta casado nombre codEmpleado 12345678A Guillem Vidal M C Mayor, 5 11/1/24 N 1 12345679B Guillem Vidal M C Illueca, 26 21/1/24 N 2 12345670C, 12345671D Juan y Mar\u00eda S\u00e1nchez M,F C Illueca, 26 31/1/24 S,N Ana 3,4 98765431X Ana Fern\u00e1ndez F 30/2/24 S \u00d3scar X2 98765432Z Domingo Gallardo M Avda Alicante, 12 Lunes S Mar\u00eda siete 98765430Y M\u00f3nica Reig F 03206 3/2/24 S 99"},{"location":"temas/02B/2.B-Actividades.html#ac202b","title":"AC202.B","text":"Ejercicio AC202.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6d, CE6c // 3p <p>Indica si las siguientes afirmaciones son verdaderas o falsas y justifica la respuesta:</p> <ul> <li>La uni\u00f3n de todos los campos de una relaci\u00f3n siempre funciona como clave de la relaci\u00f3n.</li> <li>Toda relaci\u00f3n tiene clave primaria.</li> <li>Toda relaci\u00f3n posee, al menos, una clave ajena.</li> <li>Un campo que pertenece a la clave primaria de una relaci\u00f3n puede tomar el valor <code>NULL</code>.</li> <li>Un campo que pertenece a una clave ajena de una relaci\u00f3n puede tomar el valor <code>NULL</code>.</li> <li>Un mismo campo puede funcionar a la vez como clave primaria y como clave ajena de una relaci\u00f3n.</li> <li>Una clave ajena puede enlazar una relaci\u00f3n consigo misma.    |</li> </ul>"},{"location":"temas/02B/2.B-Actividades.html#ac203b","title":"AC203.B","text":"Ejercicio AC203.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6f // 3p <p>A partir de los datos de las siguientes tablas, identifica todos los problemas con las restricciones sem\u00e1nticas asociadas al modelo relacional y aporta soluciones de c\u00f3mo resolverlas, sabiendo que las PK son <code>PRODUCTO.codigo</code>y <code>CATEGORIA.codigo</code>, y tenemos una clave ajena de <code>PRODUCTO.categoria</code> que apunta a <code>CATEGORIA</code>.</p> <ul> <li> <p><code>PRODUCTO</code></p> codigo nombre cantidad pvp categoria<code>*</code> 101 Televisor LED 42\" -5 299.99 1 102 Lavadora XYZ 010 abc 2 102 LEGO Batman tres 299.99 3 105 Pelota de f\u00fatbol 299.99 <code>NULL</code> 099 Escritorio 8 299.99 5 </li> <li> <p><code>CATEGORIA</code></p> codigo nombre descr 1 Electr\u00f3nica Productos electr\u00f3nicos de consumo 2 Hogar y cocina <code>NULL</code> Juguetes y Juegos Accesorios y juguetes para ni\u00f1os 4 Deportes Art\u00edculos deportivos y outdoor 4 Deportes Productos de oficina y papeler\u00eda </li> </ul> <p>Indica las restricciones sem\u00e1ticas que aplicar\u00edas para resolver los problemas.</p>"},{"location":"temas/02B/2.B-Actividades.html#ac204b","title":"AC204.B","text":"Ejercicio AC204.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6f // 3p <p>A partir de los datos de la siguiente tabla de <code>COMERCIAL</code>, identifica todas las claves y restricciones posibles:</p> dni codigo nombre genero direccion fAlta codPareja 12345679B 10 Ana Vidal F C Illueca, 26 21/1/24 12345670C 20 Lara S\u00e1nchez M C Almassera, 15 31/1/24 3 98765431X 30 Ana Fern\u00e1ndez F 13/2/24 7 98765432Z 40 Domingo Gallardo M Avda Alicante, 12 23/2/24 98765430Y 50 Ana Vidal F C Eugeni D'Ors 5 3/3/24 6 12345678A 60 Guillem Vidal M C Mayor, 5 11/1/24 2 <p>Genera el modelo relacional con https://dbdiagram.io/ identificando las claves y restricciones.</p>"},{"location":"temas/02B/2.B-Actividades.html#ac205b","title":"AC205.B","text":"Ejercicio AC205.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6b, CE6c // 3p <p>Crea las tablas necesarias con datos ficticios (con al menos 5 registros cada tabla) que respete las restricciones sem\u00e1nticas del modelo relacional a partir del siguiente esquema relacional:</p> <p><code>**EMPLEADO** (nif, nombre, direccion, cargo)</code> <code>\u00b7 PK: (nif)</code> <code>\u00b7 VNN: (nombre)</code> <code>**VEHICULO** (matricula, codigo, marca, modelo, empleado*)</code> <code>\u00b7 PK: (matricula)</code> <code>\u00b7 FK: (empleado) \u2192 EMPLEADO</code> <code>\u00b7 VNN (empleado)</code> <code>\u00b7 UK (codigo)</code></p> <p>Donde <code>*</code> indica clave ajena y <code>VNN</code> indica que el campo no puede tomar valores nulos.</p> <p>Para mostrar las diferentes restricciones del modelo debes tener en cuenta las cardinalidades de la relaci\u00f3n, los posibles valores repetidos o nulos de los campos, etc...</p> <p>Utiliza https://dbdiagram.io/ para crearlo.</p>"},{"location":"temas/02B/2.B-Actividades.html#ap206b","title":"AP206.B","text":"Ejercicio AP206.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6d, CE6f // 3p <p>A partir del siguiente esquema relacional, crea tres tablas con datos ficticios, y explica el tipo de relaci\u00f3n existente entre los campos y las tablas relacionadas (cardinalidad):</p> Esquema relacional Restricciones Conductor (nif, nombre, fAlta) PK: (nif) Conducir (nif, matricula, cantidad) PK: (nif, matricula) Autobus (matricula, tipo, numPlazas) PK: (matricula) <p>Genera el diagrama de tablas con https://dbdiagram.io/. Copia el diagrama al ejercicio e indica los tipos de relaci\u00f3n existentes.</p>"},{"location":"temas/02B/2.B-Actividades.html#ar207b","title":"AR207.B","text":"Ejercicio AR207.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6d, CE6e, CE6f // 3p <p>A partir de las tablas de la actividad AC303, crea el esquema relacional.</p> <p>A continuaci\u00f3n, crea una nueva tabla <code>PROVEEDOR</code> con datos asociados a esta nueva relaci\u00f3n, y actualiza el esquema relacional para que est\u00e9n las tres tablas relacionadas.</p>"},{"location":"temas/02B/2.B-Actividades.html#ar208b","title":"AR208.B","text":"Ejercicio AR208.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6b, CE6f // 3p <p>A partir del siguiente diagrama, crea el esquema relacional. Indica las restriciones en el diagrama.</p> <p></p> Actividad 208.B <p></p>"},{"location":"temas/02B/2.B-Actividades.html#ac209b","title":"AC209.B","text":"Ejercicio AC209.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6d // 3p Actividad 209.B <p>Contesta a las siguientes preguntas argumentado tus respuestas:</p> <ol> <li>\u00bfPuede un <code>PEDIDO</code> contener m\u00e1s de un <code>PRODUCTO</code>?</li> <li>\u00bfPodemos obtener cuales son las categor\u00edas de los productos con m\u00e1s pedidos?</li> <li>Si quisi\u00e9ramos obtener cuales son las provincias de los clientes donde se realizan m\u00e1s pedidos \u00bfqu\u00e9 deber\u00edamos a\u00f1adir?</li> <li>\u00bfPodemos tener dos proveedores con el mismo nombre?</li> <li>\u00bfTodo <code>PRODUCTO</code> obligatoriamente pertenecer\u00e1 a una <code>CATEGORIA</code>?</li> <li>Cuando en un pedido compramos dos producto diferentes \u00bfCuantas <code>LINEA_PEDIDO</code> necesitamos? \u00bfY si son del mismo producto?</li> </ol> <p>(Utiliza una fila de la tabla del ejercicio, una para la pregunta, y otra para la respusta)</p> <p>Genera el diagrama de tablas con https://dbdiagram.io/ e incluye las restricciones que aparezcan en el diagrama. Copia el diagrama en el ejercicio.</p>"},{"location":"temas/02B/2.B-Actividades.html#ar210b","title":"AR210.B","text":"Ejercicio AC210.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6d // 3p Actividad 210.B <p>Contesta a las siguientes preguntas justificando tus respuestas:</p> <ol> <li>\u00bfPuede un hotel estar en m\u00e1s de un punto?</li> <li>Dada una ciudad, \u00bfCu\u00e1ntos hoteles podemos tener?</li> <li>\u00bfPodemos tener dos rutas con el mismo nombre?</li> <li>\u00bfDe cuantos tipos puede ser una ruta? \u00bfY toda ruta debe tener un tipo?</li> <li>\u00bfPodemos tener hoteles que no pertenezcan a ning\u00fan viaje? \u00bfY al rev\u00e9s?, es decir, \u00bfPodemos tener viajes sin hotel incluido?</li> <li>Si en un determinado viaje no est\u00e1 incluido el hotel, \u00bfPuede haber m\u00e1s de una ruta?</li> </ol> <p>A continuaci\u00f3n, a\u00f1ade al modelo las tablas y relaciones necesarias para almacenar la informaci\u00f3n de los clientes que realizan el viaje, as\u00ed como en qu\u00e9 hotel duermen.</p> <p>\u25b6\ufe0f Genera el diagrama de tablas con https://dbdiagram.io/ completo.</p>"},{"location":"temas/02B/2.B-Actividades.html#ac211b","title":"AC211.B","text":"Ejercicio AC311.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6c, CE6d // 3p <p>A partir del esquema y de las tablas obtenidas en la actividad AC205.B, completa el diccionario de datos, indicando tanto la informaci\u00f3n de las tablas, como sus relaciones y restricciones.</p>"},{"location":"temas/02B/2.B-Actividades.html#ac212b","title":"AC212.B","text":"Ejercicio AC212.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6c, CE6d // 3p <p>A partir del diagrama y del esquema obtenidos en la actividad AR210.B, completa el diccionario de datos.</p>"},{"location":"temas/02B/2.B-Actividades.html#ac213b","title":"AC213.B","text":"Ejercicio AC213.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6b // 3p <p>A partir de la siguiente tabla, indica las dependencias funcionales:</p> codEnvio fEnvio codCamion tipoCamion codProducto tipoProducto cantidad 111 1/1/24 C1 Tr\u00e1iler A Zapatos 180 111 1/1/24 C1 Tr\u00e1iler B Gorras 120 222 2/1/24 C2 Tr\u00e1iler C Camisetas 2000 333 3/1/24 C3 Furgoneta D Calcetines 1200 333 3/1/24 C3 Furgoneta A Zapatos 360 444 3/1/24 C2 Tr\u00e1iler C Camisetas 3000 555 3/1/24 C1 Tr\u00e1iler B Gorras 140"},{"location":"temas/02B/2.B-Actividades.html#ac214b","title":"AC214.B","text":"Ejercicio AC214.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6g // 3p <p>Considera la siguiente relaci\u00f3n que almacena informaci\u00f3n acerca de proyectos en una gran empresa aeroespacial. Se pide normalizar los datos hasta la tercera forma normal.:</p> <p><code>**TRABAJO** (nomProy, jefeProy, idEmp, horas, nomEmp, fondos, fInicio, salario, nomDpto, jefeDpto, puntos)</code></p> <p>Teniendo en cuenta que:</p> <ol> <li>Cada proyecto tiene un nombre \u00fanico.</li> <li>Los nombres de los empleados, jefes de proyectos y jefes de departamentos no son \u00fanicos.</li> <li>Cada proyecto tiene un jefe de proyecto.</li> <li>Muchos empleados se pueden asignar para trabajar en cada proyecto, y un empleado se puede asignar a m\u00e1s de un proyecto.</li> <li>El atributo <code>horas</code> indica la cantidad de horas por semana que un empleado particular se asigna a trabajar en un proyecto particular.</li> <li>El atributo <code>fondos</code> almacena la cantidad de dinero asignada para un proyecto.</li> <li>El atributo <code>fInicio</code> da la fecha de comienzo para un proyecto.</li> <li>El atributo <code>nomDpto</code> proporciona el nombre del departamento al que pertenece un empleado. Los nombres de departamentos son \u00fanicos.</li> <li>El atributo <code>jefeDpto</code> proporciona el nombre del supervisor de departamento, que puede no ser el mismo que el supervisor o jefe del proyecto.</li> <li>El atributo <code>puntos</code> proporciona una medida del buen hacer de un empleado en un proyecto particular. El jefe de proyecto asigna la calificaci\u00f3n al final del trabajo del empleado en dicho proyecto.</li> </ol> nomProy jefeProy idEmp horas nomEmp fondos fInicio salario nomDpto jefeDpto puntos Zeus Duque E101 25 Pedro 20.000 \u00bc/24 30.000 Aeron\u00e1utica \u00c1ngel 9 Zeus Duque E105 30 Laura 20.000 \u00bc/24 26.000 Rob\u00f3tica Paco Zeus Duque E110 10 Miguel 20.000 \u00bc/24 21.000 Aeron\u00e1utica \u00c1ngel 8 Atreus Meca E101 5 Pedro 50.000 15/10/24 30.000 Aeron\u00e1utica \u00c1ngel Atreus Meca E110 20 Miguel 50.000 15/10/24 21.000 Aeron\u00e1utica \u00c1ngel Atreus Meca E120 15 Noa 50.000 15/10/24 25.000 Lanzamientos Paco"},{"location":"temas/02B/2.B-Actividades.html#ac215b","title":"AC215.B","text":"Ejercicio AC215.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6g // 3p <p>A partir del siguiente esquema relacional de una librer\u00eda, desnormal\u00edzalo para simplificar su estructura:</p> <ul> <li> <p>LIBRO (isbn, titulo, autor, editorial, numPaginas)</p> <ul> <li>\u00b7 PK: (nif)</li> <li>\u00b7 FK: (autor) \u2192 ESCRITOR</li> <li>\u00b7 FK: (editorial) \u2192 EDITORIAL</li> </ul> </li> <li> <p>ESCRITOR (nif*, nombre, pais)</p> <ul> <li>\u00b7 PK: (nif)</li> </ul> </li> <li> <p>EDITORIAL (codigo*, nombre, pais)</p> <ul> <li>\u00b7 PK: (codigo)</li> </ul> </li> </ul>"},{"location":"temas/02B/2.B-Actividades.html#ar216b","title":"AR216.B","text":"Ejercicio AC216.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6g // 3p <p>Realiza la normalizaci\u00f3n, paso a paso, indicando en cada uno de ellos las tablas resultantes y sus datos, de los siguientes supuestos:</p> <p>a. Un tabla que contiene la informaci\u00f3n de estudiantes y los cursos en los que se matricula, la cual tiene la siguiente informaci\u00f3n:</p> <pre><code>| idEstudiante | nomEstudiante | cursos |\n| --- | --- | --- |\n| 134 | Javier Hern\u00e1ndez | Matem\u00e1ticas, Biolog\u00eda, F\u00edsica |\n| 178 | Sonia Tovar | Biolog\u00eda, Inform\u00e1tica |\n| 249 | Juani Moya | Inform\u00e1tica, Matem\u00e1ticas |\n</code></pre> <p>b. Una tabla que contiene informaci\u00f3n de productos y sus proveedores</p> <pre><code>| idProducto | nomProducto | nomProveedor | telefProveedor | categor\u00eda |\n| --- | --- | --- | --- | --- |\n| 1234 | Tela de ara\u00f1a | Spiderman | 666000000 | Consumible |\n| 3378 | M\u00e1quina del Tiempo | Dr Who | 777000000 | Veh\u00edculo |\n| 2549 | Varita M\u00e1gica | Harry Potter | 888000000 | Herramienta |\n</code></pre>"},{"location":"temas/02B/2.B-Actividades.html#ar217b","title":"AR217.B","text":"Ejercicio AC217.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6g // 3p <p>A partir del siguiente esquema relacional, se nos pide optimizar el modelo aplicando desnormalizaci\u00f3n, ya que, para cada artista, se quieren recuperar las 5 canciones primeras canciones, y con el dise\u00f1o actual, la consulta es muy lenta:</p> <ul> <li> <p>ARTISTA (id, nombre, foto)</p> <ul> <li>\u00b7 PK: (id)</li> </ul> </li> <li> <p>ALBUM (id, nombre, foto, artista_id)</p> <ul> <li>\u00b7 PK: (id)</li> <li>\u00b7 FK: (artista_id) \u2192 ARTISTA</li> <li>\u00b7 VNN: (artista_id)</li> </ul> </li> <li> <p>CANCION (id, nombre, letra, album_id*)</p> <ul> <li>\u00b7 PK: (id)</li> <li>\u00b7 FK: (album_id) \u2192 ARTISTA</li> <li>\u00b7 VNN: (album_id)</li> </ul> </li> </ul> <p>\u00bfQu\u00e9 has hecho para mejorar el rendimiento? \u00bfEn qu\u00e9 forma normal se encuentra ahora el modelo relacional?</p> <p>Justifica tu respuesta.</p>"},{"location":"temas/02B/2.B-Actividades.html#ar218b","title":"AR218.B.","text":"Ejercicio AC218.B Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6b, CE6c, CE6d, CE6e, CE6f, CE6g // 3p <p>Una vez finalizada la unidad, responde todas las preguntas del cuestionario, con al menos un par de l\u00edneas para cada una de las cuestiones.</p> <p>Cuestionario</p> <ol> <li>\u00bfQu\u00e9 diferencia el modelo conceptual del l\u00f3gico?</li> <li>\u00bfCu\u00e1l es el elemento principal del modelo relacional?</li> <li>\u00bfPodemos tener dos atributos con el mismo nombre?</li> <li>Si una tabla tiene 3 columnas y 5 filas, \u00bfCu\u00e1l es su cardinalidad y grado?</li> <li>\u00bfPodemos tener una tabla sin columnas?</li> <li>\u00bfY una tabla sin filas?</li> <li>\u00bfQu\u00e9 funci\u00f3n tiene la clave primaria?</li> <li>\u00bfQu\u00e9 es una clave alternativa?</li> <li>\u00bfTodas las tablas tienen m\u00e1s de una clave candidata?</li> <li>\u00bfEn qu\u00e9 consiste la integridad referencial?</li> <li>\u00bfEl valor de una clave ajena siempre debe tener valor?</li> <li>\u00bfQu\u00e9 es una dependencia funcional?</li> <li>\u00bfY una dependencia funcional completa?</li> <li>\u00bfEn qu\u00e9 consiste la 1FN? \u00bfY la 2FN? \u00bfY la 3FN?</li> <li>\u00bfQu\u00e9 es la denormalizaci\u00f3n y cu\u00e1l es su objetivo?</li> </ol>"},{"location":"temas/02C/index.html","title":"Inicio","text":""},{"location":"temas/02C/index.html#ut2-c-diseno-logico-transformacion-del-modelo-er-a-mr","title":"UT2-C Dise\u00f1o L\u00f3gico: Transformaci\u00f3n del modelo ER a MR","text":"<p>Informaci\u00f3n de la unidad</p> ContenidosPropuesta did\u00e1ctica <p>Interpretaci\u00f3n de Diagramas Entidad/Relaci\u00f3n:</p> <p>\u2212 Paso del diagrama E/R al modelo relacional.</p> <p>En esta unidad vamos a comenzar a trabajar el RA6: Dise\u00f1a modelos relacionales normalizados interpretando diagramas entidad/relaci\u00f3n.</p> <p>Criterios de evaluaci\u00f3n</p> <ul> <li>CE6a: Se han utilizado herramientas gr\u00e1ficas para representar el dise\u00f1o l\u00f3gico.</li> <li>CE6b: Se han identificado las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6c: Se han identificado los campos que forman parte de las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6d: Se han analizado las relaciones entre las tablas del dise\u00f1o l\u00f3gico.</li> <li>CE6e: Se han identificado los campos clave.</li> <li>CE6f: Se han aplicado reglas de integridad.</li> <li>CE6g: Se han aplicado reglas de normalizaci\u00f3n.</li> <li>CE6h: Se han analizado y documentado las restricciones que no pueden plasmarse en el dise\u00f1o l\u00f3gico.</li> </ul>"},{"location":"temas/02C/index.html#contenido-de-la-unidad","title":"Contenido de la unidad","text":"<p>El contenido de la unidad est\u00e1 repartido en los siguientes bloques.</p> <p>\u00cdndice:</p> <ul> <li>2.5 Transformaci\u00f3n del modelo ER a MR</li> <li>2.C Actividades</li> </ul>"},{"location":"temas/02C/index.html#programacion-de-aula-13h","title":"Programaci\u00f3n de Aula (13h)","text":"<p>Esta unidad es la cuarta, con lo que se imparte en la primera evaluaci\u00f3n, durante el mes de noviembre, con una duraci\u00f3n estimada de 13 sesiones lectivas:</p> Sesi\u00f3n Contenidos Actividades Criterios trabajados 1 Paso de E/R al MR 2 Relaciones 1:N y 1:1 AC401, AC402 CE6b-CE6f, CE6h 3 Relaciones N:M AC403 CE6b-CE6f, CE6h 4 Restricciones AC406 CE6b-CE6f, CE6h 5 Generalizaci\u00f3n AC408 CE6b-CE6f, CE6h 6 Pr\u00e1ctica \"Cocina\" PR409 CE6a-CE6g, CE6h 7 De MR a EER I 8 De MR a EER II AC410, AC411 CE6d 9 Interpretando MR AC415 CE6a-CE6f 10 Reto - dise\u00f1o l\u00f3gico PY416 RA6 11 Pr\u00e1ctica \"Ticket de compra\" PR417 RA6 12 Prueba objetiva PO418 RA6 13 Prueba objetiva"},{"location":"temas/02C/2.5-Transformacion.html","title":"2.4 Transformaci\u00f3n ER a MR","text":""},{"location":"temas/02C/2.5-Transformacion.html#25-transformacion-del-modelo-er-a-mr","title":"2.5. Transformaci\u00f3n del modelo ER a MR","text":"<p>\ud83d\udc49 Pasos</p> <p>Una vez conocido el modelo conceptual entidad-relaci\u00f3n y el modelo l\u00f3gico relacional, vamos a estudiar como transformar y pasar de uno a otro. Para ello, seguiremos los siguientes pasos:</p> <ul> <li>Entidades  \u2192  Tablas</li> <li>Atributos  \u2192  Columnas</li> <li>Atributos identificadores  \u2192  Claves primarias</li> <li>Atributos de relaciones  \u2192  Columnas detr\u00e1s de claves ajenas</li> <li>Relaciones  \u2192  Claves ajenas y/o tablas</li> </ul> <p>Resumen de transformaci\u00f3n</p> <ol> <li>Toda entidad se transforma en una relaci\u00f3n.</li> <li>Las interrelaciones N:M se transforman en una relaci\u00f3n.</li> <li>Las interrelaciones 1:N dan lugar o bien a una propagaci\u00f3n de clave o bien a una relaci\u00f3n</li> <li>Las interrelaciones 1:1 dan lugar a la propagaci\u00f3n de la clave de una entidad a la otra</li> </ol>"},{"location":"temas/02C/2.5-Transformacion.html#atributos","title":"\ud83d\udcc1 Atributos","text":"<p>Conviene recordar que dentro de una tabla, no se puede repetir el nombre de ning\u00fan atributo, pero s\u00ed en tablas diferentes.</p> <p>Algunos profesionales prefieren que no se repitan los identificadores entre diferentes tablas de una misma BD, aunque es cierto que las herramientas ORM de generaci\u00f3n de modelos f\u00edsicos a partir de definici\u00f3n de clases u objetos suelen nombrar todas las claves primarias como <code>id</code> o <code>_id</code>.</p> <p>En cuanto a los atributos compuestos, se separan como atributos individuales dentro de la tabla, pudi\u00e9ndoles poner el prefijo del atributo compuesto o el propio nombre del atributo si no da pie a confusi\u00f3n.</p> <p>Para los atributos derivados, dependiendo del caso, bien no se a\u00f1aden como atributo (ya que se obtendr\u00e1n a partir de los datos de las relaciones), o bien se renombra el atributo para almacenar el dato en crudo sobre el cual se realiza el c\u00e1lculo necesario.</p> <p></p> <p>Transformaci\u00f3n de atributos</p> <p>Por ejemplo, si partimos de un sencillo modelo ER de un cliente, su transformaci\u00f3n al modelo relacional ser\u00eda la siguiente:</p> <p><code>**CLIENTE** (dni, nombre, calle, numPiso, ciudad, fnac)</code> <code>\u00b7 PK: (dni)</code></p> <p>Destacar que no hemos puesto el nombre del atributo compuesto, sino cada uno de sus atributos, y adem\u00e1s, hemos renombrado <code>numero</code> a <code>numPiso</code> para evitar confusiones con otras entidades; respecto al atributo derivado edad, lo hemos cambiado por la fecha de nacimiento.</p> <p>Respecto a los atributos multivaluados, derivan en una relaci\u00f3n uno a muchos (1:N), tal como veremos a continuaci\u00f3n.</p>"},{"location":"temas/02C/2.5-Transformacion.html#claves-compuestas","title":"Claves compuestas","text":"<p>Normalmente, cada entidad tendr\u00e1 un atributo identificador que traduciremos en una clave primaria. Pero puede darse el caso que una entidad tenga una clave compuesta, o tenga marcados dos atributos identificadores (en este caso, uno ser\u00e1 la clave primaria y el otro ser\u00e1 una clave alternativa que marcaremos como \u00fanica).</p> <p>Por ejemplo, el siguiente diagrama representa un aula que se identifica mediante una clave compuesta:</p> <p></p> <p><code>**AULA** (edificio, numSala, numAsientos)</code> <code>\u00b7 PK: (edificio, numSala)</code></p> <p>Sin embargo, tambi\u00e9n podemos tener un empleado con dos atributos identificadores:</p> <p><code>**EMPLEADO** (codigo, nif, nombre, salario)</code> <code>\u00b7 PK: (codigo)</code> <code>\u00b7 UK: (nif)</code></p>"},{"location":"temas/02C/2.5-Transformacion.html#transformacion-de-relaciones-fuertes","title":"\u26a1 Transformaci\u00f3n de Relaciones (fuertes)","text":"<p>Al transformar las relaciones, dependiendo de la cardinalidad deberemos colocar la clave ajena en un lugar u otro.</p> <p>Cada entidad se transforma en una tabla, donde los atributos de la entidad se convierten en columnas de la tabla, y el atributo identificador se convierte en la clave primaria de la tabla.</p> <ul> <li>Entidades. Las entidades pasan a ser tablas</li> <li>Atributos. Los atributos pasan a ser columnas o atributos de la tabla.<ul> <li>Atributos identificadores. Pasan a ser claves primarias o alternativas.<ul> <li>Claves primarias. Son aquellos atributos que identifican de forma \u00fanica cada tupla de la tabla.</li> <li>Claves alternativas. Son aquellos atributos que tambi\u00e9n identifican de forma \u00fanica cada tupla de la tabla, pero no son la clave primaria. Estos atributos tendr\u00e1n las restricciones UNIQUE y NOT NULL.</li> </ul> </li> <li>Atributos compuestos. Se transforman en los atributos que los componen. Por ejemplo, si vi\u00e9ramos un atributo compuesto que fuera Direcci\u00f3n, que estuviera formado por calle, n\u00famero, piso y puerta, se transformar\u00e1 en los atributos de la relaci\u00f3n calle, n\u00famero, piso y puerta.</li> <li>Atributos obligatorios. Se convierten en atributos de la relaci\u00f3n con la restricci\u00f3n de NOT NULL, es decir no puede ser nulo.</li> <li>Atributos opcionales. Pueden tomar valores nulos.</li> <li>Atributos multivaluados. Se transforman en una nueva tabla, cuya clave primaria est\u00e1 formada por la clave primaria de la entidad en la que se sit\u00faa el atributo multivaluado m\u00e1s el nombre del atributo multivaluado. En ocasiones, si el atributo multivaluado no admite repeticiones, es suficiente \u00e9ste como clave primaria.</li> </ul> </li> </ul>"},{"location":"temas/02C/2.5-Transformacion.html#transforma-relacion-1n","title":"\u2198\ufe0f Transforma relacion 1:N","text":"<p>La clave primaria de la entidad con cardinalidad m\u00e1xima a 1 se incluye en la entidad con cardinalidad m\u00e1xima N como clave ajena.</p> <p></p> <p><code>**A** (a0, a1, b0*)</code> <code>\u00b7 PK: (a0)   \u00b7 FK: (b0) \u2192 B</code></p> <p><code>**B** (b0, b1)</code> <code>\u00b7 PK: (b0)</code></p> <p>De esta manera, tenemos que dado un registro en A, tendremos uno en B. Y dado un B, podemos tener muchos en A, cumpliendo la cardinalidad de uno a muchos.</p> <p>Ejemplo 2: Relaci\u00f3n 1:N. Personas y tel\u00e9fonos</p> <p>Por ejemplo, si tenemos un modelo donde, en vez de un atributo multivaluado, hemos creado una entidad para modelar que una persona puede tener muchos tel\u00e9fonos:</p> <p></p> <p>Si aplicamos la transformaci\u00f3n reci\u00e9n vista, obtenemos el siguiente esquema l\u00f3gico:</p> <p><code>**PERSONA** (dni, nombre, direccion)</code> <code>\u00b7 PK: (dni)</code> <code>**TELEFONO** (numero, propio, dni*)</code> <code>\u00b7 PK: (numero)</code> <code>\u00b7 FK: (dni) \u2192 PERSONA</code></p> <p>Conviene recordar que la clave ajena ser\u00e1 la clave primaria que nos hemos traido desde la entidad con cardinalidad m\u00e1xima a 1 (en este caso, llevamos la clave primaria de <code>PERSONA</code> a <code>TELEFONO</code>), de manera que el atributo <code>TELEFONO.dni</code> representa la relaci\u00f3n <code>TENER</code>.</p> <p>Las claves ajenas se colocan tras los atributos de cada tabla (en este caso, detr\u00e1s de <code>numero</code> y <code>propio</code>), y normalmente, se nombran con el mismo nombre de la clave primaria. Si diera pie a confusi\u00f3n, es recomendable renombrarla pudiendo como sufijo el nombre de la tabla.</p> <p>Finalmente, si quisi\u00e9ramos generar el diagrama relacional, obtendr\u00edamos una gr\u00e1fico similar al siguiente, donde se puede ver como desde <code>TELEFONO.dni</code> se conecta con <code>PERSONA.dni</code>:</p> <p></p> Esquema relacional en ERDPlus <p></p> <p>\ud83d\udca1 Recordad la regla de integridad referencial del modelo relacional, donde cada valor de la clave ajena debe coincidir con un valor existente de la clave primaria a la que referencia (o ser nulo). De esta manera, no podemos tener un dni en la tabla TELEFONO que no exista previamente en la tabla PERSONA.</p> <ul> <li> <p><code>PERSONA</code></p> dni nombre direccion 11111111A Pedro Casas Calle Mayor, 1 22222222B Laura Garc\u00eda Avda Libertad, 33 33333333C Mireia Vidal Paseo de la Estaci\u00f3n, 5 </li> <li> <p><code>TELEFONO</code></p> numero propio dni<code>*</code> 636111111 true 22222222B 686222222 true 11111111A 666333333 false 11111111A 666444444 true --error: un telefono debe pertenecer a una persona-- </li> </ul> <p>Renombrando claves ajenas</p> <p>Aunque es muy com\u00fan que el nombre del atributo que hace de clave ajena coincida con la clave primaria a la que apunta, podemos renombrarla y ponerle un nombre que facilite su comprensi\u00f3n.</p> <p>En el caso de la tabla <code>TELEFONO</code>, el campo <code>dni</code> hace referencia al titular del tel\u00e9fono, no es que un tel\u00e9fono tenga un dni. Podr\u00edamos haber modelado la tabla renombrando el <code>TELEFONO.dni</code> como <code>TELEFONO.propietario</code> dando un valor sem\u00e1ntico al atributo:</p> <p><code>**TELEFONO** (numero, propio, propietario*)</code> <code>\u00b7 PK: (numero)</code> <code>\u00b7 FK: (propietario) \u2192 PERSONA</code></p> <p>Lo que s\u00ed es obligatorio es que los dominios de las claves ajenas y las claves primarias coincidan.</p> <p>Atributos multivaluados</p> <p>Cuando tenemos un atributo multivaluado, \u00e9ste se mapea en una relaci\u00f3n separada.</p> <p>Podemos crear una nueva tabla con un c\u00f3digo o atributo identificador para cada registro y a\u00f1adir una clave ajena a modo de relaci\u00f3n 1:N.</p> <p></p> <p>As\u00ed pues, si tenemos un empleado que tiene muchos tel\u00e9fonos mediante un atributo, generaremos dos tablas:</p> <p><code>**EMPLEADO** (nif, nombre)</code> <code>\u00b7 PK: (nif)</code> </p> <p><code>**TELEFONO** (numero, dni*)</code> <code>\u00b7 PK: (numero)</code> <code>\u00b7 FK: (dni) \u2192 EMPLEADO</code></p> <p>Si fuera un valor que pudiese compartirse entre varios empleados, como pudiera ser que un empleado tiene muchos cargos, y ese mismo cargo lo pueden tener varios empleados (pero no nos interesa a priori modelarlo conceptualmente como una entidad), podr\u00edamos crear una clave primaria compuesta:</p> <p><code>**CARGO** (cargo, dni*)</code> <code>\u00b7 PK: (cargo, dni)</code> <code>\u00b7 FK: (dni) \u2192 EMPLEADO</code></p>"},{"location":"temas/02C/2.5-Transformacion.html#transformar-relacion-11","title":"\u2198\ufe0f Transformar relaci\u00f3n 1:1","text":"<p>En este caso, la clave ajena se pone en cualquier entidad y se a\u00f1ade como clave alternativa/\u00fanica (<code>UK</code>).</p> <p>Como norma general, las relaciones con cardinalidad 1:1 no generan una tabla, lo que haremos ser\u00e1 que la clave primaria de una entidad pasar\u00e1 a formar parte de la tabla de la otra entidad, y pasar\u00e1 como un atributo.</p> <p>La participaci\u00f3n de cada una de las entidades ser\u00e1 lo que nos ayude a decidir cu\u00e1l ser\u00e1 la entidad que pasar\u00e1 su clave primaria a la otra entidad.</p> <p>\ud83d\udd25 Excepci\u00f3n: S\u00f3lo existe un caso donde una relaci\u00f3n con cardinalidad 1:1 genera una nueva tabla, y ser\u00e1 cuando la participaci\u00f3n de las dos entidades sea de tipo (0,1) \u2013 (0,1).</p> <p>Veamos ejemplos de los distintos casos:</p> <p>Participaci\u00f3n (1,1)-(0,1)</p> <p>En estos casos, la clave primaria de la entidad del lado (1,1) se propagar\u00eda la entidad del lado (0,1), es decir, la clave primaria de la entidad USUARIO pasa a la entidad CANAL_YOUTUBE, quedando las tablas del modelo as\u00ed:</p> <p> </p> <p>Participaci\u00f3n (1,1)-(1,1)</p> <p>Estos casos podemos resolverlos de dos maneras distintas:</p> <ol> <li>Propagando la clave primaria de cualquiera de las entidades a la otra. Da igual que entidad sea la que propague la clave. Este es la manera m\u00e1s habitual de proceder.</li> <li>La clave primaria de cada entidad se propaga en la otra entidad, quedando algo as\u00ed:</li> </ol> <p> </p> <p>Participaci\u00f3n (0,1)-(0,1)</p> <p></p> <p>En este caso tenemos dos opciones:</p> <ol> <li> <p>Propagamos la clave primaria de una entidad a la otra entidad. Esta es la soluci\u00f3n m\u00e1s usada.</p> </li> <li> <p>Crear una nueva tabla en la que almacenaremos la relaci\u00f3n entre las dos entidades. La clave primaria de esta entidad podr\u00eda ser cualquiera de las claves primarias de la otras entidades.</p> </li> </ol> <ul> <li> <p> </p><p>Optci\u00f3n 1</p><p></p> </li> <li> <p> </p><p>Optci\u00f3n 2</p><p></p> </li> </ul> <p></p>"},{"location":"temas/02C/2.5-Transformacion.html#transformacion-relaciones-reflexivas","title":"\u2198\ufe0f Transformaci\u00f3n Relaciones Reflexivas","text":"<p>Interrelaciones Reflexivas 1:M</p> <p>La clave primaria se almacena en la misma tabla como atributo.</p> <ul> <li> <p> </p><p>Relaci\u00f3n reflexiva</p><p></p> </li> <li> <p> </p><p>Transformaci\u00f3n: Relaci\u00f3n reflexiva</p><p></p> </li> </ul> <p>Interrelaciones Reflexivas N:M</p> <ul> <li> <p> </p><p>Relaci\u00f3n reflexiva N:M</p><p></p> </li> <li> <p> </p><p>Transformaci\u00f3n: Relaci\u00f3n reflexiva N:M</p><p></p> </li> </ul> <p>Claves ajenas compuestas</p> <p>\u00bfY si nuestra entidad tiene una clave primaria compuesta? En este caso, la clave ajena tambi\u00e9n deber\u00e1 compuesta. Esto se aplica a cualquier transformaci\u00f3n, 1:1, 1:N, N:M  o reflexivas.</p>"},{"location":"temas/02C/2.5-Transformacion.html#transformacion-de-relacion-nm","title":"\u2198\ufe0f Transformaci\u00f3n de relaci\u00f3n N:M","text":"<p>En el caso de las relaciones muchos a muchos, la relaci\u00f3n se traduce en una nueva tabla, cuya clave primaria se compone de las claves primarias referenciadas, y cada clave primaria es una clave ajena.</p> <p>En caso del que la interrelaci\u00f3n tuviera un atributo, se convertir\u00eda en un atributo de la nueva relaci\u00f3n. En algunos casos, sobre todo cuando las interrelaciones tienen atributos que denotan una dimensi\u00f3n temporal (generalmente atributos que recogen fechas, horas o intervalos de tiempo), estos deben formar parte de la clave primaria de la nueva relaci\u00f3n.</p> <p>Para este ejemplo, tenemos una empresa de transportes, donde un conductor conduce varios autobuses, y luego un autobus lo conducen varios conductores en diferentes trayectos, dando lugar a una relaci\u00f3n muchos a muchos, donde en la relaci\u00f3n a\u00f1adimos el atributo <code>trayecto</code>:</p> <ul> <li> <p> </p><p>Relaci\u00f3n N:M</p><p></p> </li> <li> <p> </p><p>Transformaci\u00f3n: Relaci\u00f3n N:M</p><p></p> </li> </ul> <p>El orden importa</p> <p>Cuando pasamos una relaci\u00f3n uno a muchos o muchos a muchos de un modelo ER a un modelo relacional, primero crearemos las tablas que no tienen claves ajenas.</p> <p>En este caso, empezaremos por <code>CONDUCTOR</code> y <code>AUTOBUS</code>, definiendo sus claves primarias y atributos.</p> <p>A continuaci\u00f3n, crearemos la/s tabla/s que contiene claves ajenas a las tablas ya creadas, esto es, la tabla <code>CONDUCIR</code> que apunta a <code>CONDUCTOR</code> y <code>AUTOBUS</code>.</p> <p>En este caso, el diagrama del modelo relacional se traduce en tres tablas conectadas, colocando el atributo de la relaci\u00f3n en la nueva tabla <code>CONDUCIR</code>. Destacar como la tabla tiene una clave primaria compuesta, donde de cada parte de la clave sale una clave ajena a cada una de las tablas que relaciona:</p> <p>Y comprobamos con datos c\u00f3mo s\u00ed se cumplen las cardinalidades:</p> <ul> <li> <p><code>AUTOBUS</code></p> matricula<code>*</code> categoria 1111ABC normal 2222BCD larga distancia 3333DEF larga distancia </li> <li> <p><code>CONDUCTOR</code></p> nif<code>*</code> nombre experiencia 11111111A Andr\u00e9s Checa 1 22222222B Jos\u00e9 Escrig 2 33333333B Marina Fern\u00e1ndez 3 </li> <li> <p><code>CONDUCIR</code></p> conductorId<code>*</code> autobusId<code>*</code> trayecto 11111111A 1111ABC A 22222222B 1111ABC B 11111111A 3333DEF C </li> </ul>"},{"location":"temas/02C/2.5-Transformacion.html#nm-con-dimension-temporal","title":"N:M con dimensi\u00f3n temporal","text":"<p>Si la relaci\u00f3n tiene atributos de tipo fecha, ser\u00e1 necesario incluir al menos uno en la clave primaria.</p> <p>Supongamos una empresa de alquiler de veh\u00edculos, donde tenemos que un cliente puede alquilar el mismo veh\u00edculo en fechas diferentes, o alquilar diferentes veh\u00edculos. Claramente, un veh\u00edculo lo pueden alquilar diferentes clientes en fechas diferentes. Para ello, creamos una relaci\u00f3n muchos a muchos, colocando la fecha de inicio y de finalizaci\u00f3n del alquiler en la propia relaci\u00f3n.</p> <ul> <li> <p> </p><p>Relaci\u00f3n N:M dimension temporal</p><p></p> </li> <li> <p> </p><p>Transformaci\u00f3n: Relaci\u00f3n N:M dimension temporal</p><p></p> </li> </ul> <p>Y la tabla que las relaciona con el atributo de fecha de inicio como parte de la clave primaria (de este modo, el cliente A puede alquilar el veh\u00edculo X en d\u00edas diferentes)</p>"},{"location":"temas/02C/2.5-Transformacion.html#restricciones","title":"\u274c Restricciones","text":"<p>Una vez visto como se transforman los atributos y las relaciones, vamos a ver algunas particularidades a la hora de aplicar restricciones sobre las cardinalidades.</p>"},{"location":"temas/02C/2.5-Transformacion.html#cardinalidad-minima-1","title":"Cardinalidad m\u00ednima 1","text":"<p>Cuando la cardinalidad m\u00ednima es 1, independientemente de la cardinalidad m\u00e1xima, estamos indicando que s\u00ed o s\u00ed dicha clave ajena debe tener un valor. Para cumplirla, \u00fanicamente debemos marcar la clave ajena como valor no nulo (VNN).</p> <p>Usuario y Post</p> <p>Un usuario puede escribir muchos Post y un Post debe ser escrito por un \u00fanico usuario. Relaci\u00f3n 1-N, con cardinalidad (1,1)-(1,N).</p> <p>En este caso, para indicar la cardinalidad m\u00ednima a 1 (un post debe tener un usuario), se indica el campo <code>usuarioId</code> (FK) en la tabla Post, como NN (Not Null)</p> <ul> <li> <p> </p><p>Cardinalidad m\u00ednima a 1</p><p></p> </li> <li> <p> </p><p>Cardinalidad m\u00ednima a 1</p><p></p> </li> </ul> <p>\ud83d\udd25 En los casos de cardinalidad m\u00ednima en relaciones 1:1, que son las que cambian m\u00e1s la transformaci\u00f3n ya lo vimos en los ejemplos de esos casos.</p>"},{"location":"temas/02C/2.5-Transformacion.html#identificacion","title":"Identificaci\u00f3n","text":"<p>En las restricciones de identificaci\u00f3n, la entidad d\u00e9bil se identifica, completamente o en parte, con la entidad fuerte. Es decir, parte de la clave primaria de la entidad d\u00e9bil son los atributos clave de la entidad fuerte. Es por ello, que la clave ajena debe formar parte de la clave primaria, la cual se define como una clave compuesta por la combinaci\u00f3n de la clave primaria de la entidad fuerte y la d\u00e9bil:</p> <p></p> <p>Los atributos clave de la entidad d\u00e9bil que no apuntan a la entidad fuerte se conocen como clave parcial. En el ejemplo anterior, <code>a0</code> ser\u00eda la clave parcial de la entidad d\u00e9bil <code>A</code>.</p> <p>En el siguiente ejemplo, tenemos que cada sala se identifica por el cine al que pertenece por un n\u00famero de sala, el cual se reinicia por cada cine. Es decir, la sala 1 del cine IMF no es la misma tupla que la sala 1 del cine ABC:</p> <ul> <li> <p> </p><p>Ejemplo de restricci\u00f3n de IDdentificacion</p><p></p> </li> <li> <p> </p><p>Ejemplo de restricci\u00f3n de IDdentificacion</p><p></p> </li> </ul> <p>Las tablas de datos de ejemplo demuestran que aunque la entidad d\u00e9bil repita n\u00famero, la clave de la entidad fuerte deshace la ambig\u00fcedad:</p> <ul> <li> <p><code>CINE</code></p> codigo nombre direccion 1 ABC Elche 2 IMF Ondara 3 Ode\u00f3n Elche </li> <li> <p><code>SALA</code></p> numero cineId<code>*</code> aforo 1 1 50 1 2 60 1 3 70 2 1 55 </li> </ul> <p>Ejemplo resuelto</p> <p>Supongamos el diagrama ER que vimos en la unidad 2 al tratar las [restricciones de ID]. Vamos a obtener el modelo MR del mismo, teniendo en cuenta que la entidad <code>LINEA_PEDIDO</code> es una entidad d\u00e9bil respecto a la relaci\u00f3n <code>CONTENER</code>, pero hace de entidad fuerte respecto a la relaci\u00f3n <code>TENER</code>:</p> <ul> <li> <p> </p><p>Restricci\u00f3n de ID</p><p></p> </li> <li> <p> </p><p>Restricci\u00f3n de IDdentificacion</p><p></p> </li> </ul> <p>\u00bfQu\u00e9 ha pasado con el atributo <code>PEDIDO.total</code>?</p>"},{"location":"temas/02C/2.5-Transformacion.html#generalizacion-y-especializacion-jerarquias","title":"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 Generalizaci\u00f3n y Especializaci\u00f3n (Jerarqu\u00edas)","text":"<p>Existen varias soluciones para realizar el paso a tablas de una especializaci\u00f3n. La soluci\u00f3n que se elija en cada caso depender\u00e1 del tipo de especializaci\u00f3n que estemos resolviendo: total, parcial, inclusiva o exclusiva.</p> <p>Las 3 soluciones posibles que podemos aplicar son las siguientes:</p> <ol> <li> <p>Crear una \u00fanica tabla para la superclase. En este caso todos los atributos de las subclases se guardar\u00edan en la superclase. </p> <p>Adoptaremos esta soluci\u00f3n cuando los subtipos se diferencian en muy pocos atributos y las relaciones que los asocian con el resto de entidades del esquema sean las mismas para todos los subtipos. </p> </li> <li> <p>Crear tablas s\u00f3lo para las subclases. En este caso los atributos de la superclase habr\u00eda que guardarlos en cada una de las subclases.    Elegiremos esta opci\u00f3n cuando existan muchos atributos distintos entre los subtipos.</p> </li> <li> <p>Crear una tabla para cada una de las entidades, tanto para la superclase como las subclases. En este caso las subclases tendr\u00edan que guardar la clave de la primaria de la superclase.</p> </li> </ol> <p>En resumen:</p> <ul> <li>Si es <code>Parcial</code> siempre hay que crear una tabla para la <code>superclase</code>, y las clases de los <code>subtipos</code> depender\u00e1 del n\u00famero de atributos comunes. Si la mayor\u00eda son comunes habr\u00e1 pocos <code>propios</code> de cada subtipo, y por tanto, poco valores nulos o por defecto en la <code>superclase</code>.</li> <li>Si es <code>Total</code>, siempre la <code>superclase</code> estar\u00e1 contenida el alg\u00fan <code>subtipo</code>. La opci\u00f3n de crear o no la tabla para la <code>superclase</code> radica en el n\u00famero de campos comunes entre la superclase y los subtipos. </li> <li>Poco comunes -&gt; Crear subtipos.</li> <li>Muchos comunes -&gt; No crear subtipos.</li> </ul> <p>Exclusiva/Total</p> <p></p> Exclusiva/Total <p></p> <p>En este caso ser\u00eda adecuado utilizar la soluci\u00f3n 2 o 3. Tambi\u00e9n ser\u00eda posible utilizar la soluci\u00f3n 1, pero al tratarse de una especializaci\u00f3n exclusiva y total (las ocurrencias de la superclase est\u00e1n en una subclase y s\u00f3lo en una) , tendr\u00edamos muchas columnas con valores nulos.</p> <p>Soluci\u00f3n 2: Crear una tabla para las subclases</p> <p></p> Soluci\u00f3n 2: Crear una tabla para todas las entidades <p></p> <p>Soluci\u00f3n 3: Crear una tabla para todas las entidades</p> <p>En este caso no existenn relaciones entre ambas tablas, y la tabla en s\u00ed misma indica el tipo.</p> <p></p> Soluci\u00f3n 3 <p></p>"},{"location":"temas/02C/2.5-Transformacion.html#solapadatotal-o-parcial","title":"Solapada/(Total o Parcial)","text":"<p>Si es solapada, imp</p> Exclusiva/Total <p>En este caso ser\u00eda adecuado utilizar la soluci\u00f3n 2 o 3. Tambi\u00e9n ser\u00eda posible utilizar la soluci\u00f3n 1, pero al tratarse de una especializaci\u00f3n exclusiva y total (las ocurrencias de la superclase est\u00e1n en una subclase y s\u00f3lo en una) , tendr\u00edamos muchas columnas con valores nulos.</p> <p>Soluci\u00f3n 2: Crear una tabla para las subclases</p> Soluci\u00f3n 2: Crear una tabla para todas las entidades <p>Soluci\u00f3n 3: Crear una tabla para todas las entidades</p> <p>En este caso no existenn relaciones entre ambas tablas, y la tabla en s\u00ed misma indica el tipo.</p> Soluci\u00f3n 3"},{"location":"temas/02C/2.C-Actividades.html","title":"Actividades","text":""},{"location":"temas/02C/2.C-Actividades.html#ut2-c-actividades","title":"UT2-C. Actividades","text":""},{"location":"temas/02C/2.C-Actividades.html#actividades","title":"Actividades","text":""},{"location":"temas/02C/2.C-Actividades.html#ac201c","title":"AC201.C","text":"Ejercicio AC201.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6b, CE6c // 3p <p>Supongamos el siguiente modelo ER donde representamos un sistema de informaci\u00f3n donde modelamos los datos de un entrenador y los jugadores de un equipo de baloncesto. De momento, s\u00f3lo modelamos la relaci\u00f3n entre el entrenador y los jugadores:</p> <p></p> Actividad 201.C <p></p> <p>Obt\u00e9n el esquema relacional mediante dbdiagram.</p>"},{"location":"temas/02C/2.C-Actividades.html#ac202c","title":"AC202.C","text":"Ejercicio AC202.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6h 2p <p>Sobre el ejercicio anterior, vamos a a\u00f1adir la entidad <code>EQUIPO</code> con el nombre del mismo, su logotipo, direcci\u00f3n y a\u00f1o de creaci\u00f3n. Claramente, cada equipo s\u00f3lo tiene un \u00fanico entrenador, y un entrenador s\u00f3lo puede serlo de un equipo.</p> <p>Se pide:</p> <ul> <li>Modifica el modelo ER para a\u00f1adir la nueva entidad y la relaci\u00f3n necesaria</li> <li>Modifica el modelo relacional a partir del nuevo modelo ER.</li> </ul> <p>Adjunta (image) el diagrama ER realizado en ERDPlus crea el diagrama del modelo relacional con dbdiagram</p>"},{"location":"temas/02C/2.C-Actividades.html#ac203c","title":"AC203.C","text":"Ejercicio AC203.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6h // 3p <p>Realiza el esquema relacional mediante un modelo relacional del siguiente modelo ER (es la soluci\u00f3n del Supuesto de Carreteras de la sesi\u00f3n de Modelo ER:</p> <p></p> Actividad 203.C <p></p> <p>Crea mediante dbdiagram</p>"},{"location":"temas/02C/2.C-Actividades.html#ac204c","title":"AC204.C","text":"Ejercicio AC204.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6h // 3p <p>Tenemos el siguiente modelo ER que representa las diferentes ediciones que de un libro publica una editorial, y los autores que escriben los libros:</p> <p></p> Actividad 204.C <p></p> <p>Crea mediante dbdiagram</p>"},{"location":"temas/02C/2.C-Actividades.html#ac205c","title":"AC205.C","text":"Ejercicio AC205.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6h // 3p <p>Tenemos el siguiente modelo ER sobre la organizaci\u00f3n de una empresa en departamentos y las caracter\u00edsticas de sus empleados:</p> <p></p> Actividad 205.C <p></p> <p>Crea mediante dbdiagram</p>"},{"location":"temas/02C/2.C-Actividades.html#ac206c","title":"AC206.C","text":"Ejercicio AC206.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6h // 3p <p>A partir del siguiente modelo ER que contiene restricciones de cardinalidad m\u00ednima y restricciones de identificaci\u00f3n, se pide:</p> <ul> <li>Genera el modelo relacional.</li> <li>Rellena tres tablas con datos ficticios (al menos 3 registros por tabla), ya sean datos relacionados o no, conforme consideres</li> </ul> <p></p> Actividad 206.C <p></p>"},{"location":"temas/02C/2.C-Actividades.html#ac207c","title":"AC207.C","text":"Ejercicio AC207.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6h // 3p <p>Crea el modelo relacional a partir del modelo conceptual sobre un centro educativo.</p> <p></p> Actividad 207.C <p></p>"},{"location":"temas/02C/2.C-Actividades.html#ac208c","title":"AC208.C","text":"Ejercicio AC208.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6h // 3p <p>Crea el modelo relacional a partir del modelo conceptual:</p> <p></p> Actividad 208.C <p></p>"},{"location":"temas/02C/2.C-Actividades.html#ac209c","title":"AC209.C","text":"Ejercicio AC209.C Criterios de Evaluaci\u00f3n Ponderaci\u00f3n RABD.6 // CE6a, CE6b, CE6c, CE6d, CE6e, CE6f, CE6h // 3p <p>Crea el modelo relacional a partir del modelo conceptual:</p> <p></p> Actividad 209.C <p></p>"}]}